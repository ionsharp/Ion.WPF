<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Data="clr-namespace:Ion.Data"
    xmlns:Text="clr-namespace:Ion.Text;assembly=Ion">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Control}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Type PasswordBox}" TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="Background" Value="{i:Theme TextBoxBackground}" />
        <Setter Property="BorderBrush" Value="{i:Theme TextBoxBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CaretBrush" Value="{i:Theme TextBoxCaret}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="FontFamily" Value="{i:Bind FontFamily, AppSource=Data}"/>
        <Setter Property="FontSize" Value="13" />
        <Setter Property="Foreground" Value="{i:Theme Text}" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="IsInactiveSelectionHighlightEnabled" Value="True" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Border.CornerRadius" Value="0" />
        <Setter Property="i:XPasswordBox.GenerateButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <i:ImageButton DataContext="{Data:Ancestor PasswordBox}"
                        Command="{x:Static i:XPasswordBox.GenerateCommand}"
                        CommandTarget="{i:Bind}"
                        Focusable="False"
                        Margin="0,0,5,0"
                        Source="{i:Image Key=Refresh}"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XPasswordBox.GenerateButtonVisibility" Value="Visible"/>
        <Setter Property="i:XPasswordBox.GenerateCharacters" Value="{x:Static Text:Characters.LettersAndNumbers}" />
        <Setter Property="i:XPasswordBox.GenerateDistinct" Value="True" />
        <Setter Property="i:XPasswordBox.GenerateLength" Value="8,16" />
        <Setter Property="i:XPasswordBox.Mask" Value="True" />
        <Setter Property="i:XPasswordBox.Placeholder" Value="{i:Text Password}" />
        <Setter Property="i:XPasswordBox.PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Opacity="0.4"
                        Text="{i:Bind}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XPasswordBox.TextTrimming" Value="CharacterEllipsis"/>
        <Setter Property="i:XPasswordBox.ToggleButtonTemplate">
            <Setter.Value>
                <DataTemplate>
                    <i:ImageToggleButton
                        Focusable="False"
                        IsChecked="{Data:Ancestor PasswordBox, Path=(i:XPasswordBox.Mask), Convert=Data:Invert, Mode=TwoWay}"  
                        Margin="0,0,5,0"
                        Source="{i:Image Key=Toggle}"
                        VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XPasswordBox.ToggleButtonVisibility" Value="Visible"/>
        <Setter Property="i:XPasswordBox.ToggleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock
                        Text="{i:Bind}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme Text}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="PasswordChar" Value="●" />
        <Setter Property="SelectionBrush" Value="{i:Theme TextBoxSelection}" />
        <Setter Property="SelectionOpacity" Value="0.4" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type PasswordBox}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}">
                        <Grid i:XGrid.Columns="*,Auto,Auto">
                            <ContentPresenter 
                                Content="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.Placeholder)}" 
                                ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.PlaceholderTemplate)}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                IsHitTestVisible="False" 
                                Margin="{TemplateBinding Padding}" 
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.Password), ConverterParameter=1, Convert=Data:ConvertStringToVisibility}"/>
                            <ScrollViewer x:Name="PART_ContentHost"
                                Cursor="IBeam"
                                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Padding="{TemplateBinding Padding}"
                                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.Mask), Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                            <ContentPresenter
                                Cursor="Arrow"
                                Content="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.Password)}"
                                ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.ToggleTemplate)}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.Mask), Convert={x:Type Data:ConvertBooleanToVisibility}, ConverterParameter=1}"/>
                            <ContentPresenter Grid.Column="1"
                                ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.GenerateButtonTemplate)}"
                                Visibility="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.GenerateButtonVisibility)}"/>
                            <ContentPresenter Grid.Column="2"
                                ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.ToggleButtonTemplate)}"
                                Visibility="{i:Bind From=TemplatedParent, Path=(i:XPasswordBox.ToggleButtonVisibility)}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="ContextMenu" Value="{x:Null}"/>
                <Setter Property="SelectionBrush" Value="{i:Theme TextBoxDisabledSelection}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="True">
                <Setter Property="ContextMenu">
                    <Setter.Value>
                        <ContextMenu DataContext="{i:Bind From=Self, Path=PlacementTarget}">
                            <MenuItem 
                                Command="{i:Bind Path=(i:XPasswordBox.CutCommand)}"
                                CommandParameter="{i:Bind}"
                                Header="{i:Text Cut}"
                                Icon="{i:Image Key=Cut}"
                                InputGestureText="Ctrl + X"/>
                            <MenuItem 
                                Command="{i:Bind Path=(i:XPasswordBox.CopyCommand)}"
                                CommandParameter="{i:Bind}"
                                Header="{i:Text Copy}"
                                Icon="{i:Image Key=Copy}"
                                InputGestureText="Ctrl + C"/>
                            <MenuItem 
                                Command="{i:Bind Path=(i:XPasswordBox.PasteCommand)}"
                                CommandParameter="{i:Bind}"
                                Header="{i:Text Paste}"
                                Icon="{i:Image Key=Paste}"
                                InputGestureText="Ctrl + V"/>
                            <Separator/>
                            <MenuItem 
                                Command="{x:Static i:XPasswordBox.ClearCommand}"
                                CommandTarget="{i:Bind}"
                                Header="{i:Text Clear}"
                                Icon="{i:Image Key=XRound}"/>
                        </ContextMenu>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{i:Theme TextBoxFocusedBorder}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="False">
                <Setter Property="SelectionBrush" Value="{i:Theme TextBoxSelectionInactive}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsFocused" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="BorderBrush" Value="{i:Theme TextBoxMouseOverBorder}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
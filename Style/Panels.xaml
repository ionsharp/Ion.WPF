<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Analysis="clr-namespace:Ion.Analysis;assembly=Ion"
    xmlns:Behavior="clr-namespace:Ion.Behavior"
    xmlns:Colors="clr-namespace:Ion.Colors"
    xmlns:Color0="clr-namespace:Ion.Colors;assembly=Ion.Color"
    xmlns:Core="clr-namespace:Ion.Core"
    xmlns:Data="clr-namespace:Ion.Data"
    xmlns:Effects="clr-namespace:Ion.Effects;assembly=Ion.Effects"
    xmlns:Media="clr-namespace:Ion.Media"
    xmlns:Numeral="clr-namespace:Ion.Numeral;assembly=Ion"
    xmlns:Storage="clr-namespace:Ion.Storage"
    xmlns:Time="clr-namespace:Ion.Time;assembly=Ion"
    xmlns:Validation="clr-namespace:Ion.Validation">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Color}"/>
        <ResourceDictionary Source="{i:Style Key=Constants}"/>
        <ResourceDictionary Source="{i:Style Key=DataGrid}"/>
        <ResourceDictionary Source="{i:Style Key=TabControl}"/>
        <ResourceDictionary Source="{i:Style Key=TreeView}"/>
    </ResourceDictionary.MergedDictionaries>
    <!--#region Address-->

    <DataTemplate x:Key="{x:Static Core:AddressPanel.Template}" DataType="{x:Type Core:AddressPanel}">
        <ContentPresenter Content="{i:Bind ActiveDocument, AppSource=Model}" 
            i:Display.Condition="{Data:Is ActiveDocument, AppSource=Model, Type=Core:ItemViewDocument}"
            Margin="{i:Constant Key=Thick}">
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:AddressBox i:XStorage.Path="{i:Bind Panel.Path, Mode=TwoWay}"
                        History="{i:Bind Panel.History}"
                        RefreshCommand="{i:Bind Panel.RefreshCommand}"/>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
        </ContentPresenter>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Clipboard-->

    <DataTemplate x:Key="{x:Static Core:ClipboardPanel.Template}" DataType="{x:Type Core:ClipboardPanel}">
        <i:DataGridControl Model="{i:Bind}">
            <DataGridTextColumn Header="{i:Text Type}" Binding="{i:Bind Type.Name}"
                SortMemberPath="Type"
                Width="*"/>
            <DataGridTemplateColumn Header="{i:Text Value}"
                SortMemberPath="Value"
                Width="*">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{i:Bind Value}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Size}"
                SortMemberPath="Size"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock Text="{i:Bind Size, Convert=Data:ConvertFileSize}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
        </i:DataGridControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Color-->

    <DataTemplate x:Key="{x:Static Core:ColorAnalysisPanel.Template}" DataType="{x:Type Core:ColorAnalysisPanel}">
        <DataGrid
            AutoGenerateColumns="True"
            BorderThickness="0"
            CanUserAddRows="False"
            CanUserDeleteRows="True"
            CanUserReorderColumns="True"
            CanUserResizeColumns="True"
            CanUserResizeRows="False"
            CanUserSortColumns="True"
            i:XDataGrid.DisplayRowNumber="True"
            i:XDataGrid.DisplayRowNumberBullet="NumberParenthesis"
            i:XDataGrid.DisplayRowNumberOffset="1"
            ScrollViewer.VerticalScrollBarVisibility="Auto"
            VirtualizingPanel.IsVirtualizing="False"
            VirtualizingPanel.VirtualizationMode="Standard"
            ItemsSource="{i:Bind Results}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:ColorChromacityPanel.Template}" DataType="{x:Type Core:ColorChromacityPanel}">
        <!--<i:ObjectControl i:XObjectControl.Source="{i:Bind}"/>-->
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:ColorDifferencePanel.Template}" DataType="{x:Type Core:ColorDifferencePanel}">
        <!--<i:ObjectControl i:XObjectControl.Source="{i:Bind}"/>-->
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:ColorHarmonyPanel.Template}" DataType="{x:Type Core:ColorHarmonyPanel}">
        <i:DataViewControl Model="{i:Bind}">
            <i:DataViewControl.Resources>
                <Data:Reference x:Key="Panel" Data="{i:Bind}"/>
            </i:DataViewControl.Resources>
            <i:DataViewControl.ItemImageTemplate>
                <DataTemplate>
                    <Border BorderBrush="Black" BorderThickness="1" SnapsToDevicePixels="True">
                        <Button Background="{i:Bind Convert={x:Type Data:ConvertColorToSolidColorBrush}}" 
                            BorderBrush="White" BorderThickness="1"
                            Command="{i:Bind Data.SelectColorCommand, Source={StaticResource Panel}}"
                            CommandParameter="{i:Bind}"
                            i:XToolTip.Header="{i:Bind}"
                            i:XToolTip.HeaderTemplate="{StaticResource {x:Static i:ColorView.ToolTipHeaderTemplate}}"
                            i:XToolTip.Template="{StaticResource {x:Static i:ColorView.ToolTipTemplate}}"
                            Padding="0"
                            SnapsToDevicePixels="True"
                            ToolTip="{i:Bind}"/>
                    </Border>
                </DataTemplate>
            </i:DataViewControl.ItemImageTemplate>
        </i:DataViewControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Copy-->

    <DataTemplate x:Key="{x:Static Core:CopyPanel.Template}" DataType="{x:Type Core:CopyPanel}">
        <i:DataGridControl Model="{i:Bind}">
            <i:DataGridControl.Resources>
                <Data:Reference x:Key="Panel" Data="{i:Bind}"/>

                <DataTemplate x:Key="Template.Column.Enable">
                    <i:SwitchButton IsChecked="{i:Bind Enable, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                </DataTemplate>
                <DataTemplate x:Key="Template.Column.LastActive">
                    <TextBlock 
                        Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                        Text="{i:Bind LastActive, Convert=Data:ConvertToStringTimeRelative}"
                        ToolTip="{i:Bind LastActive}"/>
                </DataTemplate>
                <DataTemplate x:Key="Template.Column.Progress">
                    <ProgressBar x:Name="ProgressBar"
                        Height="18"
                        Maximum="1"
                        Minimum="0"
                        ToolTip="{i:Bind Progress, Convert=Data:ConvertDoublePercent, StringFormat='{}{0:n2}%'}"
                        Value="{i:Bind Progress}">
                        <i:XProgressBar.ContentTemplate>
                            <DataTemplate>
                                <TextBlock FontSize="11" Foreground="{i:Theme Key=Text}" Text="{i:Bind Convert=Data:ConvertDoublePercent, StringFormat='{}{0:n2}%'}"/>
                            </DataTemplate>
                        </i:XProgressBar.ContentTemplate>
                    </ProgressBar>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{i:Bind Status}" Value="Inactive">
                            <Setter TargetName="ProgressBar" Property="i:XProgressBar.ContentTemplate" Value="{i:Template Key=Default}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind Status}" Value="Monitoring">
                            <Setter TargetName="ProgressBar" Property="i:XProgressBar.ContentTemplate" Value="{i:Template Key=Default}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
                <DataTemplate x:Key="Template.Column.RemoveAll">
                    <i:ImageButton
                        Command="{i:Bind Data.RemoveAllCommand, Source={StaticResource Panel}}"
                        Source="{i:Image Key=MinusRound}"
                        ToolTip="{i:Text RemoveAll}"/>
                </DataTemplate>
                <DataTemplate x:Key="Template.Column.Remove">
                    <i:ImageButton
                        Command="{i:Bind Data.RemoveCommand, Source={StaticResource Panel}}"
                        CommandParameter="{i:Bind}"
                        Source="{i:Image Key=Minus}"
                        ToolTip="{i:Text Remove}"/>
                </DataTemplate>
                <DataTemplate x:Key="Template.Column.Status">
                    <Grid HorizontalAlignment="Center" i:XGrid.Columns="Auto,Auto">
                        <Ellipse Grid.Column="0" x:Name="Ellipse" Height="8" Width="8" VerticalAlignment="Center"/>
                        <i:ProgressCircle 
                            Grid.Column="2"
                            x:Name="ProgressCircle"
                            EllipseDiameterScale="1"
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Height="16"
                            Margin="5,0,0,0"
                            Visibility="Collapsed"
                            Width="16"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{i:Compare32 Queue.Count, Result=Boolean, Type=Greater}" Value="True">
                            <Setter TargetName="ProgressCircle" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Ellipse" Property="Fill" Value="#FFE0B24E"/>
                            <Setter TargetName="Ellipse" Property="ToolTip" Value="Active"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{i:Compare32 Queue.Count, Result=Boolean, Type=Greater}" Value="False"/>
                                <Condition Binding="{i:Bind Status}" Value="Inactive"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Ellipse" Property="Fill" Value="#FFE04E4E"/>
                            <Setter TargetName="Ellipse" Property="ToolTip" Value="Inactive"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{i:Compare32 Queue.Count, Result=Boolean, Type=Greater}" Value="False"/>
                                <Condition Binding="{i:Bind Status}" Value="Active"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Ellipse" Property="Fill" Value="#FFE0B24E"/>
                            <Setter TargetName="Ellipse" Property="ToolTip" Value="Active"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{i:Compare32 Queue.Count, Result=Boolean, Type=Greater}" Value="False"/>
                                <Condition Binding="{i:Bind Status}" Value="Monitoring"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="Ellipse" Property="Fill" Value="#FF5DBF6A"/>
                            <Setter TargetName="Ellipse" Property="ToolTip" Value="Monitoring"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </i:DataGridControl.Resources>
            <DataGridTemplateColumn Header="{i:Text Status}" Width="Auto"
                CellTemplate="{StaticResource Template.Column.Status}"
                SortMemberPath="Status"/>
            <DataGridTemplateColumn Header="{i:Text Action}" Width="64"
                SortMemberPath="Action">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock ToolTip="{i:Bind From=Self, Path=Text}">
                            <TextBlock.Text>
                                <Data:MultiBind ConverterName="ToString">
                                    <Binding Path="Action"/>
                                    <Binding Path="Action.Target"/>
                                    <Binding Path="Action.Type"/>
                                </Data:MultiBind>
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Direction}" Width="Auto"
                SortMemberPath="Direction">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <ComboBox 
                            ItemsSource="{i:Enumerate {x:Type Storage:CopyDirection}}"
                            SelectedItem="{i:Bind Direction, Mode=TwoWay}" 
                            ToolTip="{i:Bind DirectionDescription}">
                            <i:XComboBox.SelectedItemTemplate>
                                <DataTemplate>
                                    <i:ImageElement Source="{i:Bind Convert=Data:ConvertAttributeImage}"/>
                                </DataTemplate>
                            </i:XComboBox.SelectedItemTemplate>
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <i:ImageElement Source="{i:Bind Convert=Data:ConvertAttributeImage}"
                                            Margin="0,0,5,0"/>
                                        <TextBlock Text="{i:Bind}"/>
                                    </StackPanel>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Source}" Width="*"
                SortMemberPath="Source">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <i:PathBox x:Name="PathBox"
                            BorderThickness="0"
                            BrowseButtonVisibility="True"
                            BrowseMode="OpenFolder"
                            BrowseTitle="Source"
                            CanBrowse="True"
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            i:XTextBox.CanLabel="True"
                            i:XTextBox.IsEditable="False"
                            i:XTextBox.Label="{i:Bind Source, Convert=Data:ConvertFileName, ConverterParameter=1}"
                            i:XTextBoxBase.Placeholder="{i:Text Source}"
                            IconVisibility="Visible"
                            Padding="5,0">
                            <i:PathBox.Text>
                                <Binding Path="Source"
                                    Mode="TwoWay"
                                    UpdateSourceTrigger="LostFocus"
                                    ValidatesOnNotifyDataErrors="True"
                                    ValidatesOnDataErrors="True"
                                    NotifyOnValidationError="True">
                                    <Binding.ValidationRules>
                                        <Validation:FolderExistsRule ValidatesOnTargetUpdated="True" />
                                    </Binding.ValidationRules>
                                </Binding>
                            </i:PathBox.Text>
                        </i:PathBox>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{i:Bind Source, Convert=Data:ConvertStringToBoolean}" Value="True">
                                <Setter TargetName="PathBox" Property="ToolTip" Value="{i:Bind Source}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Target}" Width="*"
                SortMemberPath="Target">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <i:PathBox x:Name="PathBox"
                            BorderThickness="0"
                            BrowseButtonVisibility="True"
                            BrowseMode="OpenFolder"
                            BrowseTitle="Target"
                            CanBrowse="True"
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            i:XTextBox.CanLabel="True"
                            i:XTextBox.IsEditable="False"
                            i:XTextBox.Label="{i:Bind Target, Convert=Data:ConvertFileName, ConverterParameter=1}"
                            i:XTextBoxBase.Placeholder="{i:Text Target}"
                            IconVisibility="Visible"
                            Padding="5,0">
                            <i:PathBox.Text>
                                <Binding Path="Target"
                                    Mode="TwoWay"
                                    UpdateSourceTrigger="LostFocus"
                                    ValidatesOnNotifyDataErrors="True"
                                    ValidatesOnDataErrors="True"
                                    NotifyOnValidationError="True">
                                    <Binding.ValidationRules>
                                        <Validation:FolderExistsRule ValidatesOnTargetUpdated="True" />
                                    </Binding.ValidationRules>
                                </Binding>
                            </i:PathBox.Text>
                        </i:PathBox>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{i:Bind Target, Convert=Data:ConvertStringToBoolean}" Value="True">
                                <Setter TargetName="PathBox" Property="ToolTip" Value="{i:Bind Target}"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Progress}" Width="96"
                CellTemplate="{StaticResource Template.Column.Progress}"
                SortMemberPath="Progress"/>
            <DataGridTemplateColumn Header="{i:Text LastActive}" Width="96"
                CellTemplate="{StaticResource Template.Column.LastActive}"
                SortMemberPath="LastActive"/>
            <DataGridTemplateColumn Header="{i:Text Size}" Width="96"
                SortMemberPath="Size">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <Grid>
                            <i:ProgressCircle x:Name="ProgressCircle"
                                Height="20" Width="20"
                                HorizontalAlignment="Center"/>
                            <TextBlock x:Name="TextBlock"
                                Text="{i:Bind Size, Convert=Data:ConvertFileSize}"
                                ToolTip="{i:Bind From=Self, Path=Text}"/>
                        </Grid>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{i:Bind AnalyzeTask.IsStarted}" Value="True">
                                <Setter TargetName="ProgressCircle" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="TextBlock" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{i:Bind AnalyzeTask.IsStarted}" Value="False">
                                <Setter TargetName="ProgressCircle" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="TextBlock" Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Enable}" Width="Auto"
                CellTemplate="{StaticResource Template.Column.Enable}"
                SortMemberPath="Enable"/>
        </i:DataGridControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Find-->

    <DataTemplate x:Key="{x:Static Core:FindPanel.Template}" DataType="{x:Type Core:FindPanel}">
        <ScrollViewer
            HorizontalScrollBarVisibility="Hidden"
            VerticalScrollBarVisibility="Auto">
            <i:FindControl
                FindText="{i:Bind FindText, Way=2}"
                i:XElement.Reference="{i:Bind}"
                i:XElement.ReferenceKey="{x:Static Core:FindPanel.ControlKey}"
                MatchCase="{i:Bind MatchCase, Way=2}"
                MatchWord="{i:Bind MatchWord, Way=2}"
                ReplaceText="{i:Bind ReplaceText, Way=2}"
                ResultsCommand="{i:Bind ResultsCommand}"
                Source="{i:Bind Source, Way=2}"/>
        </ScrollViewer>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:FindResultPanel.Template}" DataType="{x:Type Core:FindResultPanel}">
        <i:DataGridControl Model="{i:Bind}">
            <i:DataGridControl.Resources>
                <Data:Reference x:Key="Panel" Data="{i:Bind}"/>
            </i:DataGridControl.Resources>
            <DataGridTemplateColumn Header="{i:Text Text}"
                SortMemberPath="Text"
                Width="*">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock
                            i:XTextBlock.SplitText="{i:Bind Text}"
                            i:XTextBlock.SplitTextKey="{i:Bind Data.Results.FindText, Source={StaticResource Panel}}"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="{i:Bind Data.TextWrap, Convert=Data:ConvertBooleanToTextWrapping, Source={StaticResource Panel}}">
                            <i:XTextBlock.SplitTextStyle>
                                <Style TargetType="Run">
                                    <Setter Property="Background" Value="DarkOrange"/>
                                    <Setter Property="Foreground" Value="#333"/>
                                </Style>
                            </i:XTextBlock.SplitTextStyle>
                        </TextBlock>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Document}"
                SortMemberPath="Target.Path"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock
                            Text="{i:Bind Target.Path, Convert=Data:ConvertFileName, ConverterParameter=1}"
                            TextTrimming="CharacterEllipsis"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Line}"
                SortMemberPath="Line"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Text="{i:Bind Line}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn Header="{i:Text Column}"
                SortMemberPath="Column"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Text="{i:Bind Column}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
        </i:DataGridControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Group > Color-->

    <DataTemplate x:Key="{x:Static Core:ColorPanel.Template}" DataType="{x:Type Core:ColorPanel}">
        <DataTemplate.Resources>
            <Data:Reference x:Key="Panel" Data="{i:Bind}"/>
        </DataTemplate.Resources>
        <i:DataViewControl Model="{i:Bind}"
            ItemToolTipHeaderIconTemplate="{i:Template Key=Default}">
            <i:DataViewControl.ItemImageTemplate>
                <DataTemplate DataType="Numeral:ByteVector4">
                    <Button Background="{i:Bind Value, Convert={x:Type Data:ConvertByteVector4ToSolidColorBrush}}"
                        BorderThickness="0"
                        Command="{i:Bind Data.SelectColorCommand, Source={StaticResource Panel}}"
                        CommandParameter="{i:Bind}"/>
                </DataTemplate>
            </i:DataViewControl.ItemImageTemplate>
            <i:DataViewControl.ItemToolTipTemplate>
                <DataTemplate>
                    <ContentPresenter Content="{i:Bind Value, Convert={x:Type Data:ConvertByteVector4ToColor}}" ContentTemplate="{StaticResource {x:Static i:ColorView.ToolTipTemplate}}"/>
                </DataTemplate>
            </i:DataViewControl.ItemToolTipTemplate>
            <i:DataViewControl.ItemToolTipHeaderTemplate>
                <DataTemplate>
                    <ContentPresenter Content="{i:Bind Value, Convert=Data:ConvertByteVector4ToColor}" ContentTemplate="{StaticResource {x:Static i:ColorView.ToolTipHeaderTemplate}}"/>
                </DataTemplate>
            </i:DataViewControl.ItemToolTipHeaderTemplate>
        </i:DataViewControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Group > Gradient-->

    <DataTemplate x:Key="{x:Static Core:GradientPanel.Template}" DataType="{x:Type Core:GradientPanel}">
        <i:DataViewControl Model="{i:Bind}">
            <i:DataViewControl.ItemImageTemplate>
                <DataTemplate>
                    <Viewbox>
                        <i:GradientBox Value="{i:Bind Value, Mode=TwoWay}"
                        Height="Auto" Width="Auto"
                        HorizontalAlignment="Stretch"
                        Margin="0,0,0,5">
                        <i:GradientBox.ValueTemplate>
                            <DataTemplate>
                                <Rectangle Fill="{Colors:GradientBinding}"/>
                            </DataTemplate>
                        </i:GradientBox.ValueTemplate>
                        </i:GradientBox>
                    </Viewbox>
                </DataTemplate>
            </i:DataViewControl.ItemImageTemplate>
        </i:DataViewControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Group > Illuminant-->

    <DataTemplate x:Key="{x:Static i:IlluminantPanel.Template}" DataType="{x:Type i:IlluminantPanel}">
        <i:DataViewControl Model="{i:Bind}">
            <i:DataViewControl.ItemImageTemplate>
                <DataTemplate>
                    <Viewbox>
                        <Grid>
                            <i:ProgressRing 
                                Foreground="Transparent"
                                Maximum="12000" 
                                Minimum="2000" 
                                Radius="36"
                                Value="{i:Bind Value, Mode=OneWay, Convert={x:Type Data:ConvertChromacityToKelvin}}">
                                <i:XProgressBar.ContentTemplate>
                                    <DataTemplate>
                                        <TextBlock Foreground="{i:Theme Text}"><Run Text="{i:Bind Convert={x:Type Data:ConvertDoubleToString}, ConverterParameter=N0, Mode=OneWay}"/> K</TextBlock>
                                    </DataTemplate>
                                </i:XProgressBar.ContentTemplate>
                            </i:ProgressRing>
                            <Border Background="White" Height="72" Width="72">
                                <Border.Effect>
                                    <Effects:GradientOverlayEffect Angle="270" Minimum="2000" Maximum="12000" Value="{i:Bind Value, Convert={x:Type Data:ConvertChromacityToKelvin}}" Thickness="0.17" Type="Angle">
                                        <Effects:GradientOverlayEffect.Gradient>
                                            <i:Bind Convert="Data:ConvertLinearGradientBrushToGradient">
                                                <i:Bind.Source>
                                                    <LinearGradientBrush>
                                                        <GradientStop Color="#ff1c00" Offset="0"/>
                                                        <GradientStop Color="#FFF" Offset="0.5"/>
                                                        <GradientStop Color="#bbd0ff" Offset="1"/>
                                                    </LinearGradientBrush>
                                                </i:Bind.Source>
                                            </i:Bind>
                                        </Effects:GradientOverlayEffect.Gradient>
                                    </Effects:GradientOverlayEffect>
                                </Border.Effect>
                            </Border>
                        </Grid>
                    </Viewbox>
                </DataTemplate>
            </i:DataViewControl.ItemImageTemplate>
        </i:DataViewControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Group > Matrix-->

    <DataTemplate x:Key="{x:Static Core:MatrixPanel.Template}" DataType="{x:Type Core:MatrixPanel}">
        <i:DataViewControl Model="{i:Bind}">
            <i:DataViewControl.ItemImageTemplate>
                <DataTemplate>
                    <Viewbox>
                        <i:MatrixControl Matrix="{i:Bind Value}"
                            IsEditable="False"
                            LabelVisibility="Collapsed"
                            Zoom="256"/>
                    </Viewbox>
                </DataTemplate>
            </i:DataViewControl.ItemImageTemplate>
        </i:DataViewControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Group > Profile-->

    <DataTemplate x:Key="{x:Static i:ProfilePanel.Template}" DataType="{x:Type i:ProfilePanel}">
        <i:DataViewControl Model="{i:Bind}">
            <i:DataViewControl.ItemImageTemplate>
                <DataTemplate>
                    <Viewbox>
                        <Grid>
                            <i:ProgressRing i:XProgressBar.ContentTemplate="{i:Template Key=Default}"
                                BackgroundStroke="Transparent"
                                Foreground="#900"
                                Maximum="1" Minimum="0"
                                Radius="28" StrokeThickness="4"
                                Value="{i:Bind Value.Primary.R.X, Mode=OneWay}"/>
                            <i:ProgressRing i:XProgressBar.ContentTemplate="{i:Template Key=Default}"
                                BackgroundStroke="Transparent"
                                Foreground="#090"
                                Maximum="1" Minimum="0" 
                                Radius="32" StrokeThickness="4"
                                Value="{i:Bind Value.Primary.G.X, Mode=OneWay}"/>
                            <i:ProgressRing i:XProgressBar.ContentTemplate="{i:Template Key=Default}"
                                BackgroundStroke="Transparent"
                                Foreground="#009"
                                Maximum="1" Minimum="0" 
                                Radius="36" StrokeThickness="4"
                                Value="{i:Bind Value.Primary.B.X, Mode=OneWay}"/>

                            <i:ProgressRing i:XProgressBar.ContentTemplate="{i:Template Key=Default}"
                                BackgroundStroke="Transparent"
                                Foreground="#AADD0000"
                                Maximum="1" Minimum="0" 
                                Radius="28" StrokeThickness="4"
                                Value="{i:Bind Value.Primary.R.Y, Mode=OneWay}"/>
                            <i:ProgressRing i:XProgressBar.ContentTemplate="{i:Template Key=Default}"
                                BackgroundStroke="Transparent"
                                Foreground="#AA33DD00"
                                Maximum="1" Minimum="0" 
                                Radius="32" StrokeThickness="4"
                                Value="{i:Bind Value.Primary.G.Y, Mode=OneWay}"/>
                            <i:ProgressRing i:XProgressBar.ContentTemplate="{i:Template Key=Default}"
                                BackgroundStroke="Transparent"
                                Foreground="#AA0055DD"
                                Maximum="1" Minimum="0" 
                                Radius="36" StrokeThickness="4"
                                Value="{i:Bind Value.Primary.B.Y, Mode=OneWay}"/>
                        </Grid>
                    </Viewbox>
                </DataTemplate>
            </i:DataViewControl.ItemImageTemplate>
        </i:DataViewControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ItemView-->

    <DataTemplate x:Key="{x:Static Core:ItemViewPanel.Template}">
        <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*">
            <i:BottomBorder Padding="5,1"
                Visibility="{i:Bind IsAddressVisible, Convert=Data:ConvertBooleanToVisibility}">
                <i:AddressBox i:XStorage.Path="{i:Bind Path, Mode=TwoWay}"
                    History="{i:Bind History}"
                    RefreshCommand="{i:Bind RefreshCommand}"/>
            </i:BottomBorder>
            <i:ItemViewControl Model="{i:Bind}"/>
        </Grid>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Log-->

    <SolidColorBrush x:Key="{x:Static Core:LogPanel.ColorError}" Color="#C30"/>

    <SolidColorBrush x:Key="{x:Static Core:LogPanel.ColorMessage}" Color="#07c"/>

    <SolidColorBrush x:Key="{x:Static Core:LogPanel.ColorSuccess}" Color="#3A3"/>

    <SolidColorBrush x:Key="{x:Static Core:LogPanel.ColorWarning}" Color="Orange"/>

    <Style x:Key="{x:Static Core:LogPanel.TextStyleKey}" TargetType="Run">
        <Setter Property="Background" Value="{i:Theme Accent}"/>
        <Setter Property="Foreground" Value="{i:Theme AccentForeground}"/>
    </Style>

    <DataTemplate x:Key="{x:Static Core:LogPanel.AssemblyTemplate}">
        <TextBlock Text="{i:Bind Assembly}"
            TextTrimming="CharacterEllipsis"
            ToolTip="{i:Bind Assembly}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:LogPanel.SenderTemplate}">
        <TextBlock Text="{i:Bind Sender, Convert=Data:ConvertFileName, ConverterParameter=1}"
            TextTrimming="CharacterEllipsis"
            ToolTip="{i:Bind Sender}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:LogPanel.ImageTemplate}">
        <i:ImageElement x:Name="Image" Source="{i:Bind Result.Type, Convert=Data:ConvertAttributeImageSource}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Result.Type}" Value="Error">
                <Setter TargetName="Image" Property="Foreground" Value="{i:Theme Key=Red}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Result.Type}" Value="Message">
                <Setter TargetName="Image" Property="Foreground" Value="{i:Theme Key=Blue}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Result.Type}" Value="Success">
                <Setter TargetName="Image" Property="Foreground" Value="{i:Theme Key=Green}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Result.Type}" Value="Warning">
                <Setter TargetName="Image" Property="Foreground" Value="{i:Theme Key=Orange}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:LogPanel.LevelTemplate}">
        <i:ImageElement x:Name="Image" Source="{i:Image Key=Dot}" ToolTip="{i:Bind Level}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Level}" Value="Low">
                <Setter TargetName="Image" Property="Foreground" Value="{i:Theme Green}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Level}" Value="Normal">
                <Setter TargetName="Image" Property="Foreground" Value="{i:Theme Orange}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Level}" Value="High">
                <Setter TargetName="Image" Property="Foreground" Value="{i:Theme Red}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:LogPanel.ResultTemplate}">
        <ContentPresenter Content="{i:Bind}" i:Display.Condition="{i:Equal Item2.Result.Type, Value={x:Static Analysis:ResultType.Error}}">
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:ErrorControl Error="{i:Bind Item2.Result, Convert=Data:ConvertResultToError}"
                        IsChildExpanded="True"
                        IsExpanded="False"
                        Wrap="{i:Bind Item1.TextWrap, Convert=Data:ConvertBooleanToTextWrapping}">
                        <i:ErrorControl.ContentTemplate>
                            <DataTemplate>
                                <TextBlock
                                    i:XTextBlock.SplitText="{i:Bind Item2.Result.Text}"
                                    i:XTextBlock.SplitTextKey="{i:Bind Item1.SearchText}"
                                    i:XTextBlock.SplitTextCondition="StartsWith"
                                    i:XTextBlock.SplitTextStyle="{StaticResource {x:Static Core:LogPanel.TextStyleKey}}"
                                    TextTrimming="CharacterEllipsis"
                                    TextWrapping="{i:Bind Item1.TextWrap, Convert=Data:ConvertBooleanToTextWrapping}"
                                    ToolTip="{i:Bind Text, From=Self}"/>
                            </DataTemplate>
                        </i:ErrorControl.ContentTemplate>
                    </i:ErrorControl>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <TextBlock
                        i:XTextBlock.SplitText="{i:Bind Item2.Result.Text}"
                        i:XTextBlock.SplitTextKey="{i:Bind Item1.SearchText}"
                        i:XTextBlock.SplitTextCondition="StartsWith"
                        i:XTextBlock.SplitTextStyle="{StaticResource {x:Static Core:LogPanel.TextStyleKey}}"
                        TextTrimming="CharacterEllipsis"
                        TextWrapping="{i:Bind Item1.TextWrap, Convert=Data:ConvertBooleanToTextWrapping}"
                        ToolTip="{i:Bind Text, From=Self}"/>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </ContentPresenter>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:LogPanel.ToolTipKey}">
        <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,Auto" i:XPanel.Spacing="0,0,0,5">
            <ContentPresenter Content="{i:Bind}" i:Display.Condition="{i:Equal Result.Type, Value={x:Static Analysis:ResultType.Error}}">
                <i:Display.ConditionalTemplate>
                    <DataTemplate>
                        <i:ErrorControl Error="{i:Bind Result, Convert=Data:ConvertResultToError}"
                            IsChildExpanded="True"
                            IsExpanded="True"
                            Wrap="Wrap">
                            <i:ErrorControl.ContentTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{i:Bind Result.Text}"
                                        TextTrimming="CharacterEllipsis"
                                        TextWrapping="Wrap"/>
                                </DataTemplate>
                            </i:ErrorControl.ContentTemplate>
                        </i:ErrorControl>
                    </DataTemplate>
                </i:Display.ConditionalTemplate>
                <i:Display.DefaultTemplate>
                    <DataTemplate>
                        <TextBlock Text="{i:Bind Result.Text}"
                            TextTrimming="CharacterEllipsis"
                            TextWrapping="Wrap"/>
                    </DataTemplate>
                </i:Display.DefaultTemplate>
            </ContentPresenter>

            <TextBlock Opacity="0.5" Text="{i:Bind Added, StringFormat=h:mm tt}" VerticalAlignment="Top"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:LogPanel.Template}" DataType="{x:Type Core:LogPanel}">
        <i:Element>
            <i:Element.Resources>
                <Data:Reference x:Key="Panel" Data="{i:Bind}"/>
            </i:Element.Resources>
            <i:DataGridControl Model="{i:Bind}" 
                ItemToolTipTemplate="{DynamicResource {x:Static Core:LogPanel.ToolTipKey}}"
                ItemToolTipHeaderTemplate="{DynamicResource {x:Static Core:LogPanel.SenderTemplate}}"
                ItemToolTipHeaderIconTemplate="{DynamicResource {x:Static Core:LogPanel.ImageTemplate}}">
                <i:DataGridControl.LineTemplate>
                    <DataTemplate DataType="{x:Type Analysis:Entry}">
                        <Grid i:XGrid.Rows="Auto,Auto,Auto" i:XGrid.AutoRows="True">
                            <Grid i:XGrid.Columns="Auto,*" i:XGrid.AutoColumns="True">
                                <ContentPresenter Content="{i:Bind}" 
                                    ContentTemplate="{DynamicResource {x:Static Core:LogPanel.ImageTemplate}}"
                                    Margin="0,0,5,0"/>
                                <ContentPresenter Content="{i:Bind}" 
                                    ContentTemplate="{DynamicResource {x:Static Core:LogPanel.SenderTemplate}}"/>
                            </Grid>
                            <ContentPresenter ContentTemplate="{DynamicResource {x:Static Core:LogPanel.ResultTemplate}}">
                                <ContentPresenter.Content>
                                    <Data:MultiBind ConverterName="Tuple">
                                        <Binding Path="Data" Source="{StaticResource Panel}"/>
                                        <Binding Path="."/>
                                    </Data:MultiBind>
                                </ContentPresenter.Content>
                            </ContentPresenter>
                            <TextBlock x:Name="Time"
                                Opacity="0.5"
                                Text="{i:Bind Added, Convert=Data:ConvertDateTimeToString, Way=1}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{i:Bind From=Self, Path=Text}"
                                VerticalAlignment="Top"/>
                        </Grid>
                    </DataTemplate>
                </i:DataGridControl.LineTemplate>
                <DataGridTemplateColumn Header="{i:Text Type}"
                    SortMemberPath="Type"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ContentPresenter Content="{i:Bind}" 
                                ContentTemplate="{StaticResource {x:Static Core:LogPanel.ImageTemplate}}"
                                VerticalAlignment="Top"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{i:Text Message}"
                    SortMemberPath="Text"
                    Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ContentPresenter ContentTemplate="{DynamicResource {x:Static Core:LogPanel.ResultTemplate}}">
                                <ContentPresenter.Content>
                                    <Data:MultiBind ConverterName="Tuple">
                                        <Binding Path="Data" Source="{StaticResource Panel}"/>
                                        <Binding Path="."/>
                                    </Data:MultiBind>
                                </ContentPresenter.Content>
                            </ContentPresenter>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{i:Text Assembly}"
                    SortMemberPath="Assembly"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ContentPresenter Content="{i:Bind}" 
                                ContentTemplate="{StaticResource {x:Static Core:LogPanel.AssemblyTemplate}}"
                                VerticalAlignment="Top"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{i:Text File}"
                    SortMemberPath="FileName"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ContentPresenter Content="{i:Bind}" 
                                ContentTemplate="{StaticResource {x:Static Core:LogPanel.SenderTemplate}}"
                                VerticalAlignment="Top"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{i:Text Line}"
                    SortMemberPath="Line"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{i:Bind Line}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{i:Bind From=Self, Path=Text}"
                                VerticalAlignment="Top"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{i:Text Member}"
                    SortMemberPath="Member"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock 
                                Text="{i:Bind Member}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{i:Bind From=Self, Path=Text}"
                                VerticalAlignment="Top"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{i:Text Time}"
                    SortMemberPath="Added"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock x:Name="TextBlock"
                                Text="{i:Bind Added, Convert=Data:ConvertDateTimeToString, Way=1}"
                                TextTrimming="CharacterEllipsis"
                                ToolTip="{i:Bind From=Self, Path=Text}"
                                VerticalAlignment="Top"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="{i:Text Level}"
                    SortMemberPath="Level"
                    Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ContentPresenter Content="{i:Bind}" 
                                ContentTemplate="{StaticResource {x:Static Core:LogPanel.LevelTemplate}}"
                                VerticalAlignment="Top"/>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </i:DataGridControl>
        </i:Element>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Mouse-->

    <DataTemplate x:Key="{x:Static Core:MousePanel.Template}" DataType="{x:Type Core:MousePanel}">
        <!--<i:ObjectControl i:XObjectControl.Source="{i:Bind}"/>-->
    </DataTemplate>

    <!--#endregion-->

    <!--#region Notification-->

    <DataTemplate x:Key="{x:Static Core:NotificationPanel.Template}" DataType="{x:Type Core:NotificationPanel}">
        <ItemsControl
            ItemsSource="{i:Bind Data}"
            i:XItemsControl.EmptyTemplateVisibility="Visible">
            <ItemsControl.Resources>
                <Data:Reference x:Key="NotificationPanel" Data="{i:Bind}"/>
            </ItemsControl.Resources>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <Setter Property="i:XElement.FadeIn" Value="True"/>
                    <Setter Property="i:XElement.FadeOut" Value="True"/>
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="Analysis:Notification">
                    <i:BottomBorder>
                        <i:SwipeButton
                            BorderThickness="0"
                            Content="{i:Bind}"
                            Left="{i:Image Key=Unread}"
                            LeftSwipeCommand="{i:Bind MarkCommand}"
                            LeftSwipeCommandParameter="{i:Bind}"
                            Right="{i:Image Key=Trash}"
                            RightSwipeCommand="{i:Bind Data.RemoveCommand, Source={StaticResource NotificationPanel}}"
                            RightSwipeCommandParameter="{i:Bind}"
                            SwipeDirection="Horizontal"
                            SwipeMode="Default">
                            <i:SwipeButton.ContentTemplate>
                                <DataTemplate DataType="Analysis:Notification">
                                    <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,Auto,*">
                                        <i:FillElement x:Name="FillElement"
                                            Width="5"/>
                                        <i:ImageElement x:Name="ImageElement"
                                            Margin="10,0,0,0"
                                            VerticalAlignment="Center"/>
                                        <StackPanel
                                            i:XPanel.Spacing="0,0,0,5"
                                            i:XPanel.SpacingExcept="Last"
                                            Margin="10">
                                            <TextBlock 
                                                FontWeight="Bold" 
                                                Text="{i:Bind Title}"
                                                TextTrimming="CharacterEllipsis"
                                                TextWrapping="{i:Bind Data.TextWrap, Convert=Data:ConvertBooleanToTextWrapping, Source={StaticResource NotificationPanel}}"/>
                                            <TextBlock 
                                                Opacity="0.5" 
                                                Text="{i:Bind Result.Text}"
                                                TextWrapping="{i:Bind Data.TextWrap, Convert=Data:ConvertBooleanToTextWrapping, Source={StaticResource NotificationPanel}}"/>
                                            <Label HorizontalAlignment="Left"
                                                Style="{DynamicResource {x:Static i:XLabel.Accent}}">
                                                <TextBlock FontStyle="Italic" Opacity="0.8" Text="{i:Bind Created, Convert=Data:ConvertToStringTimeRelative}"/>
                                            </Label>
                                        </StackPanel>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{i:Bind IsRead}" Value="True">
                                            <Setter TargetName="FillElement" Property="Fill" Value="#11000000"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{i:Bind IsRead}" Value="False"/>
                                                <Condition Binding="{i:Bind Result.Type}" Value="Error"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{i:Theme Red}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{i:Bind IsRead}" Value="False"/>
                                                <Condition Binding="{i:Bind Result.Type}" Value="Message"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{i:Theme Blue}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{i:Bind IsRead}" Value="False"/>
                                                <Condition Binding="{i:Bind Result.Type}" Value="Success"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{i:Theme Green}"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{i:Bind IsRead}" Value="False"/>
                                                <Condition Binding="{i:Bind Result.Type}" Value="Warning"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="FillElement" Property="Fill" Value="{i:Theme Orange}"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{i:Bind Result.Type}" Value="Error">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{i:Theme Red}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{i:Image Key=XRound}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{i:Bind Result.Type}" Value="Message">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{i:Theme Blue}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{i:Image Key=Message}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{i:Bind Result.Type}" Value="Success">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{i:Theme Green}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{i:Image Key=CheckmarkRound}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{i:Bind Result.Type}" Value="Warning">
                                            <Setter TargetName="ImageElement" Property="Foreground" Value="{i:Theme Orange}"/>
                                            <Setter TargetName="ImageElement" Property="Source" Value="{i:Image Key=Warning}"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </i:SwipeButton.ContentTemplate>
                            <i:SwipeButton.LeftTemplate>
                                <DataTemplate>
                                    <Border Background="#07c">
                                        <i:ImageElement
                                            Foreground="White"
                                            HorizontalAlignment="Left" VerticalAlignment="Center"
                                            Margin="20"
                                            Source="{i:Bind}"/>
                                    </Border>
                                </DataTemplate>
                            </i:SwipeButton.LeftTemplate>
                            <i:SwipeButton.RightTemplate>
                                <DataTemplate>
                                    <Border Background="#900">
                                        <i:ImageElement
                                            Foreground="White"
                                            HorizontalAlignment="Right" VerticalAlignment="Center"
                                            Margin="20"
                                            Source="{i:Bind}"/>
                                    </Border>
                                </DataTemplate>
                            </i:SwipeButton.RightTemplate>
                        </i:SwipeButton>
                    </i:BottomBorder>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Option-->

    <DataTemplate x:Key="{x:Static Core:OptionPanel.Template}" DataType="{x:Type Core:OptionPanel}">
        <ContentPresenter Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static Core:ObjectPanel.Template}}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Object-->

    <DataTemplate x:Key="{x:Static Core:ObjectPanel.Template}">
        <!--
        <i:ObjectControl i:XObjectControl.Source="{i:Bind Source}"
            DescriptionVisibility="{i:Bind IsOptionDescriptionVisible, Convert=Data:ConvertBooleanToVisibility, Way=2}">
        </i:ObjectControl>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region Property-->

    <DataTemplate x:Key="{x:Static Core:PropertyPanel.TabTemplate}">
        <i:TabControlCache ItemsSource="{i:Bind Sources}"
            BorderThickness="0,1,0,0"
            i:XTabControl.HeaderPadding="1"
            i:XTabControl.OverflowCommand="{i:Bind SelectTabCommand}"
            i:XTabControl.OverflowIconTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"
            i:XTabControl.OverflowToolTipHeaderIconTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"
            Padding="0,1,0,0"
            SelectedIndex="{i:Bind SelectedTabIndex, Mode=TwoWay}"
            SelectedItem="{i:Bind SelectedTab, Mode=TwoWay}">
            <i:TabControlCache.Resources>
                <Data:Reference x:Key="Panel" Data="{i:Bind}"/>
            </i:TabControlCache.Resources>
            <i:XTabControl.OverflowHeaderTemplate>
                <DataTemplate>
                    <ContentPresenter Content="{i:Bind Convert=Data:ConvertObjectToType, ConverterParameter=1}">
                        <ContentPresenter.ContentTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Data:MultiBindName}"/>
                            </DataTemplate>
                        </ContentPresenter.ContentTemplate>
                    </ContentPresenter>
                </DataTemplate>
            </i:XTabControl.OverflowHeaderTemplate>
            <i:XTabControl.OverflowToolTipHeaderTemplate>
                <DataTemplate>
                    <TextBlock Text="{Data:MultiBindName}"/>
                </DataTemplate>
            </i:XTabControl.OverflowToolTipHeaderTemplate>
            <i:XTabControl.OverflowToolTipTemplate>
                <DataTemplate>
                    <TextBlock Text="{Data:MultiBindDescription}"/>
                </DataTemplate>
            </i:XTabControl.OverflowToolTipTemplate>
            <i:TabControlCache.ContentTemplate>
                <DataTemplate>
                    <!--
                    <i:ObjectControl i:XObjectControl.Source="{i:Bind}"
                        DescriptionVisibility="{i:Bind Data.ShowDescription, Convert=Data:ConvertBooleanToVisibility, Source={StaticResource Panel}, Way=2}"/>
                    -->
                </DataTemplate>
            </i:TabControlCache.ContentTemplate>
            <i:TabControlCache.ItemContainerStyle>
                <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
                    <Setter Property="i:XToolTip.Header" Value="{Data:MultiBindName}"/>
                    <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind}"/>
                    <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                    <Setter Property="ToolTip" Value="{Data:MultiBindDescription}"/>
                </Style>
            </i:TabControlCache.ItemContainerStyle>
            <i:TabControlCache.ItemTemplate>
                <DataTemplate>
                    <i:Element>
                        <i:Element.Resources>
                            <Data:Reference x:Key="Source" Data="{i:Bind}"/>
                        </i:Element.Resources>
                        <StackPanel Orientation="Horizontal">
                            <i:Display Content="{i:Bind Convert=Data:ConvertToImageAttribute}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Image}}"
                                Margin="{i:Constant Key=ThickRight}"
                                Visibility="{i:Bind Convert=Data:ConvertObjectToVisibility}"/>
                            <TextBlock Text="{Data:MultiBindName}"
                                Foreground="{i:Bind Foreground, From=FindAncestor, FromType=TabItem}"
                                Margin="{i:Constant Key=ThickRight}"/>
                            <i:ImageButton Source="{i:Image Key=XSmall}"
                                Command="{i:Bind Data.RemoveCommand, Source={StaticResource Panel}}"
                                CommandParameter="{i:Bind Data, Source={StaticResource Source}}"
                                Foreground="{i:Bind Foreground, From=FindAncestor, FromType=TabItem}"
                                ToolTip="{l:Loc Close}"/>
                        </StackPanel>
                    </i:Element>
                </DataTemplate>
            </i:TabControlCache.ItemTemplate>
        </i:TabControlCache>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static Core:PropertyPanel.Template}" DataType="{x:Type Core:PropertyPanel}">
        <ContentPresenter Content="{i:Bind}" i:Display.Condition="{i:Compare32 Sources.Count, Type=Greater, Value=0}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static Core:PropertyPanel.TabTemplate}}"
            i:Display.DefaultTemplate="{DynamicResource {x:Static i:XItemsControl.EmptyVerticalTemplateKey}}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Queue-->

    <DataTemplate x:Key="{x:Static Core:QueuePanel.Template}" DataType="{x:Type Core:QueuePanel}">
        <i:DataGridControl Model="{i:Bind}">
            <DataGridTemplateColumn
                Header="{i:Text Type}"
                SortMemberPath="Type"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Text="{i:Bind ItemType}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text Source}"
                SortMemberPath="Source"
                Width="*">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Text="{i:Bind Source}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text Target}"
                SortMemberPath="Target"
                Width="*">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Text="{i:Bind Target}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text SizeRead}"
                SortMemberPath="SizeRead"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Text="{i:Bind SizeRead, Convert=Data:ConvertFileSize}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text Size}"
                SortMemberPath="Size"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Text="{i:Bind Size, Convert=Data:ConvertFileSize}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text Speed}"
                SortMemberPath="Speed"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Text="{i:Bind Speed, Convert=Data:ConvertFileSize}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text Time}"
                SortMemberPath="Time"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            Text="{i:Bind Duration}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}"/>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text TimeLeft}"
                SortMemberPath="TimeLeft"
                Width="Auto">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <TextBlock 
                            Foreground="{Data:Ancestor Foreground, {x:Type DataGridRow}}"
                            TextTrimming="CharacterEllipsis"
                            ToolTip="{i:Bind From=Self, Path=Text}">
                            <TextBlock.Text>
                                <Data:MultiBind ConverterName="TimeLeft">
                                    <Binding Path="Duration"/>
                                    <Binding Path="SizeRead"/>
                                    <Binding Path="Size"/>
                                </Data:MultiBind>
                            </TextBlock.Text>
                        </TextBlock>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
            <DataGridTemplateColumn
                Header="{i:Text Progress}"
                SortMemberPath="Progress"
                Width="*">
                <DataGridTemplateColumn.CellTemplate>
                    <DataTemplate>
                        <ProgressBar x:Name="ProgressBar"
                            Height="20"
                            Maximum="1"
                            Minimum="0"
                            ToolTip="{i:Bind Progress, Convert=Data:ConvertDoublePercent, StringFormat='{}{0:n2}%'}"
                            Value="{i:Bind Progress}"/>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{i:Bind Status}" Value="Inactive">
                                <Setter TargetName="ProgressBar" Property="i:XProgressBar.ContentTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <TextBlock Foreground="{i:Theme Key=Text}" Text="Pending"/>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                            <DataTrigger Binding="{i:Bind Status}" Value="Active">
                                <Setter TargetName="ProgressBar" Property="i:XProgressBar.ContentTemplate">
                                    <Setter.Value>
                                        <DataTemplate>
                                            <TextBlock Foreground="{i:Theme Key=Text}" Text="{i:Bind Convert=Data:ConvertDoublePercent, StringFormat='{}{0:n2}%'}"/>
                                        </DataTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </DataGridTemplateColumn.CellTemplate>
            </DataGridTemplateColumn>
        </i:DataGridControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Random-->

    <DataTemplate x:Key="{x:Static Core:RandomPanel.Template}" DataType="{x:Type Core:RandomPanel}">
        <TextBox AcceptsReturn="True" HorizontalContentAlignment="Center" IsReadOnly="True" Text="{i:Bind Text}" TextAlignment="Center" TextWrapping="Wrap" VerticalContentAlignment="Center"
            FontFamily="{i:Bind FontFamily}"
            FontSize="{i:Bind FontSize, Way=2}"
            i:XElement.Wheel="True"
            i:XElement.WheelIncrement="1"
            i:XElement.WheelMaximum="72"
            i:XElement.WheelMinimum="8"
            i:XElement.WheelValue="{i:Bind FontSize, Way=2}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Reflect-->

    <DataTemplate x:Key="{x:Static Core:ReflectPanel.Template}" DataType="{x:Type Core:ReflectPanel}">
        <DataTemplate.Resources>
            <Data:Reference x:Key="Panel" Data="{i:Bind}"/>
        </DataTemplate.Resources>
        <ContentPresenter x:Name="Content" Content="{i:Bind}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind ViewType}" Value="List">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <DataGrid ItemsSource="{i:Bind ViewMembers}" 
                                CanUserAddRows="False"  
                                CanUserReorderColumns="True"
                                CanUserResizeColumns="True"
                                CanUserSortColumns="True">
                                <DataGrid.Columns>
                                    <DataGridTemplateColumn Header="Access" 
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{i:Bind Access}"
                                                    HorizontalAlignment="Center"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="Kind" 
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{i:Bind Kind}"
                                                    HorizontalAlignment="Center"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="Type" 
                                        Width="Auto">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <i:BottomBorder Background="Transparent" BorderBrush="{i:Theme Key=Link}"
                                                    Cursor="Hand"
                                                    HorizontalAlignment="Left"
                                                    i:XElement.PreviewMouseLeftButtonUpCommand="{i:Bind Data.SelectCommand, Source={StaticResource Panel}}"
                                                    i:XElement.PreviewMouseLeftButtonUpCommandParameter="{i:Bind Type}"
                                                    ToolTip="{i:Bind Type.FullName}">
                                                    <TextBlock Foreground="{i:Theme Key=Link}" Text="{i:Bind Type.Name}"/>
                                                </i:BottomBorder>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                    <DataGridTemplateColumn Header="Name" 
                                        Width="*">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{i:Bind Name}"/>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind ViewType}" Value="Text">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBox 
                                AcceptsReturn="True" 
                                BorderThickness="0"
                                IsReadOnly="True"
                                ScrollViewer.HorizontalScrollBarVisibility="Auto" 
                                ScrollViewer.VerticalScrollBarVisibility="Auto" 
                                Text="{i:Bind Code}"
                                TextAlignment="Left"
                                VerticalContentAlignment="Top"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Theme-->

    <DataTemplate x:Key="{x:Static Core:ThemePanel.Template}" DataType="{x:Type Core:ThemePanel}">
        <ContentPresenter Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static Core:ObjectPanel.Template}}"/>
    </DataTemplate>

    <!--#endregion-->
</ResourceDictionary>
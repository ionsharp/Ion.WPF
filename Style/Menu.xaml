<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Data="clr-namespace:Ion.Data"
    xmlns:Media="clr-namespace:Ion.Media">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Control}"/>
        <ResourceDictionary Source="{i:Style Key=FrameworkElement}"/>
        <ResourceDictionary Source="{i:Style Key=GroupItem}"/>
        <ResourceDictionary Source="{i:Style Key=ItemsControl}"/>
        <ResourceDictionary Source="{i:Style Key=Separator}"/>
        <ResourceDictionary Source="{i:Style Key=Slider}"/>
    </ResourceDictionary.MergedDictionaries>
    <!--#region MenuItem-->

    <ControlTemplate x:Key="{x:Static i:XMenuItem.Template}" TargetType="{x:Type MenuItem}">
        <Border x:Name="PART_Border"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding Border.CornerRadius}"
            SnapsToDevicePixels="True">
            <Grid x:Name="PART_Grid">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" x:Name="Col0"/>
                    <ColumnDefinition Width="*"    x:Name="Col1"
                        SharedSizeGroup="MenuItemHeaderColumnGroup"/>
                    <ColumnDefinition Width="Auto" x:Name="Col2"
                        SharedSizeGroup="MenuItemGestureColumnGroup"/>
                    <ColumnDefinition Width="Auto" x:Name="Col3" />
                </Grid.ColumnDefinitions>

                <Grid x:Name="IconGrid"
                    SnapsToDevicePixels="True"
                    Visibility="{i:Bind From=TemplatedParent, Path=(i:XMenuItem.IconVisibility)}">
                    <i:FillElement x:Name="IconBackground" Fill="#0A000000"/>
                    <i:ImageElement x:Name="IconDot" Source="{i:Image Key=Dot}" 
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Visibility="Collapsed"/>
                    <ContentPresenter x:Name="IconTemplate"
                        Content="{TemplateBinding Icon}"
                        ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XMenuItem.IconTemplate)}"
                        ContentTemplateSelector="{i:Bind From=TemplatedParent, Path=(i:XMenuItem.IconTemplateSelector)}"
                        SnapsToDevicePixels="True"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>

                <ContentPresenter x:Name="PART_Header" Grid.Column="1" 
                    ContentSource="Header"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    TextBlock.Foreground="{TemplateBinding Foreground}"
                    Margin="{TemplateBinding Padding}" 
                    RecognizesAccessKey="True"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Visibility="{i:Bind From=TemplatedParent, Path=(i:XMenuItem.HeaderVisibility)}"/>
                <ContentPresenter x:Name="PART_InputGesture" Grid.Column="2"
                    Content="{TemplateBinding InputGestureText}"
                    ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XMenuItem.InputGestureTextTemplate)}"
                    Margin="5,0"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>

                <i:RotateElement Grid.Column="3" x:Name="PART_Arrow"
                    Margin="3,0,10,0"
                    Rotate="{i:Bind From=TemplatedParent, Path=IsSubmenuOpen}"
                    Rotation="90,0"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                    <Path Data="{i:Constant Key=ShapeTriangleRight}"
                        Fill="{TemplateBinding Foreground}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center"/>
                </i:RotateElement>

                <Popup x:Name="PART_Submenu" 
                    AllowsTransparency="True"
                    Focusable="False" 
                    HorizontalOffset="-1" 
                    IsOpen="{i:Bind From=TemplatedParent, Mode=TwoWay, Path=IsSubmenuOpen}"
                    Placement="Right"
                    PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                    <i:PopupBorder x:Name="PART_SubmenuBorder" 
                        SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="SubMenu"
                            Grid.IsSharedSizeScope="True">
                            <Grid>
                                <i:DisplayEmpty/>
                                <StackPanel 
                                    IsItemsHost="True"
                                    KeyboardNavigation.DirectionalNavigation="Cycle"/>
                            </Grid>
                        </ScrollViewer>
                    </i:PopupBorder>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="True"/>
                    <Condition Property="IsHighlighted" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="IconGrid" Property="Background" Value="{i:Theme MenuItemCheckedMouseOverBulletBackground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Icon" Value="{x:Null}" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter TargetName="IconDot" Property="Visibility" Value="Visible" />
            </MultiTrigger>
            <!-- /// -->
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="IconGrid" Property="Background" Value="{i:Theme MenuItemCheckedBulletBackground}" />
            </Trigger>
            <Trigger Property="IsSuspendingPopupAnimation" Value="True">
                <Setter TargetName="PART_Submenu" Property="PopupAnimation" Value="None" />
            </Trigger>
            <!-- /// -->
            <Trigger Property="i:XMenuItem.IconTemplate" Value="{x:Null}">
                <Setter TargetName="IconTemplate" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <i:ImageElement 
                                HorizontalAlignment="Center"  
                                Source="{i:Bind}"
                                VerticalAlignment="Center"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="i:XMenuItem.IconVisibility" Value="Collapsed">
                <Setter TargetName="Col0" Property="MinWidth" Value="0" />
                <Setter TargetName="Col0" Property="SharedSizeGroup" Value="{x:Null}" />
            </Trigger>
            <Trigger Property="i:XMenuItem.IconVisibility" Value="Visible">
                <Setter TargetName="Col0" Property="MinWidth" Value="50" />
                <Setter TargetName="Col0" Property="SharedSizeGroup" Value="MenuItemIconColumnGroup" />
            </Trigger>
            <!-- /// -->
            <!--<Trigger Property="InputGestureText" Value="{x:Null}">
                <Setter TargetName="PART_InputGesture" Property="Visibility" Value="Collapsed" />
            </Trigger>-->
            
            <!-- SubmenuItem -->

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Role" Value="SubmenuItem"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="PART_Arrow" Property="Visibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Condition Property="InputGestureText" Value="{i:String Key=Empty}"/>
                    <Condition Property="Role" Value="SubmenuItem"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Col1" Property="SharedSizeGroup" Value="{x:Null}" />
                <Setter TargetName="Col2" Property="Width" Value="0" />
                <Setter TargetName="Col3" Property="Width" Value="0" />
                <Setter Property="Padding" Value="5"/>
            </MultiTrigger>

            <!-- TopLevelHeader -->

            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter TargetName="Col0" 
                    Property="MinWidth" Value="0" />
                <Setter TargetName="Col1" 
                    Property="Width" Value="Auto" />
                <Setter TargetName="Col3" 
                    Property="Width" Value="Auto" />
                <Setter TargetName="PART_Arrow" 
                    Property="Visibility" Value="Collapsed" />

                <Setter TargetName="IconBackground"
                    Property="Visibility" Value="Collapsed" />
                <Setter TargetName="IconTemplate" 
                    Property="Margin" Value="2,0,0,0" />
                <Setter TargetName="IconTemplate" 
                    Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_InputGesture" 
                    Property="Visibility" Value="Collapsed" />
                <Setter TargetName="PART_Submenu" 
                    Property="Placement" Value="Bottom" />
                <Setter TargetName="PART_SubmenuBorder" 
                    Property="BorderThickness" Value="1" />
            </Trigger>

            <!-- TopLevelItem -->

            <Trigger Property="Role" Value="TopLevelItem">
                <Setter TargetName="Col0"
                    Property="MinWidth" Value="0" />
                <Setter TargetName="Col3"
                    Property="Width" Value="Auto" />
                <Setter TargetName="PART_Arrow"
                    Property="Visibility" Value="Collapsed" />
                <Setter TargetName="IconBackground"
                    Property="Visibility" Value="Collapsed" />
                <Setter TargetName="IconTemplate" 
                    Property="Margin" Value="2,0,0,0" />
                <Setter TargetName="IconTemplate"
                    Property="Visibility" Value="Visible" />
                <Setter TargetName="PART_InputGesture" 
                    Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="{x:Static i:XMenuItem.Style}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="Background" Value="{i:Theme MenuItemBackground}"/>
        <Setter Property="BorderBrush" Value="{i:Theme MenuItemBorder}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="{i:Bind FontFamily, AppSource=Data}"/>
        <Setter Property="FontSize" Value="{x:Static SystemFonts.MenuFontSize}"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="i:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="i:XMenuItem.InputGestureTextTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Opacity="0.5" Text="{i:Bind}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="10,5"/>
        <Setter Property="Template" Value="{StaticResource {x:Static i:XMenuItem.Template}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter Property="i:XMenuItem.IconTemplate" Value="{i:Template Key=Default}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static i:XElement.DisabledOpacity}" />
            </Trigger>
            
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="DockPanel.Dock" Value="Top" />
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="DockPanel.Dock" Value="Top" />
            </Trigger>

            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Margin" Value="0,0,5,0" />
                <Setter Property="Padding" Value="10,2" />
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Margin" Value="0,0,1,0" />
                <Setter Property="Padding" Value="5,4" />
            </Trigger>

            <!-- TopLevelHeader -->
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="FontFamily" Value="{i:Bind MenuFontFamily, AppSource=Data}"/>
                <Setter Property="i:XControl.FontScale" Value="{i:Bind MenuFontScale, AppSource=Data}"/>
                <Setter Property="i:XControl.FontScaleOrigin" Value="{i:Bind MenuFontSize, AppSource=Data}"/>
                <Setter Property="i:XMenuItem.IconVisibility" Value="{Data:Ancestor {x:Type Menu}, Path=(i:XMenu.TopLevelIconVisibility)}" />
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Header" Value="{x:Null}" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="i:XMenuItem.HeaderVisibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Header" Value="{i:String Key=Empty}" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="i:XMenuItem.HeaderVisibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemTopLevelHeaderMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemTopLevelHeaderMouseOverBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemTopLevelHeaderMouseOverForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemTopLevelHeaderMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSubmenuOpen" Value="True" />
                    <Condition Property="Role" Value="TopLevelHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemTopLevelHeaderPressedBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemTopLevelHeaderPressedBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemTopLevelHeaderPressedForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemTopLevelHeaderPressedForeground}" />
            </MultiTrigger>

            <!-- TopLevelItem -->
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="FontFamily" Value="{i:Bind MenuFontFamily, AppSource=Data}"/>
                <Setter Property="i:XControl.FontScale" Value="{i:Bind MenuFontScale, AppSource=Data}"/>
                <Setter Property="i:XControl.FontScaleOrigin" Value="{i:Bind MenuFontSize, AppSource=Data}"/>
                <Setter Property="i:XMenuItem.IconVisibility" Value="{Data:Ancestor {x:Type Menu}, Path=(i:XMenu.TopLevelIconVisibility)}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="Header" Value="{x:Null}" />
                    <Condition Property="Role" Value="TopLevelItem" />
                </MultiTrigger.Conditions>
                <Setter Property="i:XMenuItem.HeaderVisibility" Value="Collapsed" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="TopLevelItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemTopLevelHeaderMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemTopLevelHeaderMouseOverBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemTopLevelHeaderMouseOverForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemTopLevelHeaderMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="Role" Value="TopLevelItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemTopLevelHeaderPressedBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemTopLevelHeaderPressedBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemTopLevelHeaderPressedForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemTopLevelHeaderPressedForeground}" />
            </MultiTrigger>

            <!-- SubmenuHeader -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemSubmenuHeaderPressedBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemSubmenuHeaderPressedBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemSubmenuHeaderPressedForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemSubmenuHeaderPressedForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemSubmenuHeaderMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemSubmenuHeaderMouseOverBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemSubmenuHeaderMouseOverForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemSubmenuHeaderMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="False" />
                    <Condition Property="Role" Value="SubmenuHeader" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemSubmenuHeaderBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemSubmenuHeaderBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemSubmenuHeaderForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemSubmenuHeaderForeground}" />
            </MultiTrigger>

            <!-- SubmenuItem -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemSubmenuItemPressedBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemSubmenuItemPressedBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemSubmenuItemPressedForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemSubmenuItemPressedForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="True" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemSubmenuItemMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemSubmenuItemMouseOverBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemSubmenuItemMouseOverForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemSubmenuItemMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsHighlighted" Value="False" />
                    <Condition Property="Role" Value="SubmenuItem" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme MenuItemSubmenuItemBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme MenuItemSubmenuItemBorder}" />
                <Setter Property="Foreground" Value="{i:Theme MenuItemSubmenuItemForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemSubmenuItemForeground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type MenuItem}" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Static i:XMenuItem.Style}}">
        <Setter Property="Foreground" Value="{i:Theme MenuItemForeground}"/>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemForeground}" />
        <Setter Property="i:XItemsControl.GroupStyle" Value="{DynamicResource {x:Static i:XMenu.GroupStyle}}"/>
    </Style>

    <!--#endregion-->

    <!--#region Menu-->

    <GroupStyle x:Key="{x:Static i:XMenu.GroupStyle}">
        <GroupStyle.ContainerStyle>
            <Style TargetType="GroupItem"/>
        </GroupStyle.ContainerStyle>
        <GroupStyle.HeaderTemplate>
            <DataTemplate>
                <StackPanel>
                    <ContentPresenter Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:XItemsControl.GroupHeaderTemplate}}"/>
                    <i:MenuItemControl ItemsSource="{i:Bind Items}"
                        ItemContainerStyle="{Data:Ancestor ItemContainerStyle, ItemsControl}"/>
                </StackPanel>
            </DataTemplate>
        </GroupStyle.HeaderTemplate>
        <GroupStyle.Panel>
            <ItemsPanelTemplate>
                <StackPanel/>
            </ItemsPanelTemplate>
        </GroupStyle.Panel>
    </GroupStyle>
    
    <Style x:Key="{x:Type Menu}" TargetType="{x:Type Menu}">
        <Setter Property="Background" Value="{i:Theme MenuBackground}" />
        <Setter Property="FontFamily" Value="{i:Bind FontFamily, AppSource=Data}"/>
        <Setter Property="Foreground" Value="{i:Theme MenuForeground}" />
        <Setter Property="i:XItemsControl.GroupStyle" Value="{DynamicResource {x:Static i:XMenu.GroupStyle}}"/>
        <Setter Property="i:XMenuBase.ItemClearStyle">
            <Setter.Value>
                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Static i:XMenuItem.Style}}">
                    <Setter Property="FontStyle" Value="Italic"/>
                    <Setter Property="Header" Value="{l:Loc Clear}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XMenuBase.ItemPlaceholderStyle">
            <Setter.Value>
                <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Static i:XMenuItem.Style}}">
                    <Setter Property="FontStyle" Value="Italic"/>
                    <Setter Property="Header" Value="{l:Loc None}"/>
                    <Setter Property="IsEnabled" Value="False"/>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region MenuItem.Separator-->

    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource {x:Type Separator}}">
        <Setter Property="FontFamily" Value="{i:Bind FontFamily, AppSource=Data}"/>
        <Setter Property="Foreground" Value="{i:Theme MenuItemForeground}" />
        <Setter Property="IsEnabled" Value="True" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme MenuItemForeground}" />
        <Setter Property="Padding" Value="10,3" />
    </Style>

    <!--#endregion-->

    <!--#region Other-->

    <Style x:Key="{x:Type i:MenuItemSlider}" TargetType="{x:Type i:MenuItemSlider}" BasedOn="{StaticResource {x:Type MenuItem}}">
        <Setter Property="SliderStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource {x:Type Slider}}"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
</ResourceDictionary>
<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Data="clr-namespace:Ion.Data"
    xmlns:Numeral="clr-namespace:Ion.Numeral.Models;assembly=Ion">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Button}"/>
    </ResourceDictionary.MergedDictionaries>
    <Style x:Key="{x:Type i:Display}" TargetType="{x:Type i:Display}"/>

    <!-- /// -->

    <Style x:Key="{x:Type i:DisplayButton}" TargetType="{x:Type i:DisplayButton}" BasedOn="{StaticResource {x:Type i:Display}}">
        <Setter Property="ButtonStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Margin" Value="{i:Constant Key=ThickLeft}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                            <Setter Property="Margin" Value="0"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type i:ButtonList}">
                    <ItemsControl ItemsSource="{i:Bind}"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Center">
                        <ItemsControl.Resources>
                            <Data:Reference x:Key="Control" Data="{i:Bind From=TemplatedParent}"/>
                        </ItemsControl.Resources>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type i:ButtonModel}">
                                <Button x:Name="Button" Content="{i:Bind Content}"
                                    Command="{i:Bind Command}"
                                    CommandParameter="{i:Bind Result}"
                                    CommandTarget="{i:Bind CommandTarget}"
                                    IsCancel="{i:Bind IsCancel}"
                                    IsDefault="{i:Bind IsDefault}"
                                    i:XButton.Image="{i:Bind Image}"
                                    i:XButton.Result="{i:Bind Result}"
                                    Style="{i:Bind Data.ButtonStyle, Source={StaticResource Control}}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type i:DisplayDialog}" TargetType="{x:Type i:DisplayDialog}" BasedOn="{StaticResource {x:Type i:Display}}">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <i:TransitionControl
                        Content="{Data:Ancestor ActiveDialog, i:DisplayDialog}"
                        ContentTemplate="{Data:Ancestor Window, Path=(i:XWindow.DialogTemplate)}"
                        Transition="{Data:Ancestor Window, Path=(i:XWindow.DialogTransition)}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsActive" Value="True">
                <Setter Property="IsHitTestVisible" Value="True"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- /// -->

    <Thickness x:Key="{x:Static i:DisplayEmpty.PopupMarginKey}">10</Thickness>
    
    <Style x:Key="{x:Type i:DisplayEmpty}" TargetType="{x:Type i:DisplayEmpty}" BasedOn="{StaticResource {x:Type i:Display}}">
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Setter Property="Opacity" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsEmpty" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:1" From="0" To="1" Storyboard.TargetProperty="Opacity"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Duration="0:0:1" From="1" To="0" Storyboard.TargetProperty="Opacity"/>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- /// -->

    <Style x:Key="{x:Type i:DisplayNotification}" TargetType="{x:Type i:DisplayNotification}" BasedOn="{StaticResource {x:Type i:Display}}">
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl
                        ItemsSource="{i:Bind}"
                        ItemTemplate="{Data:Ancestor Window, Path=(i:XWindow.NotificationTemplate)}"
                        Margin="10"
                        VerticalAlignment="Bottom">
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Style.Triggers>
                                    <DataTrigger Binding="{i:Bind IsRead}" Value="True">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Bind IsRead}" Value="False">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type i:DisplaySelection}" TargetType="{x:Type i:DisplaySelection}" BasedOn="{StaticResource {x:Type i:Display}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Canvas>
                        <i:SelectionBorder
                            Canvas.Left="{i:Bind X}"
                            Canvas.Top="{i:Bind Y}"
                            Height="{i:Bind Height}"
                            IsHitTestVisible="False"
                            Panel.ZIndex="1"
                            Width="{i:Bind Width}"/>
                    </Canvas>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
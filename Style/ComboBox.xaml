<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:g="urn:gong-wpf-dragdrop"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Data="clr-namespace:Ion.Data"
    xmlns:Storage="clr-namespace:Ion.Storage">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Button}"/>
        <ResourceDictionary Source="{i:Style Key=Control}"/>
        <ResourceDictionary Source="{i:Style Key=ItemsControl}"/>
        <ResourceDictionary Source="{i:Style Key=Menu}"/>
        <ResourceDictionary Source="{i:Style Key=Storage}"/>
        <ResourceDictionary Source="{i:Style Key=Validation}"/>
    </ResourceDictionary.MergedDictionaries>
    <!--#region ComboBox-->

    <Style x:Key="{x:Static i:XComboBox.ToggleButtonStyleKey}" TargetType="{x:Type ToggleButton}">
        <Setter Property="ClickMode" Value="Press" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- /// -->

    <DataTemplate x:Key="{x:Static i:XComboBox.MenuHeaderPatternKey}">
        <i:DotControl Foreground="White"/>
    </DataTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="Background" Value="{i:Theme ComboBoxBackground}" />
        <Setter Property="BorderBrush" Value="{i:Theme ComboBoxBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="{i:Bind FontFamily, AppSource=Data}"/>
        <Setter Property="Foreground" Value="{i:Theme ComboBoxForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel                                
                        ScrollViewer.PanningMode="None"
                        ScrollViewer.PanningRatio="0"
                        KeyboardNavigation.DirectionalNavigation="Contained"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{i:Bind Convert=Data:ConvertToStringCamel}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="KeyboardNavigation.DirectionalNavigation" Value="Cycle"/>
        <Setter Property="i:XComboBox.MenuAnimation" Value="Fade"/>
        <Setter Property="i:XComboBox.MenuPlacement" Value="Bottom"/>
        <Setter Property="i:XComboBox.MinDropDownHeight" Value="{x:Static i:XPopup.MinimumHeight}"/>
        <Setter Property="i:XComboBox.PlaceholderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{i:Bind}" Opacity="0.4"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XComboBox.SelectedItemTemplate" Value="{i:Bind From=Self, Path=ItemTemplate}"/>
        <Setter Property="i:XComboBox.SelectionMode" Value="One"/>
        <Setter Property="i:XControl.FontScale" Value="{i:Bind FontScale, AppSource=Data}"/>
        <Setter Property="i:XControl.FontScaleOrigin" Value="{i:Bind FontSize, AppSource=Data}"/>
        <Setter Property="i:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="i:XItemsControl.GroupStyle" Value="{DynamicResource {x:Static i:XItemsControl.GroupStyleKey}}"/>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme ComboBoxForeground}"/>
        <Setter Property="MaxDropDownHeight" Value="{x:Static i:XPopup.MaximumHeight}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="3" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.PanningMode" Value="None" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid i:XGrid.Columns="*,Auto">
                        <ToggleButton Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            IsChecked="{i:Bind From=TemplatedParent, Path=IsDropDownOpen, Mode=TwoWay}"
                            i:XControl.IgnoreDrop="True"
                            Style="{StaticResource {x:Static i:XComboBox.ToggleButtonStyleKey}}"/>

                        <Grid Grid.Column="0" i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*,Auto" Margin="{TemplateBinding Padding}">
                            <ContentPresenter Content="{i:Bind From=TemplatedParent, Path=(i:XComboBox.LeftContent)}" ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XComboBox.LeftContentTemplate)}"
                                Visibility="{i:Bind Path=(i:XComboBox.LeftContent), Convert=Data:ConvertObjectToVisibility, From=TemplatedParent}"/>
                            <Grid>
                                <ContentPresenter x:Name="PART_Placeholder"
                                    Content="{i:Bind From=TemplatedParent, Path=(i:XComboBox.Placeholder)}" 
                                    ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XComboBox.PlaceholderTemplate)}"
                                    ContentTemplateSelector="{i:Bind From=TemplatedParent, Path=(i:XComboBox.PlaceholderTemplateSelector)}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsHitTestVisible="False"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Visibility="Collapsed"/>
                                <ContentPresenter x:Name="ContentSite"
                                    ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XComboBox.SelectedItemTemplate)}" 
                                    ContentTemplateSelector="{i:Bind From=TemplatedParent, Path=(i:XComboBox.SelectedItemTemplateSelector)}" 
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    IsHitTestVisible="False" 
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Visibility="{i:Bind From=TemplatedParent, Path=IsEditable, Convert={x:Type Data:ConvertBooleanToVisibility}, ConverterParameter=1}"/>
                                <TextBox
                                    Background="Transparent"
                                    BorderThickness="0"
                                    Focusable="True"
                                    Foreground="{TemplateBinding Foreground}"
                                    IsHitTestVisible="{TemplateBinding IsEditable}"
                                    IsReadOnly="{TemplateBinding IsReadOnly}"
                                    i:XControl.IgnoreDrop="True"
                                    i:XTextBoxBase.Placeholder="{i:Bind From=TemplatedParent, Path=(i:XComboBox.Placeholder)}"
                                    Padding="0"
                                    Text="{i:Bind From=TemplatedParent, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                    Visibility="{i:Bind From=TemplatedParent, Path=IsEditable, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                            </Grid>
                            <ContentPresenter Content="{i:Bind From=TemplatedParent, Path=(i:XComboBox.RightContent)}" ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XComboBox.RightContentTemplate)}"
                                Visibility="{i:Bind Path=(i:XComboBox.RightContent), Convert=Data:ConvertObjectToVisibility, From=TemplatedParent}"/>
                        </Grid>

                        <i:RotateElement Grid.Column="1"
                            IsHitTestVisible="False"
                            Margin="0,0,5,0"
                            Rotate="{TemplateBinding IsDropDownOpen}"
                            Rotation="-90,0"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Visibility="{Data:Ancestor IsReadOnly, {x:Type ComboBox}, Convert={x:Type Data:ConvertBooleanToVisibility}, ConverterParameter=1}">
                            <i:ImageElement 
                                Source="{i:Image Key=ArrowDown}"
                                SourceSize="10,10"
                                Foreground="{TemplateBinding Foreground}"/>
                        </i:RotateElement>

                        <Popup
                            AllowsTransparency="True"
                            Focusable="False"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuPlacement)}"
                            PopupAnimation="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuAnimation)}"
                            StaysOpen="{i:Bind From=TemplatedParent, Path=(i:XComboBox.StaysOpen)}">
                            <i:PopupBorder 
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinHeight="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MinDropDownHeight)}"
                                MinWidth="{TemplateBinding ActualWidth}">
                                <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*,Auto" MinWidth="256">
                                    <Border Background="{i:Theme Accent}"
                                        Padding="5"
                                        Visibility="{i:Bind Path=(i:XComboBox.MenuHeader), Convert=Data:ConvertObjectToVisibility, From=TemplatedParent}">
                                        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,Auto,*" i:XPanel.Spacing="0,0,5,0" i:XPanel.SpacingExcept="Last">
                                            <i:ImageElement Foreground="White" Source="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuHeaderIcon)}"
                                                Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
                                            <ContentControl Content="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuHeader)}" 
                                                ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuHeaderTemplate)}"
                                                Foreground="White"/>
                                            <ContentPresenter ContentTemplate="{DynamicResource {x:Static i:XComboBox.MenuHeaderPatternKey}}"/>
                                        </Grid>
                                    </Border>
                                    <Grid>
                                        <i:DisplayEmpty x:Name="DisplayEmpty"/>
                                        <ScrollViewer>
                                            <ItemsPresenter/>
                                        </ScrollViewer>
                                    </Grid>
                                    <ContentPresenter Content="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuFooter)}" ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuFooterTemplate)}"
                                        Visibility="{i:Bind Path=(i:XComboBox.MenuFooter), Convert=Data:ConvertObjectToVisibility, From=TemplatedParent}"/>
                                </Grid>
                        </i:PopupBorder>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="i:XItemsControl.IsEmpty" Value="True">
                            <Setter TargetName="DisplayEmpty" Property="Margin" Value="{DynamicResource {x:Static i:DisplayEmpty.PopupMarginKey}}"/>
                        </Trigger>
                        <Trigger Property="i:XComboBox.SelectionMode" Value="{x:Static i:Select.OneOrMore}">
                            <Setter TargetName="ContentSite" Property="Content" Value="{i:Bind From=TemplatedParent, Path=(i:XComboBox.SelectedItems)}"/>
                        </Trigger>
                        <Trigger Property="i:XComboBox.SelectionMode" Value="{x:Static i:Select.One}">
                            <Setter TargetName="ContentSite" Property="Content" Value="{i:Bind From=TemplatedParent, Path=SelectionBoxItem}"/>
                        </Trigger>
                        <Trigger Property="i:XComboBox.SelectionMode" Value="{x:Static i:Select.OneOrNone}">
                            <Setter TargetName="ContentSite" Property="Content" Value="{i:Bind From=TemplatedParent, Path=SelectionBoxItem}"/>
                        </Trigger>
                        <Trigger Property="i:XComboBox.SelectedItemTemplate" Value="{x:Null}">
                            <Setter TargetName="ContentSite" Property="ContentTemplate" Value="{i:Bind From=TemplatedParent, Path=SelectionBoxItemTemplate}"/>
                        </Trigger>
                        <Trigger Property="i:XComboBox.SelectedItemTemplateSelector" Value="{x:Null}">
                            <Setter TargetName="ContentSite" Property="ContentTemplateSelector" Value="{i:Bind From=TemplatedParent, Path=ItemTemplateSelector}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEditable" Value="False"/>
                                <Condition Property="i:XComboBox.IsSelectionEmpty" Value="True"/>
                                <Condition Property="SelectedItem" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Placeholder" Property="Visibility" Value="Visible" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource {x:Static i:XTextBoxBase.ValidationErrorTemplate}}"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Standard" />
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="Width" Value="Auto" />
        <Style.Triggers>
            <Trigger Property="IsDropDownOpen" Value="True">
                <Setter Property="Background" Value="{i:Theme ComboBoxCheckedBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme ComboBoxCheckedBorder}" />
                <Setter Property="Foreground" Value="{i:Theme ComboBoxCheckedForeground}"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="True">
                <Setter Property="IsTabStop" Value="False" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static i:XElement.DisabledOpacity}" />
            </Trigger>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{i:Theme ComboBoxFocusBorder}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsDropDownOpen" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme ComboBoxMouseOverBackground}" />
                <Setter Property="BorderBrush" Value="{i:Theme ComboBoxMouseOverBorder}" />
                <Setter Property="Foreground" Value="{i:Theme ComboBoxMouseOverForeground}"/>
            </MultiTrigger>
            <!-- /// -->
            <Trigger Property="i:XComboBox.SelectionMode" Value="OneOrMore">
                <Setter Property="i:XComboBox.SelectedItemTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ItemsControl ItemsSource="{i:Bind}">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <TextBlock><Run x:Name="Comma" Text=", "/><Run Text="{i:Bind Mode=OneWay}"/></TextBlock>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                                                <Setter TargetName="Comma" Property="Text" Value="{x:Null}"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="i:XComboBox.StaysOpen" Value="True"/>
            </Trigger>
            <Trigger Property="i:XComboBox.SelectionMode" Value="{x:Static i:Select.One}">
                <Setter Property="i:XComboBox.StaysOpen" Value="False"/>
            </Trigger>
            <Trigger Property="i:XComboBox.SelectionMode" Value="{x:Static i:Select.OneOrNone}">
                <Setter Property="i:XComboBox.StaysOpen" Value="False"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region ComboBoxItem-->

    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FontFamily" Value="{i:Bind FontFamily, AppSource=Data}"/>
        <Setter Property="Foreground" Value="{i:Theme ComboBoxItemForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="i:XComboBoxItem.IconSize" Value="16,16"/>
        <Setter Property="i:XComboBoxItem.IconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <i:ImageElement Source="{i:Bind}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XControl.FontScale" Value="{i:Bind FontScale, AppSource=Data}"/>
        <Setter Property="i:XControl.FontScaleOrigin" Value="{i:Bind FontSize, AppSource=Data}"/>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme ComboBoxItemForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="4" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*,Auto" 
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter Content="{i:Bind From=TemplatedParent, Path=(i:XComboBoxItem.Icon)}"
                                ContentTemplate="{i:Bind From=TemplatedParent, Path=(i:XComboBoxItem.IconTemplate)}"
                                Margin="{i:Constant Key=ThickRight}"
                                Visibility="{i:Bind Convert=Data:ConvertObjectToVisibility, From=TemplatedParent, Path=(i:XComboBoxItem.Icon)}"/>
                            <ContentPresenter/>
                            <i:ImageElement
                                Margin="5,0,0,0"
                                Source="{i:Image Key=CheckmarkRound}"
                                Foreground="{TemplateBinding Foreground}"
                                SourceSize="12,12"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{i:Bind From=TemplatedParent, Path=(i:XComboBoxItem.IsSelected), Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="{x:Static i:XElement.DisabledOpacity}" />
            </Trigger>
            <Trigger Property="i:XComboBoxItem.IsSelected" Value="True">
                <Setter Property="Background" Value="{i:Theme ComboBoxItemSelectedBackground}" />
                <Setter Property="Foreground" Value="{i:Theme ComboBoxItemSelectedForeground}" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True"/>
                    <Condition Property="i:XComboBoxItem.IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme ComboBoxItemMouseOverBackground}" />
                <Setter Property="Foreground" Value="{i:Theme ComboBoxItemMouseOverForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="ItemsControl.AlternationIndex" Value="0" />
                    <Condition Property="i:XComboBoxItem.IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme ComboBoxItemEvenBackground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                    <Condition Property="i:XComboBoxItem.IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme ComboBoxItemOddBackground}" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type i:ComboBoxSeparator}" TargetType="{x:Type i:ComboBoxSeparator}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="FontFamily" Value="{i:Bind FontFamily, AppSource=Data}"/>
        <Setter Property="FontSize" Value="{x:Static SystemFonts.MenuFontSize}"/>
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Foreground" Value="{i:Theme ComboBoxItemForeground}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme ComboBoxItemForeground}" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Padding" Value="10,3" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
                        Background="{TemplateBinding Background}">
                        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*">
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="{TemplateBinding Padding}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <i:LineElement Orientation="Horizontal"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--#endregion-->

    <!--#region AddressBox-->

    <Style x:Key="{x:Type i:AddressBox}" TargetType="{x:Type i:AddressBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="i:XToolTip.Template">
                        <Setter.Value>
                            <DataTemplate>
                                <ContentPresenter Content="{i:Bind}" ContentTemplate="{StaticResource {x:Static i:XStorage.ToolTipTemplateKey}}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{i:Bind}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{i:Bind Convert={x:Type Data:ConvertFileHidden}}" Value="True">
                            <Setter Property="Opacity" Value="{x:Static i:ItemViewControl.HiddenOpacity}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsSource" Value="{i:Bind From=Self, Path=History}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Grid i:XGrid.Columns="Auto,*">
                        <i:Thumbnail
                            Height="16"
                            Margin="0,0,7,0"
                            Path="{i:Bind}"
                            Width="16"/>
                        <TextBlock 
                            Grid.Column="1"
                            Text="{i:Bind Convert={x:Type Data:ConvertFileName}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XComboBox.SelectionMode" Value="One"/>
        <Setter Property="i:XStorage.CopyWarningTitle" Value="{i:Text Copy}"/>
        <Setter Property="i:XStorage.CopyWarningMessage" Value="{i:Text Continue, Suffix=?}"/>
        <Setter Property="i:XStorage.MoveWarningTitle" Value="{i:Text Move}"/>
        <Setter Property="i:XStorage.MoveWarningMessage" Value="{i:Text Continue, Suffix=?}"/>
        <Setter Property="i:XStorage.WarnBeforeDrop" Value="True"/>
        <Setter Property="Padding" Value="5,1.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type i:AddressBox}">
                    <Grid i:XGrid.Columns="26,26,26,*">
                        <Grid.Resources>
                            <Data:Reference x:Key="AddressBox" Data="{i:Bind From=TemplatedParent}"/>
                        </Grid.Resources>
                        <!-- /// -->
                        <i:ImageButton Grid.Column="0" 
                            Command="{i:Bind From=TemplatedParent, Path=BackCommand}" 
                            HorizontalAlignment="Left"
                            Source="{i:Image Key=ArrowW}" 
                            ToolTip="{i:Text Back}"/>
                        <i:ImageButton Grid.Column="1" 
                            Command="{i:Bind From=TemplatedParent, Path=ForwardCommand}" 
                            HorizontalAlignment="Left"
                            Source="{i:Image Key=ArrowE}" 
                            ToolTip="{i:Text Forward}"/>
                        <i:ImageButton Grid.Column="2" 
                            Command="{i:Bind From=TemplatedParent, Path=GoUpCommand}" 
                            HorizontalAlignment="Left"
                            Source="{i:Image Key=ArrowN}"
                            ToolTip="{i:Text Up}"/>
                        <!-- /// -->
                        <Grid x:Name="PART_Grid" Grid.Column="3">
                            <Border
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"/>
                            <Grid i:XGrid.Columns="Auto,Auto,*,Auto,Auto,Auto"
                                Margin="{i:Bind From=TemplatedParent, Path=Padding}"
                                i:XPanel.Spacing="0,0,5,0"
                                i:XPanel.SpacingExcept="Last"
                                i:XPanel.VerticalContentAlignment="Center">
                                <i:Thumbnail x:Name="PART_Thumbnail"
                                    Height="20"
                                    i:XElement.OverrideMargin="5,0,0,0"
                                    Path="{i:Bind From=TemplatedParent, Path=(i:XStorage.Path)}"
                                    Width="20"/>
                                <i:ImageToggleButton Grid.Column="1"
                                    ButtonVisibility="Visible"
                                    Focusable="False"
                                    i:XElement.OverrideMargin="1,0"
                                    Visibility="{i:Compare32 Crumbs.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                                    <i:ImageToggleButton.Menu>
                                        <ContextMenu ItemsSource="{i:Bind Data.Crumbs, Source={StaticResource AddressBox}}">
                                            <ContextMenu.ItemContainerStyle>
                                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                    <Setter Property="Command" Value="{i:Bind Data.SetPathCommand, Source={StaticResource AddressBox}}" />
                                                    <Setter Property="CommandParameter" Value="{i:Bind}" />
                                                    <Setter Property="Header" Value="{i:Bind Convert={x:Type Data:ConvertFileName}}" />
                                                    <Setter Property="Icon" Value="{i:Bind}"/>
                                                    <Setter Property="i:XMenuItem.IconTemplate">
                                                        <Setter.Value>
                                                            <DataTemplate>
                                                                <i:Thumbnail Path="{i:Bind Mode=OneWay}"/>
                                                            </DataTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="i:XToolTip.Template">
                                                        <Setter.Value>
                                                            <DataTemplate>
                                                                <ContentPresenter Content="{i:Bind}" ContentTemplate="{StaticResource {x:Static i:XStorage.ToolTipTemplateKey}}"/>
                                                            </DataTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                    <Setter Property="ToolTip" Value="{i:Bind}" />
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{i:Bind}" Value="*">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{i:Bind Convert={x:Type Data:ConvertFileHidden}}" Value="True">
                                                            <Setter Property="Opacity" Value="{x:Static i:ItemViewControl.HiddenOpacity}"/>
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ContextMenu.ItemContainerStyle>
                                        </ContextMenu>
                                    </i:ImageToggleButton.Menu>
                                </i:ImageToggleButton>
                                <!-- /// -->
                                <ToggleButton x:Name="ToggleButton" Grid.Column="2"
                                    Background="Transparent"
                                    ClickMode="Press"
                                    Focusable="False" 
                                    IsChecked="{i:Bind From=TemplatedParent, Path=IsDropDownOpen, Mode=TwoWay}">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                                            <Grid Background="{TemplateBinding Background}"/>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>
                                <ToolBar Grid.Column="2" i:XElement.Name="{x:Static i:AddressBox.ToolBarKey}"
                                    AllowDrop="True"
                                    Background="Transparent" 
                                    BorderThickness="0"
                                    g:DragDrop.DropHandler="{i:Bind From=TemplatedParent, Path=DropHandler}"
                                    g:DragDrop.IsDropTarget="True"
                                    ItemsSource="{TemplateBinding Crumbs}"
                                    ToolTip="{i:Bind From=TemplatedParent, Path=(i:XStorage.Path)}"
                                    Visibility="{i:Bind From=TemplatedParent, Path=IsEditable, Convert={x:Type Data:ConvertBooleanToVisibility}, ConverterParameter=1}">
                                    <i:XToolTip.Template>
                                        <DataTemplate>
                                            <ContentPresenter Content="{i:Bind}" ContentTemplate="{StaticResource {x:Static i:XStorage.ToolTipTemplateKey}}"/>
                                        </DataTemplate>
                                    </i:XToolTip.Template>
                                    <ToolBar.ItemContainerStyle>
                                        <Style TargetType="{x:Type ContentPresenter}">
                                            <Setter Property="AllowDrop" Value="True"/>
                                            <Setter Property="g:DragDrop.DropHandler" Value="{i:Bind Data.DropHandler, Source={StaticResource AddressBox}}"/>
                                            <Setter Property="g:DragDrop.IsDragSource" Value="True"/>
                                            <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
                                            <Setter Property="g:DragDrop.UseDefaultDragAdorner" Value="True"/>
                                        </Style>
                                    </ToolBar.ItemContainerStyle>
                                    <ToolBar.ItemTemplate>
                                        <DataTemplate>
                                            <i:FolderButton
                                                Command="{i:Bind Data.SetPathCommand, Source={StaticResource AddressBox}}"
                                                CommandParameter="{i:Bind}"
                                                Focusable="False"
                                                i:XStorage.Path="{i:Bind}"
                                                Margin="0,0,2,0"/>
                                        </DataTemplate>
                                    </ToolBar.ItemTemplate>
                                </ToolBar>
                                <TextBox x:Name="PART_TextBox" i:XElement.Name="{x:Static i:AddressBox.TextBoxKey}"
                                    Grid.Column="2"
                                    Background="Transparent" 
                                    BorderThickness="0" 
                                    Focusable="True"
                                    i:XElement.LostFocusCommand="{i:Bind From=TemplatedParent, Path=EnterCommand}"
                                    i:XElement.OverrideMargin="0"
                                    i:XTextBox.ClearButtonVisibility="Visible"
                                    i:XTextBox.EnterCommand="{i:Bind From=TemplatedParent, Path=EnterCommand}"
                                    i:XTextBoxBase.Placeholder="{i:Text Path}"
                                    i:XTextBoxBase.SelectAllOnFocus="True"
                                    i:XTextBox.SelectAllOnTripleClick="True"
                                    Padding="3"
                                    Text="{i:Bind From=TemplatedParent, Path=(i:XStorage.Path), Mode=TwoWay, UpdateSourceTrigger=LostFocus}"
                                    VerticalContentAlignment="Center"
                                    Visibility="{i:Bind From=TemplatedParent, Path=IsEditable, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                                <!-- /// -->
                                <i:ImageButton Grid.Column="3"
                                    Command="{i:Bind From=TemplatedParent, Path=GoCommand}"
                                    Source="{i:Image Key=ArrowNext}" 
                                    ToolTip="{i:Text Go}"
                                    Visibility="{i:Bind From=TemplatedParent, Path=IsEditable, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                                <i:ImageButton Grid.Column="4"
                                    Command="{i:Bind From=TemplatedParent, Path=RefreshCommand}" 
                                    Source="{i:Image Key=Refresh}" 
                                    ToolTip="{i:Text Refresh}">
                                    <i:ImageButton.Style>
                                        <Style TargetType="{x:Type i:ImageButton}" BasedOn="{StaticResource {x:Type i:ImageButton}}">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Data:Ancestor IsEditable, {x:Type i:AddressBox}}" Value="False"/>
                                                        <Condition Binding="{i:Bind From=Self, Path=IsEnabled}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </i:ImageButton.Style>
                                </i:ImageButton>
                                <i:ImageToggleButton Grid.Column="5"
                                    ButtonSize="10,10"
                                    ButtonSource="{i:Image Key=ArrowDown}"
                                    ButtonVisibility="Visible"
                                    Focusable="False"
                                    IsChecked="{i:Bind From=TemplatedParent, Path=IsDropDownOpen, Mode=TwoWay}"
                                    ToolTip="{i:Text History}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Visibility="{Data:Ancestor IsReadOnly, {x:Type ComboBox}, Convert={x:Type Data:ConvertBooleanToVisibility}, ConverterParameter=1}"/>
                            </Grid>
                        </Grid>
                        <Popup
                            AllowsTransparency="True"
                            Focusable="False" 
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            Placement="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuPlacement)}"
                            PlacementTarget="{i:Bind ElementName=PART_Grid}"
                            PopupAnimation="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MenuAnimation)}"
                            SnapsToDevicePixels="True"
                            StaysOpen="{i:Bind From=TemplatedParent, Path=(i:XComboBox.StaysOpen)}">
                            <i:PopupBorder
                                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                MinHeight="{i:Bind From=TemplatedParent, Path=(i:XComboBox.MinDropDownHeight)}"
                                Width="{i:Bind ActualWidth, ElementName=PART_Grid}">
                                <Grid>
                                    <i:DisplayEmpty x:Name="DisplayEmpty"/>
                                    <ScrollViewer>
                                        <ItemsPresenter/>
                                    </ScrollViewer>
                                </Grid>
                            </i:PopupBorder>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="i:XItemsControl.IsEmpty" Value="True">
                            <Setter TargetName="DisplayEmpty" Property="Margin" Value="{DynamicResource {x:Static i:DisplayEmpty.PopupMarginKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region FolderBox-->

    <Style x:Key="{x:Type i:FolderBox}" TargetType="{x:Type i:FolderBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="AllowDrop" Value="True" />
        <Setter Property="g:DragDrop.IsDropTarget" Value="True"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="i:XToolTip.Template">
                        <Setter.Value>
                            <DataTemplate>
                                <ContentPresenter Content="{i:Bind}" ContentTemplate="{StaticResource {x:Static i:XStorage.ToolTipTemplateKey}}"/>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="ToolTip" Value="{i:Bind Path}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Storage:Item}">
                    <Grid i:XGrid.Columns="Auto,*">
                        <i:Thumbnail
                            Margin="0,0,7,0"
                            Path="{i:Bind Path}"/>
                        <TextBlock 
                            Grid.Column="1"
                            Text="{i:Bind Path, Convert={x:Type Data:ConvertFileName}}"/>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XControl.DropTemplate">
            <Setter.Value>
                <DataTemplate>
                    <i:DashedBorder
                        BorderBrush="{i:Theme DropTargetBorder}"
                        BorderThickness="2">
                        <i:ImageElement Source="{i:Image Key=Plus}"
                            HorizontalAlignment="Center" 
                            VerticalAlignment="Center"/>
                    </i:DashedBorder>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XControl.DropTemplateVisibility" Value="Visible" />
        <Setter Property="i:XStorage.CopyWarningTitle" Value="{i:Text Copy}"/>
        <Setter Property="i:XStorage.CopyWarningMessage" Value="{i:Text Continue, Suffix=?}"/>
        <Setter Property="i:XStorage.MoveWarningTitle" Value="{i:Text Move}"/>
        <Setter Property="i:XStorage.MoveWarningMessage" Value="{i:Text Continue, Suffix=?}"/>
        <Setter Property="i:XStorage.WarnBeforeDrop" Value="True"/>
        <Setter Property="i:XElement.ShellContextMenu" Value="{i:Bind From=Self, Path=SelectedItem.Path}"/>
        <Setter Property="i:XToolTip.Template" Value="{StaticResource {x:Static i:XStorage.ToolTipTemplateKey}}"/>
        <Setter Property="ToolTip" Value="{i:Bind From=Self, Path=SelectedItem.Path}"/>
        <Style.Triggers>
            <Trigger Property="SelectedItem" Value="{x:Null}">
                <Setter Property="i:XElement.ShellContextMenu" Value="{i:Bind From=Self, Path=Path}"/>
                <Setter Property="ToolTip" Value="{i:Bind From=Self, Path=Path}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region Font*Box-->

    <Style x:Key="{x:Type i:FontFamilyBox}" TargetType="{x:Type i:FontFamilyBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemsSource" Value="{i:Bind Source={x:Static Fonts.SystemFontFamilies}}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontFamily="{i:Bind}" MaxHeight="20" Text="{i:Bind}" VerticalAlignment="Center"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XComboBox.SelectedItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{i:Bind}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type i:FontSizeBox}" TargetType="{x:Type i:FontSizeBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemsSource" Value="{i:Bind From=Self, Path=Sizes}" />
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{i:Bind}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XElement.WheelIncrement" Value="{i:Bind From=Self, Path=SizeIncrement}" />
        <Setter Property="i:XElement.WheelMaximum" Value="{i:Bind From=Self, Path=SizeMaximum}" />
        <Setter Property="i:XElement.WheelMinimum" Value="{i:Bind From=Self, Path=SizeMinimum}" />
        <Setter Property="i:XElement.WheelValue" Value="{i:Bind From=Self, Path=FontSize}" />
        <Setter Property="i:XElement.WheelValues" Value="{i:Bind From=Self, Path=Sizes}" />
        <Setter Property="SelectedIndex" Value="0" />
    </Style>

    <Style x:Key="{x:Type i:FontStyleBox}" TargetType="{x:Type i:FontStyleBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontStyle="{i:Bind}" Text="{i:Bind}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedIndex" Value="0" />
    </Style>

    <Style x:Key="{x:Type i:FontWeightBox}" TargetType="{x:Type i:FontWeightBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock FontWeight="{i:Bind}" Text="{i:Bind}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="SelectedIndex" Value="0" />
    </Style>

    <!--#endregion-->

    <!--#region TimeZoneBox-->

    <Style x:Key="{x:Type i:TimeZoneBox}" TargetType="{x:Type i:TimeZoneBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{i:Bind DisplayName}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
</ResourceDictionary>
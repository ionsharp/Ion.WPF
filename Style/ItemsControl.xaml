<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Data="clr-namespace:Ion.Data">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Control}"/>
        <ResourceDictionary Source="{i:Style Key=GroupItem}"/>
    </ResourceDictionary.MergedDictionaries>
    <!--#region ItemsControl-->

    <DataTemplate x:Key="{x:Static i:XItemsControl.EmptyHorizontalTemplateKey}">
        <i:ImageElement
            HorizontalAlignment="Center"
            Opacity="0.3"
            Source="{i:Image Key=OpenBox}"
            SourceSize="32,32"
            VerticalAlignment="Center"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:XItemsControl.EmptyVerticalTemplateKey}">
        <i:ImageElement
            HorizontalAlignment="Center"
            Opacity="0.3"
            Source="{i:Image Key=OpenBox}"
            SourceSize="42,42"
            VerticalAlignment="Center"/>
    </DataTemplate>

    <GroupStyle x:Key="{x:Static i:XItemsControl.GroupStyleKey}" ContainerStyle="{StaticResource {x:Type GroupItem}}" HidesIfEmpty="True">
        <GroupStyle.Panel>
            <ItemsPanelTemplate>
                <StackPanel/>
            </ItemsPanelTemplate>
        </GroupStyle.Panel>
    </GroupStyle>

    <Style x:Key="{x:Type ItemsControl}" TargetType="{x:Type ItemsControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="i:XItemsControl.EmptyTemplate" Value="{StaticResource {x:Static i:XItemsControl.EmptyVerticalTemplateKey}}"/>
        <Setter Property="i:XItemsControl.Extend" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <i:ClipBorder
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"  
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        CornerRadius="{TemplateBinding Border.CornerRadius}"
                        Padding="{TemplateBinding Padding}">
                        <Grid>
                            <i:DisplayEmpty/>
                            <i:DisplaySelection Visibility="{i:Bind Convert=Data:ConvertBooleanToVisibility, From=FindAncestor, FromType={x:Type ItemsControl}, Path=(i:XItemsControl.CanDragSelect)}"/>
                            <ItemsPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                    </i:ClipBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <!--#endregion-->

    <!--#region MenuItemControl-->

    <Style x:Key="{x:Type i:MenuItemControl}" TargetType="{x:Type i:MenuItemControl}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="i:XItemsControl.EmptyTemplateVisibility" Value="Visible"/>
        <Setter Property="Padding" Value="0"/>
    </Style>

    <!--#endregion-->

    <!--#region RadioButtonGroup-->

    <Style x:Key="{x:Static i:RadioButtonGroup.ItemContainerStyleKey}" TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type FrameworkElement}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{Data:Ancestor BorderBrush, {x:Type i:RadioButtonGroup}}"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="Content" Value="{i:Bind}" />
        <Setter Property="ContentTemplate" Value="{Data:Ancestor ItemTemplate, i:RadioButtonGroup}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{i:Theme Text}"/>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme Text}"/>
        <Setter Property="GroupName" Value="{Data:Ancestor GroupName, i:RadioButtonGroup}"/>
        <Setter Property="Margin" Value="0,0,-1,0"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="7,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border 
                        Background="{TemplateBinding Background}" 
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*" VerticalAlignment="Center">
                            <i:ImageElement Source="{i:Bind From=TemplatedParent, Path=(i:XToggleButton.Image)}" 
                                Margin="0,0,5,0"                
                                Visibility="{i:Bind Convert=Data:ConvertObjectToVisibility, From=TemplatedParent, Path=(i:XToggleButton.Image)}"/>
                            <ContentPresenter
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Visibility="{i:Bind Content, Convert=Data:ConvertObjectToVisibility, From=TemplatedParent}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme RadioGroupMouseOverBackground}" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="Foreground" Value="{i:Theme RadioGroupMouseOverForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme RadioGroupMouseOverForeground}"/>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{i:Theme RadioGroupCheckedBackground}" />
                <Setter Property="Cursor" Value="Arrow" />
                <Setter Property="Foreground" Value="{i:Theme RadioGroupCheckedForeground}" />
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme RadioGroupCheckedForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type i:RadioButtonGroup}" TargetType="{x:Type i:RadioButtonGroup}" BasedOn="{StaticResource {x:Type ItemsControl}}">
        <Setter Property="BorderBrush" Value="{i:Theme RadioButtonBorder}"/>
        <Setter Property="Border.CornerRadius" Value="4"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{i:Theme RadioButtonForeground}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource {x:Static i:RadioButtonGroup.ItemContainerStyleKey}}"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->
</ResourceDictionary>
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Behavior="clr-namespace:Ion.Behavior"
    xmlns:Collect0="clr-namespace:Ion.Collect;assembly=Ion"
    xmlns:Core="clr-namespace:Ion.Core;assembly=Ion"
    xmlns:Data="clr-namespace:Ion.Data"
    xmlns:Ion0="clr-namespace:Ion;assembly=Ion"
    xmlns:Ion1="clr-namespace:Ion"
    xmlns:Reflect="clr-namespace:Ion.Reflect"
    xmlns:Reflect0="clr-namespace:Ion.Reflect;assembly=Ion"
    xmlns:Reflection1="clr-namespace:System.Reflection;assembly=mscorlib"
    xmlns:System1="clr-namespace:System;assembly=mscorlib"
    xmlns:Text="clr-namespace:Ion.Text;assembly=Ion">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Button}"/>
        <ResourceDictionary Source="{i:Style Key=ComboBox}"/>
        <ResourceDictionary Source="{i:Style Key=Constants}"/>
        <ResourceDictionary Source="{i:Style Key=Control}"/>
        <ResourceDictionary Source="{i:Style Key=GroupItem}"/>
        <ResourceDictionary Source="{i:Style Key=Menu}"/>
        <ResourceDictionary Source="{i:Style Key=PasswordBox}"/>
        <ResourceDictionary Source="{i:Style Key=TabControl}"/>
        <ResourceDictionary Source="{i:Style Key=TextBlock}"/>
        <ResourceDictionary Source="{i:Style Key=TextBox}"/>
        <ResourceDictionary Source="{i:Style Key=ToolBar}"/>
        <ResourceDictionary Source="{i:Style Key=Validation}"/>
    </ResourceDictionary.MergedDictionaries>
    <!--#region Constant -->

    <GridLength x:Key="{x:Static i:ObjectControlKey.ColumnWidthName}">3*</GridLength>

    <GridLength x:Key="{x:Static i:ObjectControlKey.ColumnWidthValue}">7*</GridLength>

    <System1:Double x:Key="{x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}">360.0</System1:Double>

    <System1:Double x:Key="{x:Static i:ObjectControlKey.ModelPlaceholderOpacity}">0.5</System1:Double>

    <System1:Double x:Key="{x:Static i:ObjectControlKey.ModelTextLeftOpacity}">0.75</System1:Double>

    <System1:Double x:Key="{x:Static i:ObjectControlKey.ModelTextRightOpacity}">0.75</System1:Double>

    <Thickness x:Key="{x:Static i:ObjectControlKey.ObjectMargin}">16,0,0,0</Thickness>

    <!--#endregion Constant-->

    <!--#region Style -->

    <Style x:Key="{x:Static i:ObjectControlKey.StyleComboBox}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="IsEnabled" Value="{i:Bind Style[CanEdit]}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"/>
                    <Setter Property="i:XToolTip.Header" Value="{Data:MultiBindName}"/>
                    <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind}"/>
                    <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                    <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
                    <Setter Property="ToolTip" Value="{i:Bind}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock x:Name="TextBlock"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Ancestor DataContext.Style[NameLocalize], ComboBox}" Value="True">
                            <Setter TargetName="TextBlock" Property="Text" Value="{Data:MultiBindLocalize {x:Type Data:ConvertAttributeName}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Ancestor DataContext.Style[NameLocalize], ComboBox}" Value="False">
                            <Setter TargetName="TextBlock" Property="Text" Value="{i:Bind Convert={x:Type Data:ConvertAttributeName}}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Static i:ObjectControlKey.StyleGroupHorizontal}" TargetType="GroupItem">
        <Setter Property="Template" Value="{DynamicResource {x:Static i:ObjectControlKey.GroupTemplateHorizontal}}"/>
    </Style>

    <Style x:Key="{x:Static i:ObjectControlKey.StyleGroupVertical}" TargetType="GroupItem">
        <Setter Property="Template" Value="{DynamicResource {x:Static i:ObjectControlKey.GroupTemplateVertical}}"/>
    </Style>

    <Style x:Key="{x:Static i:ObjectControlKey.StyleItem}" TargetType="{x:Type i:MemberControlItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="i:XElement.FadeIn" Value="True"/>
        <Setter Property="i:XElement.FadeOut" Value="True"/>
        <Setter Property="Padding" Value="{i:Constant Key=ThickSmall}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type i:MemberControlItem}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <Grid
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <Control Style="{StaticResource {x:Static i:XElement.FocusVisualStyleKey}}"
                                Visibility="{i:Bind IsSelected, Convert=Data:ConvertBooleanToVisibility}"/>
                            <ContentPresenter ContentSource="Content"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Visibility" Value="{i:MemberVisibilityBinding}"/>
    </Style>

    <Style x:Key="{x:Static i:ObjectControlKey.StyleItemHorizontal}" TargetType="{x:Type i:MemberControlItem}" BasedOn="{StaticResource {x:Static i:ObjectControlKey.StyleItem}}">
        <Setter Property="Margin" Value="{i:Constant Key=ThickLeft}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                <Setter Property="Margin" Value="0"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Static i:ObjectControlKey.StyleItemVertical}" TargetType="{x:Type i:MemberControlItem}" BasedOn="{StaticResource {x:Static i:ObjectControlKey.StyleItem}}">
        <!--<Setter Property="Margin" Value="{i:Constant Key=ThickUp}"/>-->
        <Style.Triggers>
            <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                <Setter Property="Margin" Value="0"/>
            </DataTrigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="{i:Theme DataGridRowEvenBackground}"/>
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{i:Theme DataGridRowOddBackground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion Style-->
    
    <!--#region ObjectControl -->

    <!-- Description -->

    <Style x:Key="{x:Static i:ObjectControlKey.DescriptionHorizontalBorderStyle}" TargetType="Border">
        <Setter Property="Background" Value="{i:Theme MemberGridDescriptionBackground}"/>
        <Setter Property="BorderBrush" Value="{i:Theme MemberGridDescriptionBorder}"/>
        <Setter Property="BorderThickness" Value="{i:Constant Key=ThickSmallerLeft}"/>
        <Setter Property="MinWidth" Value="36"/>
        <Setter Property="TextElement.Foreground" Value="{i:Theme Text}"/>
        <Setter Property="Padding" Value="{i:Constant Key=Thick}"/>
    </Style>

    <Style x:Key="{x:Static i:ObjectControlKey.DescriptionHorizontalSplitterStyle}" TargetType="GridSplitter">
        <Setter Property="Background" Value="{i:Theme GridSplitterBackground}"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="ResizeDirection" Value="Columns" />
        <Setter Property="Width" Value="4"/>
    </Style>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.DescriptionHorizontalTemplate}">
        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,Auto,Auto">
            <i:ImageElement Source="{Data:MultiBindMemberImage Type=Image}" 
                Margin="{i:Constant Key=ThickRight}" 
                Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
            <TextBlock Text="{Data:MultiBindMemberName}"
                Margin="{i:Constant Key=ThickRight}" 
                TextTrimming="CharacterEllipsis"
                ToolTip="{i:Bind Text, From=Self}"/>
            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelDescription}}"/>
        </Grid>
    </DataTemplate>

    <Style x:Key="{x:Static i:ObjectControlKey.DescriptionVerticalBorderStyle}" TargetType="Border">
        <Setter Property="Background" Value="{i:Theme MemberGridDescriptionBackground}"/>
        <Setter Property="BorderBrush" Value="{i:Theme MemberGridDescriptionBorder}"/>
        <Setter Property="BorderThickness" Value="{i:Constant Key=ThickSmallerUp}"/>
        <Setter Property="MinHeight" Value="36"/>
        <Setter Property="TextElement.Foreground" Value="{i:Theme Text}"/>
        <Setter Property="Padding" Value="{i:Constant Key=Thick}"/>
    </Style>

    <Style x:Key="{x:Static i:ObjectControlKey.DescriptionVerticalSplitterStyle}" TargetType="GridSplitter">
        <Setter Property="Background" Value="{i:Theme GridSplitterBackground}"/>
        <Setter Property="Height" Value="4"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext" />
        <Setter Property="ResizeDirection" Value="Rows" />
        <Setter Property="Width" Value="Auto"/>
    </Style>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.DescriptionVerticalTemplate}">
        <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,Auto">
            <i:BottomBorder Margin="{i:Constant Key=ThickDown}" Padding="{i:Constant Key=ThickDown}">
                <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="*,Auto,Auto,*"
                    i:XPanel.Spacing="{i:Constant Key=ThickRight}">
                    <i:DotControl Foreground="{i:Theme Key=Text}"/>
                    <!--
                    <i:ImageElement Source="{Data:MultiBindMemberImage Type=Image}" 
                        Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
                    -->
                    <TextBlock Text="{Data:MultiBindMemberName}"
                        TextTrimming="CharacterEllipsis"
                        ToolTip="{i:Bind Text, From=Self}"/>
                    <i:DotControl Foreground="{i:Theme Key=Text}"/>
                </Grid>
            </i:BottomBorder>
            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelDescription}}"/>
        </Grid>
    </DataTemplate>

    <!-- Template -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.TemplateHorizontal}">
        <Grid DataContext="{Data:Ancestor {x:Type i:ObjectControl}}" i:XGrid.AutoColumns="True">
            <Grid.Resources>
                <Data:Reference x:Key="Control" 
                    Data="{i:Bind}"/>
                <Data:Reference x:Key="Model" 
                    Data="{i:Bind Path=(i:XObjectControl.SourceModel)}"/>
            </Grid.Resources>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="{i:Bind DescriptionLength, Mode=TwoWay}"/>
            </Grid.ColumnDefinitions>
            <i:ValueElement Content="{i:Bind Data, Source={StaticResource Model}}"
                Margin="{i:Bind Data.Padding, Source={StaticResource Control}}"/>
            <GridSplitter Style="{DynamicResource {x:Static i:ObjectControlKey.DescriptionHorizontalSplitterStyle}}">
                <GridSplitter.Visibility>
                    <Data:MultiBindTrue For="All" Result="Visibility">
                        <i:Bind Path="DescriptionResize"/>
                        <i:Bind Path="DescriptionVisibility"/>
                        <i:Equal Path="SelectedMember" Invert="True"/>
                    </Data:MultiBindTrue>
                </GridSplitter.Visibility>
            </GridSplitter>
            <Border Style="{DynamicResource {x:Static i:ObjectControlKey.DescriptionHorizontalBorderStyle}}">
                <Border.Visibility>
                    <Data:MultiBindTrue For="All" Result="Visibility">
                        <i:Bind Path="DescriptionVisibility"/>
                        <i:Equal Path="SelectedMember" Invert="True"/>
                    </Data:MultiBindTrue>
                </Border.Visibility>
                <i:Display Content="{i:Bind SelectedMember}"
                    ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.DescriptionHorizontalTemplate}}"/>
            </Border>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.TemplateVertical}">
        <Grid DataContext="{Data:Ancestor {x:Type i:ObjectControl}}" i:XGrid.AutoRows="True">
            <Grid.Resources>
                <Data:Reference x:Key="Control" 
                    Data="{i:Bind}"/>
                <Data:Reference x:Key="Model" 
                    Data="{i:Bind Path=(i:XObjectControl.SourceModel)}"/>
            </Grid.Resources>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="{i:Bind DescriptionLength, Mode=TwoWay}"/>
            </Grid.RowDefinitions>
            <i:ValueElement Content="{i:Bind Data, Source={StaticResource Model}}"
                Margin="{i:Bind Data.Padding, Source={StaticResource Control}}"/>
            <GridSplitter Style="{DynamicResource {x:Static i:ObjectControlKey.DescriptionVerticalSplitterStyle}}">
                <GridSplitter.Visibility>
                    <Data:MultiBindTrue For="All" Result="Visibility">
                        <i:Bind Path="DescriptionResize"/>
                        <i:Bind Path="DescriptionVisibility"/>
                        <i:Equal Path="SelectedMember" Invert="True"/>
                    </Data:MultiBindTrue>
                </GridSplitter.Visibility>
            </GridSplitter>
            <Border Style="{DynamicResource {x:Static i:ObjectControlKey.DescriptionVerticalBorderStyle}}">
                <Border.Visibility>
                    <Data:MultiBindTrue For="All" Result="Visibility">
                        <i:Bind Path="DescriptionVisibility"/>
                        <i:Equal Path="SelectedMember" Invert="True"/>
                    </Data:MultiBindTrue>
                </Border.Visibility>
                <i:Display Content="{i:Bind SelectedMember}"
                    ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.DescriptionVerticalTemplate}}"/>
            </Border>
        </Grid>
    </DataTemplate>

    <ControlTemplate x:Key="{x:Static i:ObjectControlKey.Template}" TargetType="{x:Type i:ObjectControl}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding Border.CornerRadius}">
            <i:Display Content="{i:Bind From=TemplatedParent, Path=(i:XObjectControl.SourceModel)}"
                i:Display.Condition="{i:Equal Orientation, From=TemplatedParent, Value={x:Static Orientation.Horizontal}}"
                i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.TemplateHorizontal}}"
                i:Display.DefaultTemplate="{DynamicResource {x:Static i:ObjectControlKey.TemplateVertical}}">
            </i:Display>
        </Border>
    </ControlTemplate>

    <!-- Style -->

    <Style x:Key="{x:Type i:ObjectControl}" TargetType="{x:Type i:ObjectControl}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{i:Theme Border}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{i:Theme Text}"/>
        <Setter Property="Template" Value="{DynamicResource {x:Static i:ObjectControlKey.Template}}"/>
    </Style>

    <!--#endregion ObjectControl-->

    <!--#region ObjectControlKey -->

    <!-- Group -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.GroupButton}">
        <i:ImageToggleButton Source="{i:Image Key=Group}"
            ToolTip="{i:Text Group}">
            <i:ImageToggleButton.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:ImageToggleButton.Resources>
            <i:ImageToggleButton.Menu>
                <ContextMenu
                    i:XContextMenu.Header="{i:Text Group}" 
                    i:XContextMenu.HeaderIcon="{i:Image Key=Group}">
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Header" Value="{Data:MultiBindLocalize}"/>
                            <Setter Property="Icon" Value="{i:Bind}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="i:XMenuItem.Enum" Value="{i:Bind}"/>
                            <Setter Property="i:XMenuItem.IconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                            <Setter Property="StaysOpenOnClick" Value="True"/>
                            <Setter Property="ToolTip" Value="{Data:MultiBindDescription}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Reflect0:MemberGroupName}">
                                    <Setter Property="i:XMenuItem.EnumSource" Value="{i:Bind Data.Members.GroupName, Mode=TwoWay, Source={StaticResource Model}}"/>
                                    <Setter Property="i:XMenuItem.GroupName" Value="0"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Collect0:GroupDirection}">
                                    <Setter Property="i:XMenuItem.EnumSource" Value="{i:Bind Data.Members.GroupDirection, Mode=TwoWay, Source={StaticResource Model}}"/>
                                    <Setter Property="i:XMenuItem.GroupName" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer Collection="{i:Enumerate Reflect0:GroupName}"/>
                            <Separator/>
                            <CollectionContainer Collection="{i:Enumerate Data0:GroupDirection}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </i:ImageToggleButton.Menu>
        </i:ImageToggleButton>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.GroupPattern}">
        <i:DotControl Foreground="{i:Theme Key=Text}" Margin="{i:Constant Key=ThickLeft}" Type="Dot1"/>
    </DataTemplate>

    <GroupStyle x:Key="{x:Static i:ObjectControlKey.GroupStyleHorizontal}" 
        ContainerStyle="{StaticResource {x:Static i:ObjectControlKey.StyleGroupHorizontal}}">
        <GroupStyle.Panel>
            <ItemsPanelTemplate>
                <StackPanel Orientation="Horizontal"/>
            </ItemsPanelTemplate>
        </GroupStyle.Panel>
    </GroupStyle>

    <GroupStyle x:Key="{x:Static i:ObjectControlKey.GroupStyleVertical}"
        ContainerStyle="{StaticResource {x:Static i:ObjectControlKey.StyleGroupVertical}}">
        <GroupStyle.Panel>
            <ItemsPanelTemplate>
                <StackPanel Orientation="Vertical"/>
            </ItemsPanelTemplate>
        </GroupStyle.Panel>
    </GroupStyle>
    
    <ControlTemplate x:Key="{x:Static i:ObjectControlKey.GroupTemplateHorizontal}" TargetType="{x:Type GroupItem}">
        <StackPanel Orientation="Horizontal">
            <e:Interaction.Behaviors>
                <Behavior:MemberGroupVisibilityBehavior Items="{i:Bind Items}"/>
            </e:Interaction.Behaviors>
            <i:LineElement Orientation="Vertical" Margin="{i:Constant Key=Thick}"
                Visibility="{i:Equal From=PreviousData, Result=Visibility, Value={x:Null}}"/>
            <i:MemberControl ItemsSource="{i:Bind Items}" Orientation="Horizontal"
                ItemContainerStyle="{i:Bind ItemContainerStyle, 
                    From=FindAncestor, FromType={x:Type i:IMemberControl}}"
                ItemsPanel="{i:Bind ItemsPanel, 
                    From=FindAncestor, FromType={x:Type i:IMemberControl}}"
                ItemTemplate="{i:Bind ItemTemplate, 
                    From=FindAncestor, FromType={x:Type i:IMemberControl}}"/>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static i:ObjectControlKey.GroupTemplateVertical}" TargetType="{x:Type GroupItem}">
        <Expander HorizontalAlignment="Stretch"
            IsExpanded="True" Padding="0">
            <Expander.Header>
                <i:Display Content="{i:Bind}">
                    <i:Display.ContentTemplate>
                        <DataTemplate>
                            <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,Auto,*"
                                Margin="5,0">
                                <!-- NAME -->
                                <TextBlock x:Name="TextBlock"
                                    FontFamily="{i:Bind GroupFontFamily, AppSource=Data}"
                                    Foreground="{i:Theme AccentLight}"
                                    i:XTextBlock.FontScale="{i:Bind GroupFontScale, AppSource=Data}"
                                    i:XTextBlock.FontScaleOrigin="{i:Bind GroupFontSize, AppSource=Data}"
                                    i:XTextBlock.SplitText="{i:Bind Name}">
                                    <i:XTextBlock.SplitTextStyle>
                                        <Style TargetType="Run">
                                            <Setter Property="Background" Value="{i:Theme Accent}"/>
                                            <Setter Property="Foreground" Value="{i:Theme AccentForeground}"/>
                                        </Style>
                                    </i:XTextBlock.SplitTextStyle>
                                </TextBlock>
                                <!-- COUNT -->
                                <TextBlock
                                    FontFamily="{i:Bind GroupFontFamily, AppSource=Data}"
                                    Foreground="{i:Theme Text}"
                                    i:XTextBlock.FontScale="{i:Bind GroupFontScale, AppSource=Data}"
                                    i:XTextBlock.FontScaleOrigin="{i:Bind GroupFontSize, AppSource=Data}"
                                    Margin="{i:Constant Key=ThickSmallerLeft}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:MemberGroupCountBehavior Format=" ({0})"  Items="{i:Bind Items}" 
                                            Tab="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).Members.SelectedTab}"/>
                                    </e:Interaction.Behaviors>
                                </TextBlock>
                                <!-- PATTERN -->
                                <i:Display ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.GroupPattern}}"/>
                            </Grid>
                            <DataTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Ancestor i:ValueElement}" Value="{x:Null}"/>
                                        <Condition Binding="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).SearchName}" Value="Group"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextKey" Value="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).Search}" />
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextCase" Value="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).SearchOptions.Case}" />
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextCondition" Value="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).SearchOptions.Condition}" />
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextWord" Value="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).SearchOptions.Word}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Ancestor i:ValueElement}" Value="{x:Null}"/>
                                        <Condition Binding="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).SearchName}" Value="Name"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextKey" Value="{x:Null}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{i:Equal From=FindAncestor, FromType=i:ValueElement}" Value="False"/>
                                        <Condition Binding="{i:Bind From=FindAncestor, FromType=i:ValueElement, Path=Content.SearchName}" Value="Group"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextKey" Value="{i:Bind From=FindAncestor, FromType=i:ValueElement, Path=Content.Search}" />
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextCase" Value="{i:Bind From=FindAncestor, FromType=i:ValueElement, Path=Content.SearchOptions.Case}" />
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextCondition" Value="{i:Bind From=FindAncestor, FromType=i:ValueElement, Path=Content.SearchOptions.Condition}" />
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextWord" Value="{i:Bind From=FindAncestor, FromType=i:ValueElement, Path=Content.SearchOptions.Word}" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{i:Equal From=FindAncestor, FromType=i:ValueElement}" Value="False"/>
                                        <Condition Binding="{i:Bind From=FindAncestor, FromType=i:ValueElement, Path=Content.SearchName}" Value="Name"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextKey" Value="{x:Null}" />
                                </MultiDataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </i:Display.ContentTemplate>
                </i:Display>
            </Expander.Header>
            <e:Interaction.Behaviors>
                <Behavior:MemberGroupVisibilityBehavior Items="{i:Bind Items}"
                    Tab="{Data:Ancestor i:ObjectControl, Path=(i:XObjectControl.SourceModel).Members.SelectedTab}"/>
            </e:Interaction.Behaviors>
            <ItemsPresenter/>
        </Expander>
    </ControlTemplate>

    <!-- Image -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.Image}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Template, Value={x:Null}}">
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Mask, Value=True}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <i:ImageElement x:Name="Image" Foreground="{i:Bind Color, Convert=Data:ConvertToSolidColorBrush}">
                                    <i:ImageElement.Source>
                                        <Data:MultiBind ConverterName="Image">
                                            <Binding Path="Name"/>
                                            <Binding Path="NameAssembly"/>
                                        </Data:MultiBind>
                                    </i:ImageElement.Source>
                                    <e:Interaction.Behaviors>
                                        <Behavior:DynamicResourceBehavior Property="{x:Static i:ImageElement.ForegroundProperty}">
                                            <Behavior:DynamicResourceBehavior.Key>
                                                <Data:MultiBind ConverterName="FieldValueStatic">
                                                    <Binding Path="Color"/>
                                                    <Binding Path="ColorType"/>
                                                </Data:MultiBind>
                                            </Behavior:DynamicResourceBehavior.Key>
                                        </Behavior:DynamicResourceBehavior>
                                    </e:Interaction.Behaviors>
                                </i:ImageElement>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type ComboBoxItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type ComboBoxItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type ListBoxItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type ListBoxItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type MenuItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type MenuItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type TabItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type TabItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type TreeViewItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type TreeViewItem}}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                        <i:Display.DefaultTemplate>
                            <DataTemplate>
                                <Image RenderOptions.BitmapScalingMode="HighQuality">
                                    <Image.Source>
                                        <Data:MultiBind ConverterName="Image">
                                            <Binding Path="Name"/>
                                            <Binding Path="NameAssembly"/>
                                        </Data:MultiBind>
                                    </Image.Source>
                                </Image>
                            </DataTemplate>
                        </i:Display.DefaultTemplate>
                    </i:Display>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}">
                        <e:Interaction.Behaviors>
                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                <Behavior:DynamicResourceBehavior.Key>
                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                        <Binding Path="Template"/>
                                        <Binding Path="TemplateType"/>
                                    </Data:MultiBind>
                                </Behavior:DynamicResourceBehavior.Key>
                            </Behavior:DynamicResourceBehavior>
                        </e:Interaction.Behaviors>
                    </i:Display>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <!-- Load -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.LoadHorizontal}">
        <i:ProgressLine/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.LoadVertical}">
        <i:ProgressCircle HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </DataTemplate>

    <!-- Member -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.Member}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[Orientation], Value={x:Static Ion1:Orient.Horizontal}}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberHorizontal}}"
            i:Display.DefaultTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberVertical}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberHorizontal}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Bind Style[NameHide]}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberWithoutName}}">
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <Grid i:XGrid.AutoColumns="True" i:XPanel.VerticalContentAlignment="Top">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="{StaticResource {x:Static i:ObjectControlKey.ColumnWidthName}}"/>
                            <ColumnDefinition Width="{StaticResource {x:Static i:ObjectControlKey.ColumnWidthValue}}"/>
                        </Grid.ColumnDefinitions>
                        <i:NameElement Content="{i:Bind}"/>
                        <i:ValueElement Content="{i:Bind}"/>
                    </Grid>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberHorizontalAuto}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Bind Style[NameHide]}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberWithoutName}}">
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:ValueElement Content="{i:Bind}" Orientation="Horizontal"/>
                    <!--
                    <i:BinaryPanel Orientation="Horizontal
                        Pin="{i:Bind Style[NamePin]}" 
                        Spacing="{i:Constant Key=DoubleSmall}"
                        VerticalContentAlignment="Center">
                        <i:BinaryPanel.Content1>
                            <i:NameElement Content="{i:Bind}"/>
                        </i:BinaryPanel.Content1>
                        <i:BinaryPanel.Content2>
                            <i:ValueElement Content="{i:Bind}" Orientation="Horizontal"/>
                        </i:BinaryPanel.Content2>
                    </i:BinaryPanel>
                    -->
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberVertical}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Bind Style[NameHide]}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberWithoutName}}">
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <Expander IsExpanded="True">
                        <Expander.Header>
                            <i:NameElement Content="{i:Bind}"/>
                        </Expander.Header>
                        <i:ValueElement Content="{i:Bind}"/>
                    </Expander>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberWithoutName}">
        <i:ValueElement Content="{i:Bind}"/>
    </DataTemplate>

    <!-- Member (Pin) -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberPin}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}, Value={x:Static Ion1:Orient.Horizontal}}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberPinHorizontal}}"
            i:Display.DefaultTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberPinVertical}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberPinHorizontal}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Bind Style[NameHide]}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberWithoutName}}">
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:ValueElement Content="{i:Bind}" Orientation="Horizontal"/>
                    <!--
                    <i:BinaryPanel Orientation="Horizontal"
                        Pin="{i:Bind Style[NamePin]}" 
                        Spacing="{i:Constant Key=DoubleSmall}"
                        VerticalContentAlignment="Center">
                        <i:BinaryPanel.Content1>
                            <i:NameElement Content="{i:Bind}"/>
                        </i:BinaryPanel.Content1>
                        <i:BinaryPanel.Content2>
                        </i:BinaryPanel.Content2>
                    </i:BinaryPanel>
                    -->
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberPinVertical}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Bind Style[NameHide]}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberWithoutName}}">
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:ValueElement Content="{i:Bind}"/>
                    <!--
                    <i:BinaryPanel Orientation="{i:Bind Style[Orientation]}"
                        Pin="{i:Bind Style[NamePin]}" 
                        Spacing="{i:Constant Key=DoubleSmall}">
                        <i:BinaryPanel.Content1>
                            <i:NameElement Content="{i:Bind}"/>
                        </i:BinaryPanel.Content1>
                        <i:BinaryPanel.Content2>
                        </i:BinaryPanel.Content2>
                    </i:BinaryPanel>
                    -->
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <!-- Member (Other) -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberCaption}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[CaptionTemplate], Value={x:Null}}">
            <i:Display.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:Display.Resources>
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <Grid i:XGrid.AutoColumns="True"  i:XGrid.Columns="Auto,*">
                        <i:ImageElement Source="{i:Bind Style[CaptionIcon]}"
                            Margin="{i:Constant Key=ThickRight}"
                            Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
                        <i:Display Content="{i:Bind Style[Caption]}" 
                            i:Display.TemplateKey="{i:Bind Data.Style[CaptionFormat], Source={StaticResource Model}}"
                            i:Display.TemplateSelector="{DynamicResource {x:Static i:ObjectControlKey.TextSelector}}"/>
                    </Grid>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind Value}">
                        <e:Interaction.Behaviors>
                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                <Behavior:DynamicResourceBehavior.Key>
                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                        <Binding Path="Data.Style[CaptionTemplate]" Source="{StaticResource Model}"/>
                                        <Binding Path="Data.Style[CaptionTemplateType]" Source="{StaticResource Model}"/>
                                    </Data:MultiBind>
                                </Behavior:DynamicResourceBehavior.Key>
                            </Behavior:DynamicResourceBehavior>
                        </e:Interaction.Behaviors>
                    </i:Display>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberHeader}">
        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,Auto">
            <i:ImageElement Source="{Data:MultiBindMemberImage Value, Type=Image}" 
                Foreground="{i:Theme Key=Text}"
                Margin="{i:Constant Key=ThickRight}"
                Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
            <TextBlock Text="{Data:MultiBindMemberName Value}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberPath}">
        <ItemsControl ItemsSource="{i:Bind Path}">
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="{x:Type FrameworkElement}">
                    <Setter Property="Margin" Value="{i:Constant Key=ThickLeft}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                            <Setter Property="Margin" Value="0"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel 
                        i:XPanel.Spacing="{i:Constant Key=ThickRight}"
                        i:XPanel.VerticalContentAlignment="Center"
                        Orientation="Horizontal">
                        <i:ImageElement Source="{i:Image Key=TriangleRight}"
                            Foreground="{i:Theme Key=Text}" 
                            Visibility="{i:Equal From=PreviousData, Invert=True, Value={x:Null}}"/>
                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                        <TextBlock Text="{Data:MultiBindName}"/>
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.MemberToolTip}">
        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelDescription}}"/>
    </DataTemplate>
    
    <!-- Name -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.Name}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Template, Value={x:Null}}">
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Mask, Value=True}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <i:ImageElement x:Name="Image" Foreground="{i:Bind Color, Convert=Data:ConvertToSolidColorBrush}">
                                    <i:ImageElement.Source>
                                        <Data:MultiBind ConverterName="Image">
                                            <Binding Path="Name"/>
                                            <Binding Path="NameAssembly"/>
                                        </Data:MultiBind>
                                    </i:ImageElement.Source>
                                    <e:Interaction.Behaviors>
                                        <Behavior:DynamicResourceBehavior Property="{x:Static i:ImageElement.ForegroundProperty}">
                                            <Behavior:DynamicResourceBehavior.Key>
                                                <Data:MultiBind ConverterName="FieldValueStatic">
                                                    <Binding Path="Color"/>
                                                    <Binding Path="ColorType"/>
                                                </Data:MultiBind>
                                            </Behavior:DynamicResourceBehavior.Key>
                                        </Behavior:DynamicResourceBehavior>
                                    </e:Interaction.Behaviors>
                                </i:ImageElement>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type ComboBoxItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type ComboBoxItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type ListBoxItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type ListBoxItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type MenuItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type MenuItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type TabItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type TabItem}}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Equal From=FindAncestor, FromType={x:Type TreeViewItem}, Value={x:Null}}" Value="False">
                                        <Setter TargetName="Image" Property="Foreground" Value="{i:Bind Foreground, From=FindAncestor, FromType={x:Type TreeViewItem}}"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                        <i:Display.DefaultTemplate>
                            <DataTemplate>
                                <Image RenderOptions.BitmapScalingMode="HighQuality">
                                    <Image.Source>
                                        <Data:MultiBind ConverterName="Image">
                                            <Binding Path="Name"/>
                                            <Binding Path="NameAssembly"/>
                                        </Data:MultiBind>
                                    </Image.Source>
                                </Image>
                            </DataTemplate>
                        </i:Display.DefaultTemplate>
                    </i:Display>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}">
                        <e:Interaction.Behaviors>
                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                <Behavior:DynamicResourceBehavior.Key>
                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                        <Binding Path="Template"/>
                                        <Binding Path="TemplateType"/>
                                    </Data:MultiBind>
                                </Behavior:DynamicResourceBehavior.Key>
                            </Behavior:DynamicResourceBehavior>
                        </e:Interaction.Behaviors>
                    </i:Display>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <!-- Object -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ObjectDescription}">
        <StackPanel>
            <i:Display x:Name="Content" Content="{Data:MultiBindDescription}" 
                i:Display.TemplateKey="{i:Bind Convert=Data:ConvertAttributeDescriptionFormat}"
                i:Display.TemplateSelector="{DynamicResource {x:Static i:ObjectControlKey.TextSelector}}"/>
            <i:Display Content="{i:Bind Convert=Data:ConvertObjectToType, ConverterParameter=1}" 
                i:Display.Condition="{i:Equal Convert=Data:ConvertObjectToType, ConverterParameter=1, Invert=True}">
                <i:Display.ConditionalTemplate>
                    <DataTemplate>
                        <i:TopBorder Margin="{i:Constant Key=ThickUp}" Padding="{i:Constant Key=Thick}">
                            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectHeader}}"/>
                        </i:TopBorder>
                    </DataTemplate>
                </i:Display.ConditionalTemplate>
            </i:Display>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:MultiBindDescription}" Value="{i:String Key=Empty}">
                <Setter TargetName="Content" Property="Content" Value="{i:Text NoDescription}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:MultiBindDescription}" Value="{x:Null}">
                <Setter TargetName="Content" Property="Content" Value="{i:Text NoDescription}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ObjectHeader}">
        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,Auto">
            <i:Display Content="{i:Bind Value, Convert=Data:ConvertToImageAttribute}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Image}}"
                Margin="{i:Constant Key=ThickRight}"
                Visibility="{i:Bind Convert=Data:ConvertObjectToVisibility}"/>
            <TextBlock Text="{Data:MultiBindName Value}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ObjectImage}">
        <i:Display Content="{i:Bind Convert=Data:ConvertToImageAttribute}" 
            ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Image}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ObjectToolTip}">
        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectDescription}}"/>
    </DataTemplate>

    <!-- Model -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelDescription}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[DescriptionTemplate], Value={x:Null}}">
            <i:Display.Resources>
                <Data:Reference x:Key="Member" Data="{i:Bind}"/>
            </i:Display.Resources>
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,Auto">
                        <i:Display x:Name="Content" Content="{Data:MultiBindMemberDescription}" 
                            i:Display.TemplateKey="{i:Bind Data.Style[DescriptionFormat], Source={StaticResource Member}}"
                            i:Display.TemplateSelector="{DynamicResource {x:Static i:ObjectControlKey.TextSelector}}"/>
                        <i:Display Content="{i:Bind}" i:Display.Condition="{Data:Is Type={x:Type Reflect:Member}}">
                            <i:Display.ConditionalTemplate>
                                <DataTemplate>
                                    <i:TopBorder Margin="{i:Constant Key=ThickUp}" Padding="{i:Constant Key=Thick}">
                                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberPath}}"/>
                                    </i:TopBorder>
                                </DataTemplate>
                            </i:Display.ConditionalTemplate>
                        </i:Display>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:MultiBindMemberDescription}" Value="{i:String Key=Empty}">
                            <Setter TargetName="Content" Property="Content" Value="{i:Text NoDescription}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:MultiBindMemberDescription}" Value="{x:Null}">
                            <Setter TargetName="Content" Property="Content" Value="{i:Text NoDescription}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}">
                        <e:Interaction.Behaviors>
                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                <Behavior:DynamicResourceBehavior.Key>
                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                        <Binding Path="Style[DescriptionTemplate]"/>
                                        <Binding Path="Style[DescriptionTemplateType]"/>
                                    </Data:MultiBind>
                                </Behavior:DynamicResourceBehavior.Key>
                            </Behavior:DynamicResourceBehavior>
                        </e:Interaction.Behaviors>
                    </i:Display>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelFilter}">
        <i:ImageToggleButton Source="{i:Image Key=Filter}"
            ToolTip="{i:Text Filter}">
            <i:ImageToggleButton.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:ImageToggleButton.Resources>
            <i:ImageToggleButton.Menu>
                <ContextMenu
                    i:XContextMenu.Header="{l:Loc Filter}" 
                    i:XContextMenu.HeaderIcon="{i:Image Key=Filter}">
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="CommandParameter" Value="{i:Bind}"/>
                            <Setter Property="Header" Value="{Data:MultiBindLocalize}"/>
                            <Setter Property="Icon" Value="{i:Bind}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="i:XMenuItem.EnumFlag" Value="{i:Bind}"/>
                            <Setter Property="i:XMenuItem.IconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                            <Setter Property="StaysOpenOnClick" Value="True"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Reflect0:Access}">
                                    <Setter Property="i:XMenuItem.EnumFlagSource" Value="{i:Bind Data.Style[FilterAccess], Mode=TwoWay, Source={StaticResource Model}}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Reflect0:MemberInstanceType}">
                                    <Setter Property="i:XMenuItem.EnumFlagSource" Value="{i:Bind Data.Style[FilterType], Mode=TwoWay, Source={StaticResource Model}}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer Collection="{i:Enumerate Reflect0:Access}"/>
                            <Separator/>
                            <CollectionContainer Collection="{i:Enumerate Reflect0:MemberInstanceType}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </i:ImageToggleButton.Menu>
        </i:ImageToggleButton>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelHeader}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{Data:Is Type=Reflect:Member}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberHeader}}"
            i:Display.DefaultTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectHeader}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelNullIndeterminate}">
        <TextBlock Text="{i:Text Prefix=(, Key=MultipleValues, Suffix=), Case=Lower}"
            FontStyle="Italic"
            HorizontalAlignment="Left"
            Margin="0,5"
            TextTrimming="CharacterEllipsis"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelOption}">
        <i:ImageButton Source="{i:Image Key=TriangleDown}"
            ToolTip="{i:Text Options}">
            <i:ImageButton.Resources>
                <Data:Reference x:Key="Object" 
                    Data="{i:Bind}"/>
                <Data:Reference x:Key="ObjectControl"
                    Data="{i:Bind From=FindAncestor, FromType=i:ObjectControl}"/>
            </i:ImageButton.Resources>
            <i:ImageButton.Menu>
                <ContextMenu DataContext="{i:Bind PlacementTarget.DataContext, From=Self}"
                    i:XContextMenu.Header="{i:Bind}" 
                    i:XContextMenu.HeaderIcon="{x:Null}"
                    i:XContextMenu.HeaderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelHeader}}">
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Data:Is Type=Reflection1:MethodInfo}" Value="True">
                                    <Setter Property="Command" Value="{i:Bind Data.InvokeCommand, Source={StaticResource Object}}"/>
                                    <Setter Property="CommandParameter" Value="{i:Bind}"/>
                                    <Setter Property="Header" Value="{i:Bind Name}"/>
                                    <Setter Property="Icon" Value="{i:Image Key=Method}"/>
                                    <Setter Property="InputGestureText" Value="{i:Bind Convert=Data:ConvertMethodInfoReturnType, ConverterParameter=1}"/>
                                    <Setter Property="i:XToolTip.Header" Value="{Data:MultiBindName}"/>
                                    <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind}"/>
                                    <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                                    <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"/>
                                    <Setter Property="ToolTip" Value="{i:Bind}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Data:Is Type=Core:Namable}" Value="True">
                                    <Setter Property="Header" Value="{i:Bind Name}"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Data:Is Type=System1:Type}" Value="True">
                                    <Setter Property="Header" Value="{i:Bind Convert=Data:ConvertAttributeName}"/>
                                </DataTrigger>
                                <!--
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{i:Bind Data.Style[Template], Source={StaticResource Member}}" Value="{x:Static Ion0:StringStyle.Path}"/>
                                        <Condition Binding="{i:Bind Tag, From=Self}" Value="{x:Null}"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Header" Value="{i:Bind Convert=Data:ConvertFileName}"/>
                                    <Setter Property="Icon" Value="{i:Bind}"/>
                                    <Setter Property="i:XMenuItem.IconTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <i:Thumbnail Path="{i:Bind}"/>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{i:Bind ValueType}" Value="{x:Type Color}"/>
                                        <Condition Binding="{i:Bind Tag, From=Self}" Value="{x:Null}"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Header" Value="{i:Bind}"/>
                                    <Setter Property="HeaderTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <TextBlock>#<Run Text="{i:Bind Convert={x:Type Data:ConvertColorToString}, Way=1}"/></TextBlock>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Icon" Value="{i:Bind}"/>
                                    <Setter Property="i:XMenuItem.IconTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <Ellipse Stroke="Black" StrokeThickness="1" Fill="{i:Bind Convert={x:Type Data:ConvertColorToSolidColorBrush}}" Height="16" Width="16"/>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Is Type=Reflection1:MethodInfo}" Value="False"/>
                                        <Condition Binding="{i:Bind From=Self, Path=Tag}" Value="{x:Null}"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Command" Value="{i:Bind Data.NewCommand, Source={StaticResource ObjectControl}}"/>
                                    <Setter Property="CommandParameter">
                                        <Setter.Value>
                                            <Data:Reference2 First="{i:Bind Data, Source={StaticResource Member}}" Second="{i:Bind}"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                -->
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Data:Is Type=Reflection1:MethodInfo}" Value="True"/>
                                        <Condition Binding="{i:Bind ReturnType.Name}" Value="Void"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="InputGestureText" Value="{i:Bind Convert=Data:ConvertMethodInfoFirstParameterType, ConverterParameter=1}"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <MenuItem Tag="0" Header="{i:Text Edit}"
                                Command="{i:Bind Data.EditCommand, Source={StaticResource Object}}"
                                Icon="{i:Image Key=Pencil}"
                                IsEnabled="{i:Bind Data.Style[Options], Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Option.Edit}, Source={StaticResource Object}}"/>
                            <Separator/>
                            <MenuItem Tag="0" Header="{i:Text Copy}"
                                Command="{i:Bind Data.CopyCommand, Source={StaticResource Object}}"
                                Icon="{i:Image Key=Copy}"
                                IsEnabled="{i:Bind Data.Style[Options], Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Option.Copy}, Source={StaticResource Object}}"/>
                            <MenuItem Tag="0" Header="{i:Text Paste}"
                                Command="{i:Bind Data.PasteCommand, Source={StaticResource Object}}"
                                Icon="{i:Image Key=Paste}"
                                IsEnabled="{i:Bind Data.Style[Options], Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Option.Paste}, Source={StaticResource Object}}"/>
                            <MenuItem Tag="0" Header="{i:Text Replace}"
                                Icon="{i:Image Key=Dot}"
                                IsEnabled="{i:Bind Data.Style[Options], Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Option.Replace}, Source={StaticResource Object}}"
                                Visibility="{i:Equal Data.Style[ReplaceCommand], Invert=True, Result=Visibility, Source={StaticResource Object}}">
                                <MenuItem.Command>
                                    <Data:MultiBind ConverterName="PropertyValue">
                                        <Binding Path="Data.Value" Source="{StaticResource Object}"/>
                                        <Binding Path="Data.Style[ReplaceCommand]" Source="{StaticResource Object}"/>
                                    </Data:MultiBind>
                                </MenuItem.Command>
                            </MenuItem>
                            <MenuItem Tag="0" Header="{i:Text Replace}"
                                Icon="{i:Image Key=Dot}"
                                IsEnabled="{i:Bind Data.Style[Options], Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Option.Replace}, Source={StaticResource Object}}">
                                <CollectionContainer Collection="{i:Bind Data.Style[ReplaceTypes], Convert=Data:ConvertToObjectCollection, Source={StaticResource Object}}"/>
                                <CollectionContainer>
                                    <CollectionContainer.Collection>
                                        <Data:MultiBind ConverterName="PropertyValue">
                                            <Binding Path="Data.Value" Source="{StaticResource Object}"/>
                                            <Binding Path="Data.Style[ReplaceItems]" Source="{StaticResource Object}"/>
                                        </Data:MultiBind>
                                    </CollectionContainer.Collection>
                                </CollectionContainer>
                            </MenuItem>
                            <Separator/>
                            <MenuItem Tag="0" Header="{i:Text Default}"
                                Command="{i:Bind Data.DefaultCommand, Source={StaticResource Object}}"
                                Icon="{i:Image Key=Dot}"/>
                            <MenuItem Tag="0" Header="{i:Text Reset}"
                                Command="{i:Bind Data.ResetCommand, Source={StaticResource Object}}"
                                Icon="{i:Image Key=Reset}"/>
                            <MenuItem Tag="0" Header="{i:Text Revert}"
                                Command="{i:Bind Data.RevertCommand, Source={StaticResource Object}}"
                                Icon="{i:Image Key=Revert}"/>
                            <MenuItem Tag="0" Header="{i:Text Unset}"
                                Command="{i:Bind Data.UnsetCommand, Source={StaticResource Object}}"
                                Icon="{i:Image Key=X}"
                                Visibility="{i:Bind IsEnabled, Convert=Data:ConvertBooleanToVisibility, From=Self}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </i:ImageButton.Menu>
        </i:ImageButton>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelPlaceholder}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[PlaceholderTemplate], Value={x:Null}}">
            <i:Display.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:Display.Resources>
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:Display Content="{Data:MultiBindMemberPlaceholder}"
                        ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Text}}"
                        Opacity="{DynamicResource {x:Static i:ObjectControlKey.ModelPlaceholderOpacity}}"/>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}">
                        <e:Interaction.Behaviors>
                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                <Behavior:DynamicResourceBehavior.Key>
                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                        <Binding Path="Data.Style[PlaceholderTemplate]" Source="{StaticResource Model}"/>
                                        <Binding Path="Data.Style[PlaceholderTemplateType]" Source="{StaticResource Model}"/>
                                    </Data:MultiBind>
                                </Behavior:DynamicResourceBehavior.Key>
                            </Behavior:DynamicResourceBehavior>
                        </e:Interaction.Behaviors>
                    </i:Display>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelRouteBack}">
        <i:ImageButton
            Command="{x:Static i:XObjectControl.BackCommand}"
            CommandTarget="{Data:Ancestor {x:Type i:IObjectControl}}"
            Margin="0,-1,0,0"
            Source="{i:Image Key=ArrowLeftRound}"
            ToolTip="{i:Text Back}"
            Visibility="{i:Bind IsEnabled, Convert=Data:ConvertBooleanToVisibility, From=Self}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelRouteSeparator}">
        <i:ImageElement Margin="0,0,1,0" Source="{i:Image Key=SmallPeriod}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelRoute}">
        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*">
            <i:Display Content="{i:Bind BackCommand}"
                ContentTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelRouteBack}}"/>
            <ToolBar ItemsSource="{i:Bind}" 
                BorderThickness="0"
                Margin="2,0,0,0"
                Padding="0">
                <ToolBar.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ToolBar.ItemsPanel>
                <ToolBar.ItemTemplate>
                    <DataTemplate DataType="{x:Type Reflect:MemberBase}">
                        <Grid i:XGrid.Columns="Auto,Auto" i:XGrid.AutoColumns="True">
                            <i:Display x:Name="Separator" Content="{i:Bind}" 
                                ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelRouteSeparator}}"/>
                            <i:ImageButton x:Name="Button"
                                ButtonVisibility="Collapsed"
                                Command="{x:Static i:XObjectControl.BackCommand}"
                                CommandParameter="{i:Bind}"
                                CommandTarget="{Data:Ancestor {x:Type i:IObjectControl}}"
                                i:XToolTip.Template="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"
                                i:XToolTip.Header="{Data:MultiBindName Value}"
                                i:XToolTip.HeaderIcon="{i:Bind Value}"
                                i:XToolTip.HeaderIconTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"
                                i:XToolTip.MinimumWidth="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"
                                Margin="0,0,1,0"
                                ToolTip="{i:Bind Value}">
                                <i:ImageButton.Menu>
                                    <ContextMenu/>
                                </i:ImageButton.Menu>
                                <StackPanel Orientation="Horizontal">
                                    <i:ImageElement Source="{i:Bind RouteIcon}"
                                        Margin="0,0,5,0"
                                        Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
                                    <TextBlock Text="{i:Bind RouteName}"/>
                                </StackPanel>
                            </i:ImageButton>
                        </Grid>
                        <DataTemplate.Triggers>
                            <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                                <Setter TargetName="Separator" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </ToolBar.ItemTemplate>
            </ToolBar>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelSearch}">
        <TextBox
            Background="Transparent"
            BorderThickness="0"
            i:XTextBox.ClearButtonVisibility="Visible"
            i:XTextBox.EnterButtonVisibility="Visible"
            i:XTextBoxBase.Placeholder="{i:Text Search}"
            Padding="{i:Constant Key=ThickLeftRight}"
            Text="{i:Bind Search, Trigger=PropertyChanged, Way=2}"
            ToolTip="{i:Text Search}">
            <TextBox.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </TextBox.Resources>
            <i:XTextBox.EnterButtonTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind Data.SearchOptions, Source={StaticResource Model}}" 
                        ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.SearchOptions}}"/>
                </DataTemplate>
            </i:XTextBox.EnterButtonTemplate>
            <i:XTextBoxBase.Right>
                <i:DataTemplateList>
                    <DataTemplate>
                        <ComboBox ItemsSource="{i:Enumerate Reflect0:SearchName}"
                            Cursor="Arrow"
                            Margin="{i:Constant Key=ThickLeftRight}"
                            SelectedItem="{i:Bind Data.SearchName, Source={StaticResource Model}, Way=2}"
                            ToolTip="{i:Text Search}">
                            <ComboBox.ItemTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Data:MultiBindLocalize}"/>
                                </DataTemplate>
                            </ComboBox.ItemTemplate>
                        </ComboBox>
                    </DataTemplate>
                </i:DataTemplateList>
            </i:XTextBoxBase.Right>
        </TextBox>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.ModelSort}">
        <i:ImageToggleButton Source="{i:Image Key=Sort}"
            ToolTip="{i:Text Sort}">
            <i:ImageToggleButton.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:ImageToggleButton.Resources>
            <i:ImageToggleButton.Menu>
                <ContextMenu
                    i:XContextMenu.Header="{l:Loc Sort}" 
                    i:XContextMenu.HeaderIcon="{i:Image Key=Sort}">
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="Header" Value="{Data:MultiBindLocalize}"/>
                            <Setter Property="Icon" Value="{i:Bind}"/>
                            <Setter Property="IsCheckable" Value="True"/>
                            <Setter Property="i:XMenuItem.Enum" Value="{i:Bind}"/>
                            <Setter Property="i:XMenuItem.IconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                            <Setter Property="StaysOpenOnClick" Value="True"/>
                            <Setter Property="ToolTip" Value="{Data:MultiBindDescription}"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Reflect0:MemberSortName}">
                                    <Setter Property="i:XMenuItem.EnumSource" Value="{i:Bind Data.Members.SortName, Mode=TwoWay, Source={StaticResource Model}}"/>
                                    <Setter Property="i:XMenuItem.GroupName" Value="0"/>
                                </DataTrigger>
                                <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Collect0:SortDirection}">
                                    <Setter Property="i:XMenuItem.EnumSource" Value="{i:Bind Data.Members.SortDirection, Mode=TwoWay, Source={StaticResource Model}}"/>
                                    <Setter Property="i:XMenuItem.GroupName" Value="1"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer Collection="{i:Enumerate Reflect0:SortName}"/>
                            <Separator/>
                            <CollectionContainer Collection="{i:Enumerate Data0:SortDirection}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </i:ImageToggleButton.Menu>
        </i:ImageToggleButton>
    </DataTemplate>

    <i:DataTemplateList x:Key="{x:Static i:ObjectControlKey.ModelTextLeft}">
        <DataTemplate>
            <i:Display Content="{i:Bind DataContext.Style[LeftText], From=FindAncestor, FromType={x:Type TextBoxBase}}" 
                i:Display.TemplateKey="{i:Bind DataContext.Style[LeftTextFormat], From=FindAncestor, FromType={x:Type TextBoxBase}}"
                i:Display.TemplateSelector="{DynamicResource {x:Static i:ObjectControlKey.TextSelector}}"
                Margin="{i:Constant Key=ThickRight}"
                Opacity="{DynamicResource {x:Static i:ObjectControlKey.ModelTextLeftOpacity}}"
                Visibility="{i:Bind DataContext.Style[LeftText], Convert=Data:ConvertObjectToVisibility, From=FindAncestor, FromType={x:Type TextBoxBase}}"/>
        </DataTemplate>
    </i:DataTemplateList>

    <i:DataTemplateList x:Key="{x:Static i:ObjectControlKey.ModelTextRight}">
        <DataTemplate>
            <i:Display Content="{i:Bind DataContext.Style[RightText], From=FindAncestor, FromType={x:Type TextBoxBase}}" 
                i:Display.TemplateKey="{i:Bind DataContext.Style[RightTextFormat], From=FindAncestor, FromType={x:Type TextBoxBase}}"
                i:Display.TemplateSelector="{DynamicResource {x:Static i:ObjectControlKey.TextSelector}}"
                Margin="{i:Constant Key=ThickLeft}"
                Opacity="{DynamicResource {x:Static i:ObjectControlKey.ModelTextRightOpacity}}"
                Visibility="{i:Bind DataContext.Style[RightText], Convert=Data:ConvertObjectToVisibility, From=FindAncestor, FromType={x:Type TextBoxBase}}"/>
        </DataTemplate>
        <DataTemplate>
            <i:Display ContentTemplate="{DynamicResource {x:Static i:XTextBoxBase.ValidationIconTemplate}}"
                Margin="{i:Constant Key=ThickLeft}"/>
        </DataTemplate>
    </i:DataTemplateList>

    <!-- Tab -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.TabHeader}">
        <StackPanel Orientation="Horizontal">
            <i:ImageElement Source="{i:Bind Image, Convert=Data:ConvertToImageSource}" 
                Margin="{i:Constant Key=ThickRight}"
                Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
            <TextBlock Text="{i:Bind Name}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.TabToolTip}">
        <i:Display Content="{i:Bind Source}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectDescription}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.Tab}">
        <TabControl ItemsSource="{i:Bind Members.Tabs.View}" 
            ItemTemplate="{DynamicResource {x:Static i:ObjectControlKey.TabHeader}}"
            i:XTabControl.ContentVisibility="Collapsed"
            i:XTabControl.OverflowCommand="{i:Bind Members.SelectTabCommand}"
            TabStripPlacement="{i:Bind Style[TabPlacement], Convert=Data:ConvertSideToDock}"
            SelectedIndex="{i:Bind Members.SelectedTabIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
            SelectedItem="{i:Bind Members.SelectedTab, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
            <i:XTabControl.OverflowIconTemplate>
                <DataTemplate DataType="Reflect:MemberTab">
                    <i:ImageElement Source="{i:Bind Image, Convert=Data:ConvertToImageSource}" 
                        Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
                </DataTemplate>
            </i:XTabControl.OverflowIconTemplate>
            <i:XTabControl.OverflowHeaderTemplate>
                <DataTemplate DataType="Reflect:MemberTab">
                    <TextBlock Text="{i:Bind Name}"/>
                </DataTemplate>
            </i:XTabControl.OverflowHeaderTemplate>
            <TabControl.ItemContainerStyle>
                <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
                    <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.TabToolTip}}"/>
                    <Setter Property="i:XToolTip.Header" Value="{i:Bind Name}"/>
                    <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind Image}"/>
                    <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
                    <Setter Property="ToolTip" Value="{i:Bind}"/>
                </Style>
            </TabControl.ItemContainerStyle>
        </TabControl>
    </DataTemplate>

    <!-- Text -->

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.TextMarkDown}">
        <RichTextBox i:XRichTextBox.MarkUp="{i:Bind}"
            BorderThickness="0"
            IsDocumentEnabled="True" 
            IsReadOnly="True" 
            Padding="0" 
            TextBlock.FontSize="13"
            TextBlock.TextAlignment="Left"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.TextMarkUp}">
        <RichTextBox i:XRichTextBox.MarkUp="{i:Bind}"
            BorderThickness="0"
            IsDocumentEnabled="True" 
            IsReadOnly="True" 
            Padding="0" 
            TextBlock.FontSize="13"
            TextBlock.TextAlignment="Left"/>
    </DataTemplate>

    <i:KeyTemplateSelector x:Key="{x:Static i:ObjectControlKey.TextSelector}">
        <i:KeyTemplate DataKey="{x:Static Text:Format.Default}">
            <TextBlock Text="{i:Bind}" TextAlignment="Left"/>
        </i:KeyTemplate>
        <i:KeyTemplate DataKey="{x:Static Text:Format.MarkDown}">
            <TextBlock TextAlignment="Left" i:XTextBlock.MarkUp="{i:Bind}"/>
        </i:KeyTemplate>
        <i:KeyTemplate DataKey="{x:Static Text:Format.MarkUp}">
            <TextBlock TextAlignment="Left" i:XTextBlock.MarkUp="{i:Bind}"/>
        </i:KeyTemplate>
    </i:KeyTemplateSelector>

    <DataTemplate x:Key="{x:Static i:ObjectControlKey.Text}">
        <i:Display x:Name="Content" Content="{i:Bind Text}">
            <i:Display.ContentTemplate>
                <DataTemplate>
                    <TextBlock Text="{i:Bind}" TextAlignment="Left"
                        FontSize="13"/>
                </DataTemplate>
            </i:Display.ContentTemplate>
        </i:Display>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Format}" Value="{x:Static Text:Format.Default}"/>
            <DataTrigger Binding="{i:Bind Format}" Value="{x:Static Text:Format.MarkDown}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.TextMarkDown}}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Format}" Value="{x:Static Text:Format.MarkUp}">
                <Setter TargetName="Content" Property="ContentTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.TextMarkUp}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion ObjectControlKey-->

    <!--#region ObjectControlTemplate-->

    <!--#region ✔Address-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Address}">
        <i:AddressBox>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:XStorage.PathProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:AddressBox>
    </DataTemplate>

    <!--#endregion Angle-->

    <!--#region ✔Angle-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Angle}">
        <i:AngleControl>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:AngleControl.DegreesProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:AngleControl>
    </DataTemplate>

    <!--#endregion Angle-->

    <!--#region ✔AppResources-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.AppResources}">
        <ComboBox SelectedItem="{i:Bind Theme, AppSource=Data, Trigger=PropertyChanged, Way=2}">
            <ComboBox.ItemsSource>
                <CompositeCollection>
                    <i:ComboBoxSeparator Content="{i:Text Default}"/>
                    <CollectionContainer Collection="{i:Enumerate Ion1:DefaultThemes, String=True}"/>
                    <i:ComboBoxSeparator Content="{i:Text Custom}" Visibility="{i:Compare32 CustomThemes.Count, AppSource=Theme, Result=Visibility, Type=Greater}"/>
                    <CollectionContainer Collection="{i:Bind CustomThemes, AppSource=Theme}"/>
                </CompositeCollection>
            </ComboBox.ItemsSource>
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{i:Bind Convert={x:Type Data:ConvertFileName}, ConverterParameter=0}"/>
                </DataTemplate>
            </ComboBox.ItemTemplate>
        </ComboBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Bullet-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Bullet}">
        <i:TextBullet Bullet="{i:Bind}" MaxHeight="20" Value="1"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Button-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Button}">
        <Button x:Name="Button" Content="{Data:MultiBindLocalize Style[CommandText]}"
            Command="{i:Bind Style[Command]}"
            CommandParameter="{i:Bind Style[CommandParameter]}"
            IsCancel="False" IsDefault="False"
            i:XButton.Image="{i:Bind Style[CommandImage], Convert=Data:ConvertToImageSource}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Style[Color]}" Value="{x:Static i:ButtonColor.Black}">
                <Setter TargetName="Button" Property="Style" Value="{DynamicResource {x:Static i:XButton.BlackButton}}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[Color]}" Value="{x:Static i:ButtonColor.Blue}">
                <Setter TargetName="Button" Property="Style" Value="{DynamicResource {x:Static i:XButton.BlueButton}}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[Color]}" Value="{x:Static i:ButtonColor.Green}">
                <Setter TargetName="Button" Property="Style" Value="{DynamicResource {x:Static i:XButton.GreenButton}}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[Color]}" Value="{x:Static i:ButtonColor.Red}">
                <Setter TargetName="Button" Property="Style" Value="{DynamicResource {x:Static i:XButton.RedButton}}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[Color]}" Value="{x:Static i:ButtonColor.White}"/>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔ButtonCancel-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ButtonCancel}">
        <Button Content="{Data:MultiBindLocalize Style[CommandText]}"
            Command="{i:Bind Style[Command]}"
            CommandParameter="{i:Bind Style[CommandParameter]}"
            IsCancel="True" IsDefault="False"
            i:XButton.Image="{i:Bind Style[CommandImage], Convert=Data:ConvertToImageSource}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔ButtonDefault-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ButtonDefault}">
        <Button Content="{Data:MultiBindLocalize Style[CommandText]}"
            Command="{i:Bind Style[Command]}"
            CommandParameter="{i:Bind Style[CommandParameter]}"
            IsCancel="False" IsDefault="True"
            i:XButton.Image="{i:Bind Style[CommandImage], Convert=Data:ConvertToImageSource}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔ButtonImage-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ButtonImage}">
        <i:ImageButton Source="{i:Bind Style[CommandImage]}" 
            Command="{i:Bind Style[Command]}"
            CommandParameter="{i:Bind Style[CommandParameter]}">
            <i:ImageButton.Style>
                <Style TargetType="{x:Type i:ImageButton}" BasedOn="{StaticResource {x:Type i:ImageButton}}">
                    <Setter Property="Foreground" Value="{i:Bind Style[CommandImageColor], Convert=Data:ConvertToSolidColorBrush}"/>
                </Style>
            </i:ImageButton.Style>
            <e:Interaction.Behaviors>
                <Behavior:DynamicResourceBehavior Property="{x:Static i:ImageButton.ImageForegroundProperty}">
                    <Behavior:DynamicResourceBehavior.Key>
                        <Data:MultiBind ConverterName="FieldValueStatic">
                            <Binding Path="Style[CommandImageColor]"/>
                            <Binding Path="Style[CommandImageColorType]"/>
                        </Data:MultiBind>
                    </Behavior:DynamicResourceBehavior.Key>
                </Behavior:DynamicResourceBehavior>
            </e:Interaction.Behaviors>
        </i:ImageButton>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Check-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Check}">
        <CheckBox Content="{i:Bind Style[CheckText]}"
            HorizontalAlignment="Left"
            IsEnabled="{i:Bind Style[CanEdit]}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static CheckBox.IsCheckedProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </CheckBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔CheckImage-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.CheckImage}">
        <i:Element>
            <i:Element.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:Element.Resources>
            <i:ImageToggleButton x:Name="ImageToggleButton" Content="{i:Bind Style[CheckText]}"
                CheckedSource="{i:Bind Style[CheckImage]}"
                HorizontalAlignment="Left"
                IsEnabled="{i:Bind Style[CanEdit]}"
                Source="{i:Bind Style[CheckImageToggle]}">
                <e:Interaction.Behaviors>
                    <Behavior:BindingBehavior Property="{x:Static i:ImageToggleButton.IsCheckedProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                        <Behavior:BindingBehavior.Path>
                            <Data:MultiBind ConverterName="Path">
                                <i:Bind Source="Value"/>
                                <i:Bind Path="Style[ValuePath]"/>
                            </Data:MultiBind>
                        </Behavior:BindingBehavior.Path>
                    </Behavior:BindingBehavior>
                    <Behavior:DynamicResourceBehavior Property="{x:Static i:ImageToggleButton.ImageForegroundProperty}">
                        <Behavior:DynamicResourceBehavior.Key>
                            <Data:MultiBind ConverterName="FieldValueStatic">
                                <Binding Path="Style[CheckImageColor]"/>
                                <Binding Path="Style[CheckImageColorType]"/>
                            </Data:MultiBind>
                        </Behavior:DynamicResourceBehavior.Key>
                    </Behavior:DynamicResourceBehavior>
                </e:Interaction.Behaviors>
                <i:ImageToggleButton.Style>
                    <Style TargetType="{x:Type i:ImageToggleButton}" BasedOn="{StaticResource {x:Type i:ImageToggleButton}}">
                        <Setter Property="Foreground" Value="{i:Bind Style[CheckImageColor], Convert=Data:ConvertToSolidColorBrush}"/>
                    </Style>
                </i:ImageToggleButton.Style>
            </i:ImageToggleButton>
        </i:Element>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Style[CheckText]}" Value="{x:Null}">
                <Setter TargetName="ImageToggleButton" Property="Content" Value="{i:Bind Style[Name]}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔CheckSwitch-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.CheckSwitch}">
        <i:SwitchButton Content="{i:Bind Style[CheckText]}"
            HorizontalAlignment="Left"
            IsEnabled="{i:Bind Style[CanEdit]}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:SwitchButton.IsCheckedProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:SwitchButton>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Color-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Color}">
        <i:ColorBox IsEnabled="{i:Bind Style[CanEdit]}"
            MinHeight="24" MinWidth="24">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:ColorBox.ValueProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:ColorBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖ColorModel (redirect to "ColorText" for now!)-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ColorModel}">
        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ColorText}}"/>
        <!--
        <i:Element>
            <i:Element.Resources>
                <Data:ReferenceObject x:Key="ColorModel" Data="{i:Bind StyleModel.ColorModel}"/>
            </i:Element.Resources>
            <i:Display Content="{i:Bind Model, Source={StaticResource ColorModel}}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Object}}"/>
        </i:Element>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔ColorText-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ColorText}">
        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*">
            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Color}}"
                Margin="{i:Constant Key=ThickRight}"/>
            <TextBox IsReadOnly="{i:Bind Style[CanEdit], Convert=Data:Invert}"
                i:XTextBox.ClearButtonVisibility="Collapsed"
                i:XTextBoxBase.Placeholder="{i:Bind}"
                i:XTextBoxBase.PlaceholderTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelPlaceholder}}"
                i:XTextBoxBase.Regex="{x:Static Text:Expressions.LetterOrNumber}"
                MaxLength="{i:Bind StyleModel.Length}">
                <i:XTextBoxBase.Left>
                    <i:DataTemplateList>
                        <DataTemplate>
                            <TextBlock Margin="{i:Constant Key=ThickLeft}" Opacity="0.5" Text="#"/>
                        </DataTemplate>
                    </i:DataTemplateList>
                </i:XTextBoxBase.Left>
                <e:Interaction.Behaviors>
                    <Behavior:BindingBehavior Property="{x:Static TextBox.TextProperty}" 
                        Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                        Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                        ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                        <Behavior:BindingBehavior.Path>
                            <Data:MultiBind ConverterName="Path">
                                <i:Bind Source="Value"/>
                                <i:Bind Path="Style[ValuePath]"/>
                            </Data:MultiBind>
                        </Behavior:BindingBehavior.Path>
                    </Behavior:BindingBehavior>
                </e:Interaction.Behaviors>
            </TextBox>
        </Grid>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Direction-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Direction}">
        <i:DirectionControl>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:DirectionControl.DirectionProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:DirectionControl>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Enum-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Enum}">
        <ComboBox x:Name="ComboBox" ItemsSource="{i:Bind ValueType, Convert=Data:ConvertToObjectCollection}"
            i:XComboBox.Placeholder="{i:Bind}"
            i:XComboBox.PlaceholderTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelPlaceholder}}"
            Style="{DynamicResource {x:Static i:ObjectControlKey.StyleComboBox}}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
                <Behavior:DynamicResourceBehavior Property="{x:Static ComboBox.ItemTemplateProperty}" 
                    Key="{i:Bind Style[ItemTemplate]}"/>
            </e:Interaction.Behaviors>
        </ComboBox>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Style[ItemTemplate]}" Value="{x:Null}">
                <Setter TargetName="ComboBox" Property="ItemTemplate" Value="{DynamicResource {x:Static i:ObjectControlTemplate.EnumItem}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖EnumFlag-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.EnumFlag}">
        <!--
        <i:FlagButton x:Name="FlagBox0" Source="{i:Bind Value}"
            IsReadOnly="{i:Bind Style[CanEdit], Convert=Data:Invert}"
            Placeholder="{i:Bind}"
            PlaceholderTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelPlaceholder}}">
            <i:FlagButton.Resources>
                <Data:Reference x:Key="Member" Data="{i:Bind}"/>
                <Data:Reference x:Key="ValueElement" Data="{i:Bind From=FindAncestor, FromType=i:ValueElement}"/>
            </i:FlagButton.Resources>
            <i:FlagButton.ItemPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="{i:Bind Data.Orientation, Convert=Data:ConvertOrientToOrientation, Source={StaticResource ValueElement}}"/>
                </ItemsPanelTemplate>
            </i:FlagButton.ItemPanel>
            <i:FlagButton.ItemStyle>
                <Style TargetType="FrameworkElement">
                    <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"/>
                    <Setter Property="i:XToolTip.Header" Value="{Data:MultiBindName Value}"/>
                    <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind Value}"/>
                    <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                    <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
                    <Setter Property="ToolTip" Value="{i:Bind Value}"/>
                </Style>
            </i:FlagButton.ItemStyle>
            <i:FlagButton.ItemTemplate>
                <DataTemplate>
                    <i:Display x:Name="Content" Content="{i:Bind}">
                        <i:Display.ContentTemplate>
                            <DataTemplate>
                                <i:ImageToggleButton Content="{Data:MultiBindName Value}" IsChecked="{i:Bind IsChecked, Way=2}" 
                                    Image="{i:Bind Value}"
                                    ImageTemplate="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:BindingBehavior Property="{x:Static i:ImageToggleButton.IsCheckedProperty}" 
                                            Mode="TwoWay" Path="IsChecked" Source="{i:Bind}" SourceTrigger="{i:Bind Data.UpdateSourceTrigger, Source={StaticResource Member}}" />
                                    </e:Interaction.Behaviors>
                                </i:ImageToggleButton>
                            </DataTemplate>
                        </i:Display.ContentTemplate>
                    </i:Display>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{i:Bind Orientation, From=FindAncestor, FromType=i:ValueElement}" Value="Horizontal">
                            <Setter TargetName="Content" Property="Margin" Value="{i:Constant Key=ThickSmallerLeft}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind Orientation, From=FindAncestor, FromType=i:ValueElement}" Value="Vertical">
                            <Setter TargetName="Content" Property="Margin" Value="{i:Constant Key=ThickSmallerUp}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                            <Setter TargetName="Content" Property="Margin" Value="0"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </i:FlagButton.ItemTemplate>
            <i:FlagButton.ValueTemplate>
                <DataTemplate>
                    <TextBlock Text="{i:Bind}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </i:FlagButton.ValueTemplate>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:FlagButton.ValueProperty}" 
                    Mode="TwoWay" Path="Value" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" />
            </e:Interaction.Behaviors>
        </i:FlagButton>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Style[Template]}" Value="{x:Static Ion1:Template.EnumFlag}">
                <Setter TargetName="FlagBox0" Property="View" Value="Default"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[Template]}" Value="{x:Static Ion1:Template.EnumFlagButton}">
                <Setter TargetName="FlagBox0" Property="View" Value="Menu"/>
            </DataTrigger>
        </DataTemplate.Triggers>
        -->
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.EnumItem}">
        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*" i:XPanel.VerticalContentAlignment="Center">
            <i:Display Content="{i:Bind}" ContentTemplate="{StaticResource {x:Static i:ObjectControlKey.ObjectImage}}" 
                Margin="{i:Constant Key=ThickRight}" 
                Visibility="{Data:HasAttribute Attribute=Ion1:ImageAttribute, Result=Visibility}"/>
            <TextBlock>
                <TextBlock.Text>
                    <Data:MultiBindName>
                        <Binding Path="Style[NameLocalize]"/>
                    </Data:MultiBindName>
                </TextBlock.Text>
            </TextBlock>
        </Grid>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔FontFamily-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.FontFamily}">
        <i:FontFamilyBox IsEnabled="{i:Bind Style[CanEdit]}"
            i:XComboBox.Placeholder="{i:Bind}"
            i:XComboBox.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:FontFamilyBox.SelectedItemProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:FontFamilyBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔FontStyle-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.FontStyle}">
        <i:FontStyleBox IsEnabled="{i:Bind Style[CanEdit]}"
            i:XComboBox.Placeholder="{i:Bind}"
            i:XComboBox.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:FontStyleBox.SelectedItemProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:FontStyleBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔FontWeight-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.FontWeight}">
        <i:FontWeightBox IsEnabled="{i:Bind Style[CanEdit]}"
            i:XComboBox.Placeholder="{i:Bind}"
            i:XComboBox.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:FontWeightBox.SelectedItemProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:FontWeightBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖Gradient-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Gradient}">
        <!--
        <Button Command="{Data:Ancestor EditCommand, i:ObjectControl}" CommandParameter="{i:Bind}" 
            IsEnabled="{i:Bind Style[CanEdit]}"
            Padding="1">
            <i:GradientBox DialogEvent="None">
                <e:Interaction.Behaviors>
                    <Behavior:BindingBehavior Property="{x:Static i:GradientBox.ValueProperty}" 
                        Converter="{i:Bind Style[ValueConvert]}" Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}">
                        <Behavior:BindingBehavior.Path>
                            <Data:MultiBind ConverterName="Path">
                                <i:Bind Source="Value"/>
                                <i:Bind Path="Style[ValuePath]"/>
                            </Data:MultiBind>
                        </Behavior:BindingBehavior.Path>
                    </Behavior:BindingBehavior>
                </e:Interaction.Behaviors>
            </i:GradientBox>
        </Button>
        -->
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.GradientPreview}">
        <!--
        <Border>
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Background" Value="{x:Static Media:CheckerBrush.Default}"/>
                    <Setter Property="BorderBrush" Value="Black"/>
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Height" Value="42"/>
                </Style>
            </Border.Style>
            <Rectangle DataContext="{i:Bind Value.Steps}" Fill="{Color:GradientStepBinding}"/>
        </Border>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔GroupItemForm-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.GroupItemForm}">
        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*">
            <ComboBox ItemsSource="{i:Bind Value.Groups}"
                SelectedIndex="{i:Bind Value.SelectedGroupIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{i:Bind Name}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
            <ComboBox ItemsSource="{i:Bind Value.SelectedGroup}"
                Margin="1,0,0,0"
                SelectedIndex="{i:Bind Value.SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{i:Bind Name}"/>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </Grid>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Image-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Image}">
        <Image Height="{i:Bind Style[ImageHeight], Way=1}" Width="{i:Bind Style[ImageWidth], Way=1}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static Image.SourceProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </Image>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔ImageColor-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ImageColor}">
        <i:ImageElement Foreground="{i:Bind Style[ImageColor], Convert=Data:ConvertToSolidColorBrush}">
            <i:ImageElement.SourceSize>
                <Data:MultiBind ConverterName="MSizeDouble">
                    <i:Bind Path="Style[ImageHeight]"/>
                    <i:Bind Path="Style[ImageWidth]"/>
                </Data:MultiBind>
            </i:ImageElement.SourceSize>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:ImageElement.SourceProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path" Way="1">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:ImageElement>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖ImageSlide-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ImageSlide}">
        <!--
        <i:SlideshowControl 
            BackgroundBlur="{i:Bind Style[ImageBackBlur]}"
            BackgroundBlurRadius="{i:Bind Style[ImageBackBlurRadius]}"
            BackgroundOpacity="{i:Bind Style[ImageBackOpacity]}"
            Interval="{i:Bind Style[ImageInterval]}"
            PauseOnMouseOver="{i:Bind Style[ImagePauseOver]}"
            ScalingMode="HighQuality"
            Stretch="Fill"
            Transition="LeftReplace">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:SlideshowControl.PathProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path" Way="1">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:SlideshowControl>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔ImageThumb-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ImageThumb}">
        <i:Thumbnail Path="{i:Bind Value, Way=1}" 
            Height="{i:Bind Style[ImageHeight], Way=1}" 
            Width="{i:Bind Style[ImageWidth], Way=1}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ⬤ List-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.List}">
        <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*">
            <Grid.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
                <Data:Reference x:Key="ObjectControl" 
                    Data="{i:Bind From=FindAncestor, FromType=i:ObjectControl}"/>
            </Grid.Resources>
            <StackPanel Orientation="Horizontal"
                i:XPanel.VerticalContentAlignment="Center"
                Margin="{i:Constant Key=ThickDown}"
                Visibility="{i:Equal Style[ItemAction], Invert=True, Result=Visibility, Value={x:Static Ion1:ItemAction.None}}">
                <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ListAdd}}">
                    <i:Display.Visibility>
                        <Data:MultiBindTrue For="Any">
                            <i:Equal Path="Data.StyleModel.ItemAddMethod" Source="{StaticResource Model}" Invert="True" Value="{x:Null}"/>
                            <i:Compare32 Path="Data.StyleModel.ItemTypes.Count" Source="{StaticResource Model}" Type="Greater" Value="0"/>
                            <i:Compare32 Path="Data.StyleModel.ItemValues.Count" Source="{StaticResource Model}" Type="Greater" Value="0"/>
                            <i:HasFlag Path="Data.Style[ItemAction]" Source="{StaticResource Model}" Value="{x:Static Ion1:ItemAction.Add}"/>
                        </Data:MultiBindTrue>
                    </i:Display.Visibility>
                </i:Display>
                <StackPanel Orientation="Horizontal" 
                    i:XPanel.Spacing="{i:Constant Key=ThickRight}">
                    <i:ImageButton Command="{i:Bind StyleModel.CloneCommand}"
                        Source="{i:Image Key=Clone}"
                        ToolTip="{i:Text Clone}"
                        Visibility="{i:HasFlag Style[ItemAction], Result=Visibility, Value={x:Static Ion1:ItemAction.Clone}}"/>
                    <i:ImageButton Command="{i:Bind StyleModel.RemoveCommand}"
                        Source="{i:Image Key=Minus}"
                        ToolTip="{i:Text Remove}"
                        Visibility="{i:HasFlag Style[ItemAction], Result=Visibility, Value={x:Static Ion1:ItemAction.Remove}}"/>
                    <i:ImageButton Command="{i:Bind StyleModel.CopyCommand}"
                        Source="{i:Image Key=Copy}"
                        ToolTip="{i:Text Copy}"
                        Visibility="{i:HasFlag Style[ItemAction], Result=Visibility, Value={x:Static Ion1:ItemAction.Copy}}"/>
                    <i:ImageButton Command="{i:Bind StyleModel.PasteCommand}"
                        Source="{i:Image Key=Paste}"
                        ToolTip="{i:Text Paste}"
                        Visibility="{i:HasFlag Style[ItemAction], Result=Visibility, Value={x:Static Ion1:ItemAction.Paste}}"/>
                    <i:ImageButton Command="{i:Bind StyleModel.MoveUpCommand}"
                        Source="{i:Image Key=TriangleUp}"
                        ToolTip="{i:Text MoveUp}"
                        Visibility="{i:HasFlag Style[ItemAction], Result=Visibility, Value={x:Static Ion1:ItemAction.Move}}"/>
                    <i:ImageButton Command="{i:Bind StyleModel.MoveDownCommand}"
                        Source="{i:Image Key=TriangleDown}"
                        ToolTip="{i:Text MoveDown}"
                        Visibility="{i:HasFlag Style[ItemAction], Result=Visibility, Value={x:Static Ion1:ItemAction.Move}}"/>
                    <i:ImageButton Command="{i:Bind StyleModel.ClearCommand}"
                        Source="{i:Image Key=X}"
                        ToolTip="{i:Text Clear}"
                        Visibility="{i:HasFlag Style[ItemAction], Result=Visibility, Value={x:Static Ion1:ItemAction.Clear}}"/>
                </StackPanel>
            </StackPanel>
            <!-- 
            i:XCollectionContainer.GroupDirection="{i:Bind Data.Style[ItemGroupDirection], Source={StaticResource Model}}"
            i:XCollectionContainer.GroupName="{i:Bind Data.Style[ItemGroupName], Source={StaticResource Model}}"
            i:XCollectionContainer.NoGroupName="{i:Bind Data.Style[ItemNoGroupName], Source={StaticResource Model}}"
            i:XCollectionContainer.NoSortName="{i:Bind Data.Style[ItemNoSortName], Source={StaticResource Model}}"
            i:XCollectionContainer.SortDirection="{i:Bind Data.Style[ItemSortDirection], Source={StaticResource Model}}"
            i:XCollectionContainer.SortName="{i:Bind Data.Style[ItemSortName], Source={StaticResource Model}}"
            -->
            <ListBox BorderThickness="1" Padding="1"
                i:XItemsControl.ContainerIndexEnable="True"
                ItemsSource="{i:Bind StyleModel.ListView}"
                SelectedIndex="{i:Bind StyleModel.SelectedIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                SelectedItem="{i:Bind StyleModel.SelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                SelectionMode="Single">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                        <Setter Property="Margin" Value="0,1"/>
                        <Setter Property="Padding" Value="5"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{i:Bind From=PreviousData}" Value="{x:Null}">
                                <Setter Property="Margin" Value="0"/>
                            </DataTrigger>
                        </Style.Triggers>
                        <!--
                        <Setter Property="i:XToolTip.Header" Value="{Data:MultiBindName}"/>
                        <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind}"/>
                        <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                        <Setter Property="i:XToolTip.HeaderTemplateSource" Value="{i:Bind Data.Style[ItemToolTipHeaderSource], Source={StaticResource Model}}"/>
                        <Setter Property="i:XToolTip.HeaderTemplateSourceKey" Value="{i:Bind Data.Style[ItemToolTipHeaderSourceKey], Source={StaticResource Model}}"/>
                        <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
                        <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"/>
                        <Setter Property="i:XToolTip.TemplateSource" Value="{i:Bind Data.Style[ItemToolTipSource], Source={StaticResource Model}}"/>
                        <Setter Property="i:XToolTip.TemplateSourceKey" Value="{i:Bind Data.Style[ItemToolTipSourceKey], Source={StaticResource Model}}"/>
                        <Setter Property="ToolTip" Value="{i:Bind}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{i:Bind Data.Style[CanEdit], Source={StaticResource Model}}" Value="True">
                                <Setter Property="ContextMenu">
                                    <Setter.Value>
                                        <ContextMenu DataContext="{i:Bind PlacementTarget.DataContext, From=Self}">
                                            <MenuItem Header="{i:Text Remove}"
                                                Command="{i:Bind Data.StyleModel.RemoveCommand, Source={StaticResource Model}}"
                                                CommandParameter="{i:Bind}"
                                                Icon="{i:Image Key=Minus}"/>
                                            <Separator i:XSeparator.Header="{i:Text Move}"/>
                                            <MenuItem Header="{i:Text Up}"
                                                Command="{i:Bind Data.StyleModel.MoveUpCommand, Source={StaticResource Model}}"
                                                CommandParameter="{i:Bind}"
                                                Icon="{i:Image Key=ArrowUp}"/>
                                            <MenuItem Header="{i:Text Down}"
                                                Command="{i:Bind Data.StyleModel.MoveDownCommand, Source={StaticResource Model}}"
                                                CommandParameter="{i:Bind}"
                                                Icon="{i:Image Key=ArrowDown}"/>
                                            <Separator i:XSeparator.Header="{i:Text Insert}"/>
                                            <MenuItem Header="{i:Text Above}"
                                                Command="{i:Bind Data.StyleModel.InsertAboveCommand, Source={StaticResource Model}}"
                                                Icon="{i:Image Key=InsertAbove}"/>
                                            <MenuItem Header="{i:Text Below}"
                                                Command="{i:Bind Data.StyleModel.InsertBelowCommand, Source={StaticResource Model}}"
                                                Icon="{i:Image Key=InsertBelow}"/>
                                        </ContextMenu>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </Style.Triggers>
                        -->
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*"
                            i:XPanel.Spacing="{i:Constant Key=ThickRight}">
                            <i:TextBullet Bullet="{i:Bind Data.Style[ItemBullet], Source={StaticResource Model}}" 
                                Value="{Data:Ancestor FromType=ListBoxItem, Path=(i:XItemsControl.ContainerIndex)}"
                                Visibility="{i:Equal Data.Style[ItemBullet], Invert=True, Result=Visibility, Source={StaticResource Model}, Value={x:Static Text:Bullet.None}}"/>
                            <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Data.Style[ItemTemplate], Source={StaticResource Model}, Value={x:Null}}">
                                <i:Display.ConditionalTemplate>
                                    <DataTemplate>
                                        <DataTemplate.Resources>
                                            <Data:ReferenceItem x:Key="Item" Item="{i:Bind}" Member="{i:Bind Data, Source={StaticResource Model}}"/>
                                        </DataTemplate.Resources>
                                        <i:ValueElement Content="{i:Bind Data, Source={StaticResource Item}}"/>
                                    </DataTemplate>
                                </i:Display.ConditionalTemplate>
                                <i:Display.DefaultTemplate>
                                    <DataTemplate>
                                        <i:Display Content="{i:Bind}">
                                            <e:Interaction.Behaviors>
                                                <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                                    <Behavior:DynamicResourceBehavior.Key>
                                                        <Data:MultiBind ConverterName="FieldValueStatic">
                                                            <Binding Path="Data.Style[ItemTemplate]" Source="{StaticResource Model}"/>
                                                            <Binding Path="Data.Style[ItemTemplateType]" Source="{StaticResource Model}"/>
                                                        </Data:MultiBind>
                                                    </Behavior:DynamicResourceBehavior.Key>
                                                </Behavior:DynamicResourceBehavior>
                                            </e:Interaction.Behaviors>
                                        </i:Display>
                                    </DataTemplate>
                                </i:Display.DefaultTemplate>
                            </i:Display>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ListAdd}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[ItemAddMethod], Value={x:Null}}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ListAddObject}}"
            i:Display.DefaultTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ListAddMethod}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ListAddMethod}">
        <i:ImageButton Command="{i:Bind StyleModel.InsertAboveCommand}"
            Source="{i:Image Key=Plus}"
            ToolTip="{i:Text Add}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ListAddObject}">
        <i:ImageButton Source="{i:Image Key=Plus}"
            ToolTip="{i:Text Add}">
            <i:ImageButton.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:ImageButton.Resources>
            <i:ImageButton.Menu>
                <ContextMenu DataContext="{i:Bind Data, Source={StaticResource Model}}" 
                    i:XItemsControl.GroupStyle="{DynamicResource {x:Static i:XMenu.GroupStyle}}">
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <!-- Command-->
                            <Setter Property="Command" Value="{i:Bind Data.StyleModel.InsertAboveCommand, Source={StaticResource Model}}"/>
                            <Setter Property="CommandParameter" Value="{i:Bind}"/>

                            <!-- Header-->
                            <Setter Property="Header" Value="{i:Bind}"/>
                            <Setter Property="HeaderTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Data.Style[ItemAddHeaderTemplate], Source={StaticResource Model}, Value={x:Null}}">
                                            <i:Display.ConditionalTemplate>
                                                <DataTemplate>
                                                    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Data.Style[ItemAddHeaderPath], Source={StaticResource Model}, Value={x:Null}}">
                                                        <i:Display.ConditionalTemplate>
                                                            <DataTemplate>
                                                                <i:Display Content="{i:Bind Convert=Data:ConvertToNameAttribute}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Name}}"/>
                                                            </DataTemplate>
                                                        </i:Display.ConditionalTemplate>
                                                        <i:Display.DefaultTemplate>
                                                            <DataTemplate>
                                                                <TextBlock>
                                                                    <e:Interaction.Behaviors>
                                                                        <Behavior:BindingBehavior Property="{x:Static TextBlock.TextProperty}" 
                                                                            Converter="{i:Bind Data.Style[ItemAddHeaderConvert], Source={StaticResource Model}}" 
                                                                            ConverterParameter="{i:Bind Data.Style[ItemAddHeaderConvertParameter], Source={StaticResource Model}}" 
                                                                            Mode="OneWay" Path="{i:Bind Data.Style[ItemAddHeaderPath], Source={StaticResource Model}}" 
                                                                            Source="{i:Bind}" SourceTrigger="Default" 
                                                                            StringFormat="{i:Bind Data.Style[ItemAddHeaderFormat], Source={StaticResource Model}}"/>
                                                                    </e:Interaction.Behaviors>
                                                                </TextBlock>
                                                            </DataTemplate>
                                                        </i:Display.DefaultTemplate>
                                                    </i:Display>
                                                </DataTemplate>
                                            </i:Display.ConditionalTemplate>
                                            <i:Display.DefaultTemplate>
                                                <DataTemplate>
                                                    <i:Display Content="{i:Bind}">
                                                        <e:Interaction.Behaviors>
                                                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                                                <Behavior:DynamicResourceBehavior.Key>
                                                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                                                        <Binding Path="Data.Style[ItemAddHeaderTemplate]" Source="{StaticResource Model}"/>
                                                                        <Binding Path="Data.Style[ItemAddHeaderTemplateType]" Source="{StaticResource Model}"/>
                                                                    </Data:MultiBind>
                                                                </Behavior:DynamicResourceBehavior.Key>
                                                            </Behavior:DynamicResourceBehavior>
                                                        </e:Interaction.Behaviors>
                                                    </i:Display>
                                                </DataTemplate>
                                            </i:Display.DefaultTemplate>
                                        </i:Display>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>

                            <!-- Icon-->
                            <Setter Property="Icon" Value="{i:Bind}"/>
                            <Setter Property="i:XMenuItem.IconTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Data.Style[ItemAddIconTemplate], Source={StaticResource Model}, Value={x:Null}}">
                                            <i:Display.ConditionalTemplate>
                                                <DataTemplate>
                                                    <i:Display Content="{i:Bind Convert=Data:ConvertToImageAttribute}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Image}}"/>
                                                </DataTemplate>
                                            </i:Display.ConditionalTemplate>
                                            <i:Display.DefaultTemplate>
                                                <DataTemplate>
                                                    <i:Display Content="{i:Bind}">
                                                        <e:Interaction.Behaviors>
                                                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                                                <Behavior:DynamicResourceBehavior.Key>
                                                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                                                        <Binding Path="Data.Style[ItemAddIconTemplate]" Source="{StaticResource Model}"/>
                                                                        <Binding Path="Data.Style[ItemAddIconTemplateType]" Source="{StaticResource Model}"/>
                                                                    </Data:MultiBind>
                                                                </Behavior:DynamicResourceBehavior.Key>
                                                            </Behavior:DynamicResourceBehavior>
                                                        </e:Interaction.Behaviors>
                                                    </i:Display>
                                                </DataTemplate>
                                            </i:Display.DefaultTemplate>
                                        </i:Display>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="i:XMenuItem.IconVisibility" Value="{i:Bind Data.Style[ItemAddIconVisible], Convert=Data:ConvertBooleanToVisibility, Source={StaticResource Model}}"/>

                            <!-- Input gesture text-->
                            <Setter Property="InputGestureText" Value="{i:Bind}"/>
                            <Setter Property="i:XMenuItem.InputGestureTextTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Data.Style[ItemAddGestureTemplate], Source={StaticResource Model}, Value={x:Null}}">
                                            <i:Display.ConditionalTemplate>
                                                <DataTemplate>
                                                    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Data.Style[ItemAddGesturePath], Source={StaticResource Model}, Value={x:Null}}"
                                                        i:Display.ConditionalTemplate="{i:Template Key=Default}">
                                                        <i:Display.DefaultTemplate>
                                                            <DataTemplate>
                                                                <TextBlock>
                                                                    <e:Interaction.Behaviors>
                                                                        <Behavior:BindingBehavior Property="{x:Static TextBlock.TextProperty}" 
                                                                            Converter="{i:Bind Data.Style[ItemAddGestureConvert], Source={StaticResource Model}}" 
                                                                            ConverterParameter="{i:Bind Data.Style[ItemAddGestureConvertParameter], Source={StaticResource Model}}" 
                                                                            Mode="OneWay" Path="{i:Bind Data.Style[ItemAddGesturePath], Source={StaticResource Model}}" 
                                                                            Source="{i:Bind}" SourceTrigger="Default" 
                                                                            StringFormat="{i:Bind Data.Style[ItemAddGestureFormat], Source={StaticResource Model}}"/>
                                                                    </e:Interaction.Behaviors>
                                                                </TextBlock>
                                                            </DataTemplate>
                                                        </i:Display.DefaultTemplate>
                                                    </i:Display>
                                                </DataTemplate>
                                            </i:Display.ConditionalTemplate>
                                            <i:Display.DefaultTemplate>
                                                <DataTemplate>
                                                    <i:Display Content="{i:Bind}">
                                                        <e:Interaction.Behaviors>
                                                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                                                <Behavior:DynamicResourceBehavior.Key>
                                                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                                                        <Binding Path="Data.Style[ItemAddGestureTemplate]" Source="{StaticResource Model}"/>
                                                                        <Binding Path="Data.Style[ItemAddGestureTemplateType]" Source="{StaticResource Model}"/>
                                                                    </Data:MultiBind>
                                                                </Behavior:DynamicResourceBehavior.Key>
                                                            </Behavior:DynamicResourceBehavior>
                                                        </e:Interaction.Behaviors>
                                                    </i:Display>
                                                </DataTemplate>
                                            </i:Display.DefaultTemplate>
                                        </i:Display>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>

                            <!-- ToolTip-->
                            <Setter Property="i:XToolTip.Header" Value="{i:Bind}"/>
                            <Setter Property="i:XToolTip.HeaderTemplateSource" Value="{i:Bind Data.Style[ItemAddToolTipHeaderTemplateType], Source={StaticResource Model}}"/>
                            <Setter Property="i:XToolTip.HeaderTemplateSourceKey" Value="{i:Bind Data.Style[ItemAddToolTipHeaderTemplate], Source={StaticResource Model}}"/>
                            <Setter Property="i:XToolTip.TemplateSource" Value="{i:Bind Data.Style[ItemAddToolTipTemplateType], Source={StaticResource Model}}"/>
                            <Setter Property="i:XToolTip.TemplateSourceKey" Value="{i:Bind Data.Style[ItemAddToolTipTemplate], Source={StaticResource Model}}"/>
                            <Setter Property="ToolTip" Value="{i:Bind}"/>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer Collection="{i:Bind Data.StyleModel.ItemTypes, Source={StaticResource Model}}"/>
                            <Separator Visibility="{i:Compare32 Data.StyleModel.ItemValues.Count, Result=Visibility, Source={StaticResource Model}, Type=Greater, Value=0}"/>
                            <CollectionContainer Collection="{i:Bind Data.StyleModel.ItemValues, Source={StaticResource Model}}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </i:ImageButton.Menu>
        </i:ImageButton>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖ListButton-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ListButton}">
        <!--
        <i:ImageToggleButton Content="{i:Bind Style[ButtonText]}" Source="{i:Bind Style[ButtonImage]}">
            <i:ImageToggleButton.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:ImageToggleButton.Resources>
            <i:ImageToggleButton.Menu>
                <ContextMenu i:XItemsControl.ContainerIndexEnable="True">
                    <ContextMenu.Resources>
                        <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Style.Triggers>
                                <Trigger Property="Tag" Value="{x:Null}">
                                    <Setter Property="Command">
                                        <Setter.Value>
                                            <Data:MultiBind ConverterName="PropertyValue">
                                                <Binding Path="Data.Parent.Value" Source="{StaticResource Model}"/>
                                                <Binding Path="Data.Style[ItemCommand]" Source="{StaticResource Model}"/>
                                            </Data:MultiBind>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="CommandParameter" Value="{i:Bind}"/>
                                    <Setter Property="Header" Value="{i:Bind}"/>
                                    <Setter Property="HeaderTemplate">
                                        <Setter.Value>
                                            <DataTemplate>
                                                <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*"
                                                    i:XPanel.Spacing="0,0,5,0">
                                                    <Grid.Resources>
                                                        <Data:ReferenceItem x:Key="Item" Item="{i:Bind}" 
                                                            Member="{i:Bind Data, Source={StaticResource Model}}"/>
                                                    </Grid.Resources>
                                                    <i:TextBullet Bullet="{i:Bind Data.Style[ItemBullet], Source={StaticResource Model}}" 
                                                        Value="{Data:Ancestor FromType=MenuItem, Path=(i:XItemsControl.ContainerIndex)}"
                                                        Visibility="{i:Equal Data.Style[ItemBullet], Invert=True, Result=Visibility, Source={StaticResource Model}, Value={x:Static Text:Bullet.None}}"/>
                                                    <-
                                                    <i:Display Content="{i:Bind Data, Source={StaticResource Item}}" 
                                                        ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.StringText}}"/>
                                                    ->
                                                </Grid>
                                            </DataTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Icon" Value="{i:Bind}"/>
                                    <Setter Property="i:XMenuItem.IconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                                    <Setter Property="i:XToolTip.Header" Value="{Data:MultiBindName}"/>
                                    <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind}"/>
                                    <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                                    <Setter Property="i:XToolTip.HeaderTemplateSource" Value="{i:Bind Data.Style[ItemToolTipHeaderSource], Source={StaticResource Model}}"/>
                                    <Setter Property="i:XToolTip.HeaderTemplateSourceKey" Value="{i:Bind Data.Style[ItemToolTipHeaderSourceKey], Source={StaticResource Model}}"/>
                                    <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
                                    <Setter Property="i:XToolTip.TemplateSource" Value="{i:Bind Data.Style[ItemToolTipSource], Source={StaticResource Model}}"/>
                                    <Setter Property="i:XToolTip.TemplateSourceKey" Value="{i:Bind Data.Style[ItemToolTipSourceKey], Source={StaticResource Model}}"/>
                                    <Setter Property="ToolTip" Value="{i:Bind}"/>
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </ContextMenu.Resources>
                    <ContextMenu.ItemsSource>
                        <CompositeCollection>
                            <CollectionContainer i:XCollectionContainer.Source="{i:Bind Data.StyleModel.ListView, Source={StaticResource Model}}"
                                i:XCollectionContainer.GroupDirection="{i:Bind Data.Style[ItemGroupDirection], Source={StaticResource Model}}"
                                i:XCollectionContainer.GroupName="{i:Bind Data.Style[ItemGroupName], Source={StaticResource Model}}"
                                i:XCollectionContainer.NoGroupName="{i:Bind Data.Style[ItemNoGroupName], Source={StaticResource Model}}"
                                i:XCollectionContainer.NoSortName="{i:Bind Data.Style[ItemNoSortName], Source={StaticResource Model}}"
                                i:XCollectionContainer.SortDirection="{i:Bind Data.Style[ItemSortDirection], Source={StaticResource Model}}"
                                i:XCollectionContainer.SortName="{i:Bind Data.Style[ItemSortName], Source={StaticResource Model}}"/>
                            <MenuItem Tag="0" Header="{i:Text Prefix=(, Key=None, Suffix=), Case=Lower}"
                                FontStyle="Italic" 
                                IsEnabled="False"
                                Visibility="{i:Compare32 Data.Value.Count, Result=Visibility, Source={StaticResource Model}, Type=Equal}"/>
                            <Separator Visibility="{i:Bind Data.Style[CanClear], Convert=Data:ConvertBooleanToVisibility, Source={StaticResource Model}}"/>
                            <MenuItem Tag="0" Header="{i:Text Clear}"
                                Command="{i:Bind Data.StyleModel.ClearCommand, Source={StaticResource Model}}"
                                Visibility="{i:Bind Data.Style[CanClear], Convert=Data:ConvertBooleanToVisibility, Source={StaticResource Model}}"/>
                        </CompositeCollection>
                    </ContextMenu.ItemsSource>
                </ContextMenu>
            </i:ImageToggleButton.Menu>
        </i:ImageToggleButton>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖ListCombo-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ListCombo}">
        <!--
        <ComboBox IsEnabled="{i:Bind Style[CanEdit]}"
            i:XComboBox.Placeholder="{i:Bind}"
            i:XComboBox.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}"
            i:XItemsControl.ContainerIndexEnable="True">
            <ComboBox.Resources>
                <Data:Reference x:Key="Member" Data="{i:Bind}"/>
            </ComboBox.Resources>
            <ComboBox.ItemContainerStyle>
                <Style TargetType="ComboBoxItem" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
                    <Setter Property="i:XComboBoxItem.Icon" Value="{i:Bind}"/>
                    <Setter Property="i:XComboBoxItem.IconSize" Value="16,16"/>
                    <Setter Property="i:XComboBoxItem.IconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                    <Setter Property="i:XToolTip.Header">
                        <Setter.Value>
                            <Data:MultiBind ConverterName="PropertyValue">
                                <Binding/>
                                <Binding Path="Data.Style[ItemToolTipHeaderPath]" Source="{StaticResource Member}"/>
                            </Data:MultiBind>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind}"/>
                    <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                    <Setter Property="i:XToolTip.HeaderTemplateSource" Value="{i:Bind Data.Style[ItemToolTipHeaderSource], Source={StaticResource Member}}"/>
                    <Setter Property="i:XToolTip.HeaderTemplateSourceKey" Value="{i:Bind Data.Style[ItemToolTipHeaderSourceKey], Source={StaticResource Member}}"/>
                    <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
                    <Setter Property="i:XToolTip.TemplateSource" Value="{i:Bind Data.Style[ItemToolTipSource], Source={StaticResource Member}}"/>
                    <Setter Property="i:XToolTip.TemplateSourceKey" Value="{i:Bind Data.Style[ItemToolTipSourceKey], Source={StaticResource Member}}"/>
                    <Setter Property="ToolTip">
                        <Setter.Value>
                            <Data:MultiBind ConverterName="PropertyValue">
                                <Binding/>
                                <Binding Path="Data.Style[ItemToolTipPath]" Source="{StaticResource Member}"/>
                            </Data:MultiBind>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{i:Bind Data.Style[ItemToolTipPath], Source={StaticResource Member}}" Value="{x:Null}">
                            <Setter Property="ToolTip" Value="{i:Bind}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind Data.Style[ItemToolTipSource], Source={StaticResource Member}}" Value="{x:Null}">
                            <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind Data.Style[ItemToolTipHeaderPath], Source={StaticResource Member}}" Value="{x:Null}">
                            <Setter Property="i:XToolTip.Header" Value="{i:Bind}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind Data.Style[ItemToolTipHeaderSource], Source={StaticResource Member}}" Value="{x:Null}">
                            <Setter Property="i:XToolTip.HeaderTemplate">
                                <Setter.Value>
                                    <DataTemplate>
                                        <TextBlock Text="{Data:MultiBindName}"/>
                                    </DataTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ComboBox.ItemContainerStyle>
            <ComboBox.ItemsSource>
                <CompositeCollection>
                    <CollectionContainer i:XCollectionContainer.Source="{i:Bind Data.StyleModel.ListView, Source={StaticResource Member}}"
                        i:XCollectionContainer.GroupDirection="{i:Bind Data.Style[ItemGroupDirection], Source={StaticResource Member}}"
                        i:XCollectionContainer.GroupName="{i:Bind Data.Style[ItemGroupName], Source={StaticResource Member}}"
                        i:XCollectionContainer.NoGroupName="{i:Bind Data.Style[ItemNoGroupName], Source={StaticResource Member}}"
                        i:XCollectionContainer.NoSortName="{i:Bind Data.Style[ItemNoSortName], Source={StaticResource Member}}"
                        i:XCollectionContainer.SortDirection="{i:Bind Data.Style[ItemSortDirection], Source={StaticResource Member}}"
                        i:XCollectionContainer.SortName="{i:Bind Data.Style[ItemSortName], Source={StaticResource Member}}"/>
                </CompositeCollection>
            </ComboBox.ItemsSource>
            <ComboBox.ItemTemplate>
                <DataTemplate>
                    <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="Auto,*"
                        i:XPanel.Spacing="0,0,5,0">
                        <Grid.Resources>
                            <Data:ReferenceItem x:Key="Item" Item="{i:Bind}" Member="{i:Bind Data, Source={StaticResource Member}}"/>
                        </Grid.Resources>
                        <i:TextBullet Bullet="{i:Bind Data.Style[ItemBullet], Source={StaticResource Member}}" 
                            Value="{Data:Ancestor FromType=ComboBoxItem, Path=(i:XItemsControl.ContainerIndex)}"
                            Visibility="{i:Equal Data.Style[ItemBullet], Invert=True, Result=Visibility, Source={StaticResource Member}, Value={x:Static Text:Bullet.None}}"/>
                        <i:Display Content="{i:Bind Data, Source={StaticResource Item}}" 
                            ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ListComboItem}}"/>
                    </Grid>
                </DataTemplate>
            </ComboBox.ItemTemplate>
            <i:XComboBox.SelectedItemTemplate>
                <DataTemplate>
                    <i:Element>
                        <i:Element.Resources>
                            <Data:ReferenceItem x:Key="Item" Item="{i:Bind}" Member="{i:Bind Data, Source={StaticResource Member}}"/>
                        </i:Element.Resources>
                        <i:Display Content="{i:Bind Data, Source={StaticResource Item}}" 
                            ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ListComboItem}}"/>
                    </i:Element>
                </DataTemplate>
            </i:XComboBox.SelectedItemTemplate>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static ComboBox.SelectedIndexProperty}" 
                    Mode="TwoWay" Path="{i:Bind Style[SelectedIndexProperty]}" Source="{i:Bind Parent.Value}" SourceTrigger="PropertyChanged"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}"/>
                <Behavior:BindingBehavior Property="{x:Static ComboBox.SelectedItemProperty}" 
                    Mode="TwoWay" Path="{i:Bind Style[SelectedItemProperty]}" Source="{i:Bind Parent.Value}" SourceTrigger="PropertyChanged"/>
            </e:Interaction.Behaviors>
        </ComboBox>
        -->
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ListComboItem}">
        <i:Element>
            <i:Element.Resources>
                <Data:Reference x:Key="Member" Data="{i:Bind Parent}"/>
            </i:Element.Resources>
            <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Parent.Style[ItemTemplate], Value={x:Null}}">
                <!--
                <i:Display.ConditionalTemplate>
                    <DataTemplate DataType="Reflect:ObjectModel">
                        <i:Display Content="{i:Bind}" 
                            ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.StringText}}"/>
                    </DataTemplate>
                </i:Display.ConditionalTemplate>
                -->
                <i:Display.DefaultTemplate>
                    <DataTemplate DataType="Reflect:ObjectModel">
                        <i:Display Content="{i:Bind}">
                            <e:Interaction.Behaviors>
                                <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                    <Behavior:DynamicResourceBehavior.Key>
                                        <Data:MultiBind ConverterName="FieldValueStatic">
                                            <Binding Path="Data.Style[ItemTemplate]" Source="{StaticResource Member}"/>
                                            <Binding Path="Data.Style[ItemTemplateType]" Source="{StaticResource Member}"/>
                                        </Data:MultiBind>
                                    </Behavior:DynamicResourceBehavior.Key>
                                </Behavior:DynamicResourceBehavior>
                            </e:Interaction.Behaviors>
                        </i:Display>
                    </DataTemplate>
                </i:Display.DefaultTemplate>
            </i:Display>
        </i:Element>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖Matrix-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Matrix}">
        <!--
        <StackPanel Margin="{i:Constant Key=Thick}" 
            i:XPanel.Spacing="{i:Constant Key=ThickDown}">
            <Slider Value="{i:Bind Style[Zoom], Trigger=PropertyChanged, Way=2}"
                Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                Minimum="32"/>
            <Button Content="{l:Loc Invert}"
                Command="{i:Bind StyleModel.Commands[Invert]}"
                Visibility="{i:Bind Style[CanInvert], Convert=Data:ConvertBooleanToVisibility}"/>
            <i:MatrixControl HorizontalAlignment="Left" 
                IsEditable="{i:Bind Style[CanEdit]}"
                LabelVisibility="{i:Bind Style[ShowLabel], Convert=Data:ConvertBooleanToVisibility}"                 
                WeightVisibility="{i:Bind Style[ShowWeight], Convert=Data:ConvertBooleanToVisibility}"                 
                Zoom="{i:Bind Style[Zoom], Trigger=PropertyChanged, Way=2}">
                <i:MatrixControl.ValueTemplate>
                    <DataTemplate/>
                </i:MatrixControl.ValueTemplate>
                <e:Interaction.Behaviors>
                    <Behavior:BindingBehavior Property="{x:Static i:MatrixControl.MatrixProperty}" 
                        Converter="{i:Bind Style[ValueConvert]}" Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}">
                        <Behavior:BindingBehavior.Path>
                            <Data:MultiBind ConverterName="Path">
                                <i:Bind Source="Value"/>
                                <i:Bind Path="Style[ValuePath]"/>
                            </Data:MultiBind>
                        </Behavior:BindingBehavior.Path>
                    </Behavior:BindingBehavior>
                </e:Interaction.Behaviors>
            </i:MatrixControl>
        </StackPanel>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ⬤ Number-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Number}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[LayoutOrientation], Value={x:Static Ion1:Orient.Horizontal}}">
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="60*,40*"
                        i:XPanel.VerticalContentAlignment="Center">
                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.NumberSlider}}"
                            Margin="{i:Constant Key=ThickRight}"
                            Visibility="{i:HasFlag Style[Layout], Result=Visibility, Value={x:Static Ion1:NumberLayout.Slider}}"/>
                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.NumberText}}"
                            Visibility="{i:HasFlag Style[Layout], Result=Visibility, Value={x:Static Ion1:NumberLayout.Text}}"/>
                    </Grid>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,Auto">
                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.NumberSlider}}"
                            Margin="{i:Constant Key=ThickDown}"
                            Visibility="{i:HasFlag Style[Layout], Result=Visibility, Value={x:Static Ion1:NumberLayout.Slider}}"/>
                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.NumberText}}"
                            Visibility="{i:HasFlag Style[Layout], Result=Visibility, Value={x:Static Ion1:NumberLayout.Text}}"/>
                    </Grid>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.NumberSlider}">
        <DataTemplate.Resources>
            <Style x:Key="GradientSliderDecreaseButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background">
                    <Setter.Value>
                        <Data:MultiBind ConverterName="Gradient" ConverterParameter="0">
                            <Data:Ancestor Path="DataContext.Style[Gradient]" FromType="Slider"/>
                            <Data:Ancestor Path="Value" FromType="Slider"/>
                            <Data:Ancestor Path="Minimum" FromType="Slider"/>
                            <Data:Ancestor Path="Maximum" FromType="Slider"/>
                        </Data:MultiBind>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Height" Value="6"/>
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Height="{TemplateBinding Height}"
                                Width="{TemplateBinding Width}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GradientSliderIncreaseButtonStyle" TargetType="{x:Type RepeatButton}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background" Value="#22000000" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Height" Value="6"/>
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type RepeatButton}">
                            <Border 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GradientSliderThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="Background">
                    <Setter.Value>
                        <Data:MultiBind ConverterName="Gradient" ConverterParameter="1">
                            <Data:Ancestor Path="DataContext.Style[Gradient]" FromType="Slider"/>
                            <Data:Ancestor Path="Value" FromType="Slider"/>
                            <Data:Ancestor Path="Minimum" FromType="Slider"/>
                            <Data:Ancestor Path="Maximum" FromType="Slider"/>
                        </Data:MultiBind>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Height" Value="16"/>
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Width" Value="10"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <Border 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                ClipToBounds="True" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="GradientSliderStyle" TargetType="{x:Type Slider}">
                <Setter Property="Focusable" Value="False" />
                <Setter Property="IsSnapToTickEnabled" Value="True" />
                <Setter Property="MinWidth" Value="48" />
                <Setter Property="OverridesDefaultStyle" Value="True" />
                <Setter Property="SnapsToDevicePixels" Value="True" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Slider}">
                            <Track x:Name="PART_Track" 
                                Grid.Row="1" 
                                Height="{TemplateBinding Height}" 
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
                                VerticalAlignment="{TemplateBinding VerticalAlignment}" 
                                Width="{TemplateBinding Width}">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton x:Name="PART_DecreaseRepeatButton" 
                                        Command="Slider.DecreaseLarge"
                                        Style="{StaticResource GradientSliderDecreaseButtonStyle}"/>
                                </Track.DecreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource GradientSliderThumbStyle}"/>
                                </Track.Thumb>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton x:Name="PART_IncreaseRepeatButton"  
                                        Command="Slider.IncreaseLarge"
                                        Style="{StaticResource GradientSliderIncreaseButtonStyle}"/>
                                </Track.IncreaseRepeatButton>
                            </Track>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Cursor" Value="Arrow" />
                        <Setter Property="Opacity" Value="0.6" />
                    </Trigger>
                </Style.Triggers>
            </Style>
        </DataTemplate.Resources>
        <Slider x:Name="Slider"
            IsEnabled="{i:Bind Style[CanEdit]}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static Slider.ValueProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
                <Behavior:BindingBehavior Property="{x:Static Slider.MaximumProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="OneWay" Path="Style[Maximum]" 
                    Source="{i:Bind}" SourceTrigger="Default"/>
                <Behavior:BindingBehavior Property="{x:Static Slider.MinimumProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="OneWay" Path="Style[Minimum]" 
                    Source="{i:Bind}" SourceTrigger="Default"/>
                <Behavior:BindingBehavior Property="{x:Static Slider.TickFrequencyProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="OneWay" Path="Style[Step]" 
                    Source="{i:Bind}" SourceTrigger="Default"/>
            </e:Interaction.Behaviors>
        </Slider>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Equal Style[Gradient]}" Value="False">
                <Setter TargetName="Slider" Property="Style" Value="{StaticResource GradientSliderStyle}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.NumberText}">
        <i:DoubleUpDown CanUpDown="{i:Bind Style[CanUpDown]}"
            Increment="{i:Bind Style[Step]}"
            IsReadOnly="{i:Bind Style[CanEdit], Convert=Data:Invert}"
            i:XTextBoxBase.Left="{DynamicResource {x:Static i:ObjectControlKey.ModelTextLeft}}"
            i:XTextBoxBase.Right="{DynamicResource {x:Static i:ObjectControlKey.ModelTextRight}}"
            i:XTextBoxBase.Placeholder="{i:Bind}"
            i:XTextBoxBase.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}"
            Maximum="{i:Bind Style[Maximum]}"
            Minimum="{i:Bind Style[Minimum]}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior PropertyGeneric="{x:Static i:DoubleUpDown.ValueProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
                <Behavior:BindingBehavior PropertyGeneric="{x:Static i:DoubleUpDown.MaximumProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="OneWay" Path="Style[Maximum]" 
                    Source="{i:Bind}" SourceTrigger="Default"/>
                <Behavior:BindingBehavior PropertyGeneric="{x:Static i:DoubleUpDown.MinimumProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="OneWay" Path="Style[Minimum]" 
                    Source="{i:Bind}" SourceTrigger="Default"/>
                <Behavior:BindingBehavior PropertyGeneric="{x:Static i:DoubleUpDown.IncrementProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="OneWay" Path="Style[Step]" 
                    Source="{i:Bind}" SourceTrigger="Default"/>
            </e:Interaction.Behaviors>
        </i:DoubleUpDown>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖Object-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ObjectDefaultContent}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Compare32 StyleModel.Default.Source.Count, Type=Greater}">
            <i:Display.Resources>
                <Data:Reference x:Key="Control" Data="{i:Bind From=FindAncestor, FromType={x:Type i:ObjectControl}}"/>
            </i:Display.Resources>
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}" i:Display.TemplateKey="{i:Bind Data.Orientation, Source={StaticResource Control}}">
                        <i:Display.TemplateSelector>
                            <i:KeyTemplateSelector>
                                <i:KeyTemplate DataKey="{x:Static Orientation.Horizontal}">
                                    <i:MemberBar ItemsSource="{i:Bind StyleModel.Default.View}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Orientation.Vertical}">
                                    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Compare32 Depth, Type=Equal, Value=0}">
                                        <i:Display.ConditionalTemplate>
                                            <DataTemplate>
                                                <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                                    Focusable="False"
                                                    i:XScrollViewer.Overlap="True"
                                                    VerticalScrollBarVisibility="Auto">
                                                    <i:MemberControl ItemsSource="{i:Bind StyleModel.Default.View}"
                                                        ItemTemplate="{DynamicResource {x:Static i:ObjectControlKey.Member}}"
                                                        Orientation="Vertical"/>
                                                </ScrollViewer>
                                            </DataTemplate>
                                        </i:Display.ConditionalTemplate>
                                        <i:Display.DefaultTemplate>
                                            <DataTemplate>
                                                <i:MemberControl ItemsSource="{i:Bind StyleModel.Default.View}"
                                                    ItemTemplate="{DynamicResource {x:Static i:ObjectControlKey.Member}}"
                                                    Orientation="Vertical"/>
                                            </DataTemplate>
                                        </i:Display.DefaultTemplate>
                                    </i:Display>
                                </i:KeyTemplate>
                            </i:KeyTemplateSelector>
                        </i:Display.TemplateSelector>
                    </i:Display>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ObjectDefaultFloat}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Compare32 SourceCollection.Count, Type=Greater}">
            <i:Display.ConditionalTemplate>
                <DataTemplate DataType="{x:Type ListCollectionView}">
                    <i:MemberControl ItemsSource="{i:Bind}" 
                        ItemTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberHorizontalAuto}}"
                        Orientation="Horizontal"/>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
        </i:Display>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ObjectDefaultPin}">
        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Compare32 SourceCollection.Count, Type=Greater}">
            <i:Display.ConditionalTemplate>
                <DataTemplate DataType="{x:Type ListCollectionView}">
                    <i:MemberControl ItemsSource="{i:Bind}"
                        ItemTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberPin}}"
                        Orientation="{i:Bind Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}}"/>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Object}">
        <Grid>
            <Grid.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>

                <Style x:Key="BorderAfter" TargetType="{x:Type Border}"/>
                
                <Style x:Key="BorderBefore" TargetType="{x:Type Border}">
                    <Setter Property="BorderBrush" Value="{i:Theme Key=Border}"/>
                    <Style.Triggers>
                        <DataTrigger Binding="{i:Bind Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}}" Value="{x:Static Orientation.Horizontal}">
                            <Setter Property="BorderThickness" Value="{i:Constant Key=ThickSmallerRight}"/>
                            <Setter Property="Margin" Value="{i:Constant Key=ThickSmallerRight}"/>
                            <Setter Property="Padding" Value="{i:Constant Key=ThickSmallerRight}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}}" Value="{x:Static Orientation.Vertical}">
                            <Setter Property="BorderThickness" Value="{i:Constant Key=ThickSmallerDown}"/>
                            <Setter Property="Margin" Value="{i:Constant Key=ThickSmallerDown}"/>
                            <Setter Property="Padding" Value="{i:Constant Key=ThickSmallerDown}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Resources>
            <!--Main-->
            <Grid x:Name="Main">
                <!--Main > Header-->
                <Border x:Name="Header" BorderBrush="{i:Theme Key=Border}" 
                    Padding="{i:Constant Key=ThickSmaller}">
                    <Border.Visibility>
                        <Data:MultiBindTrue For="Any" Result="Visibility">
                            <i:Bind Convert="Data:ConvertHasFlag" ConverterParameter="{x:Static Ion1:Filter.Search}" From="TemplatedParent" Path="Model.Style[Filter]"/>
                            <i:Bind Convert="Data:ConvertHasFlag" ConverterParameter="{x:Static Ion1:Filter.Show}" From="TemplatedParent" Path="Model.Style[Filter]"/>
                            <i:Bind Convert="Data:ConvertHasFlag" ConverterParameter="{x:Static Ion1:Filter.Group}" From="TemplatedParent" Path="Model.Style[Filter]"/>
                            <i:Bind Convert="Data:ConvertHasFlag" ConverterParameter="{x:Static Ion1:Filter.Route}" From="TemplatedParent" Path="Model.Style[Filter]"/>
                            <i:Bind Convert="Data:ConvertHasFlag" ConverterParameter="{x:Static Ion1:Filter.Sort}" From="TemplatedParent" Path="Model.Style[Filter]"/>
                        </Data:MultiBindTrue>
                    </Border.Visibility>
                    <Grid x:Name="HeaderGrid" 
                        i:XGrid.AutoColumns="True"
                        i:XGrid.Columns="*,Auto,Auto,Auto,Auto,Auto"
                        i:XPanel.VerticalContentAlignment="Center">
                        <!--#region Route-->
                        <Grid></Grid>
                        <!--
                        <i:Display Content="{i:Bind From=FindAncestor, FromType={x:Type i:IObjectControl}, Path=(i:XObjectControl.Route)}" 
                            i:Display.Condition="{i:Bind Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Filter.Route}, From=TemplatedParent, Path=Model.Style[Filter]}"
                            Visibility="{i:Compare32 Count, Result=Visibility, Type=Greater, Value=0}">
                            <i:Display.ConditionalTemplate>
                                <DataTemplate>
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelRoute}}"/>
                                </DataTemplate>
                            </i:Display.ConditionalTemplate>
                        </i:Display>
                        -->
                        <!--#endregion-->
                        <!--#region Search-->
                        <i:Display Content="{i:Bind From=TemplatedParent, Path=Model}" 
                            i:Display.Condition="{i:Bind Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Filter.Search}, From=TemplatedParent, Path=Model.Style[Filter]}"
                            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelSearch}}"/>
                        <!--#endregion-->
                        <!--#region Filter-->
                        <i:Display Content="{i:Bind From=TemplatedParent, Path=Model}" 
                            i:Display.Condition="{i:Bind Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Filter.Show}, From=TemplatedParent, Path=Model.Style[Filter]}"
                            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelFilter}}"/>
                        <!--#endregion-->
                        <!--#region Group-->
                        <i:Display Content="{i:Bind From=TemplatedParent, Path=Model}" 
                            i:Display.Condition="{i:Bind Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Filter.Group}, From=TemplatedParent, Path=Model.Style[Filter]}"
                            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.GroupButton}}"/>
                        <!--#endregion-->
                        <!--#region Sort-->
                        <i:Display Content="{i:Bind From=TemplatedParent, Path=Model}" 
                            i:Display.Condition="{i:Bind Convert=Data:ConvertHasFlag, ConverterParameter={x:Static Ion1:Filter.Sort}, From=TemplatedParent, Path=Model.Style[Filter]}"
                            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelSort}}"/>
                        <!--#endregion-->
                        <!--#region Options-->
                        <i:Display Content="{i:Bind From=TemplatedParent, Path=Model}" 
                            i:Display.Condition="{i:Equal From=TemplatedParent, Invert=True, Path=Model.Style[Options], Value={x:Static Ion1:Option.None}}"
                            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelOption}}"/>
                        <!--#endregion-->
                    </Grid>
                </Border>
                
                <!--Main > Body-->
                <Grid x:Name="Body">
                    <!--Body > Float > Left/Top-->
                    <i:Display Content="{i:Bind Data.StyleModel.LeftTopFloatExternal.View, Source={StaticResource Model}}" 
                        i:Display.Condition="{i:Compare32 Data.StyleModel.LeftTopFloatExternal.Source.Count, Source={StaticResource Model}, Type=Greater}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <Border Style="{DynamicResource BorderBefore}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultFloat}}"/>
                                </Border>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                    </i:Display>
                    
                    <!--Body >   Pin > Left/Top-->
                    <i:Display Content="{i:Bind Data.StyleModel.LeftRightPinExternal.View, Source={StaticResource Model}}" 
                        i:Display.Condition="{i:Compare32 Data.StyleModel.LeftRightPinExternal.Source.Count, Source={StaticResource Model}, Type=Greater}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <Border Style="{DynamicResource BorderBefore}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultPin}}"/>
                                </Border>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                    </i:Display>

                    <!--Body > Default-->
                    <!--<i:BinaryPanel x:Name="BodyDefault" Pin="{i:Bind Style[TabPlacement], Convert=Data:ConvertSideToSides}"/>-->
                    <Grid x:Name="BodyDefault">
                        <!--Body > Default > Header-->
                        <i:Display x:Name="BodyDefaultHeader" Content="{i:Bind}" i:Display.Condition="{i:Equal StyleModel.View, Value={x:Static Reflect0:MemberViewType.Tab}}">
                            <i:Display.ConditionalTemplate>
                                <DataTemplate>
                                    <i:Display Content="{i:Bind}" i:Display.TemplateKey="{i:Bind Style[TabPlacement]}">
                                        <i:Display.TemplateSelector>
                                            <i:KeyTemplateSelector>
                                                <i:KeyTemplate DataKey="{x:Static Ion1:Side.Bottom}">
                                                    <i:TopBorder Margin="{i:Constant Key=ThickSmallerUp}" 
                                                        Padding="{i:Constant Key=ThickSmaller}">
                                                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Tab}}"/>
                                                    </i:TopBorder>
                                                </i:KeyTemplate>
                                                <i:KeyTemplate DataKey="{x:Static Ion1:Side.Left}">
                                                    <i:RightBorder Margin="{i:Constant Key=ThickSmallerRight}" 
                                                        Padding="{i:Constant Key=ThickSmaller}">
                                                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Tab}}"/>
                                                    </i:RightBorder>
                                                </i:KeyTemplate>
                                                <i:KeyTemplate DataKey="{x:Static Ion1:Side.Right}">
                                                    <i:LeftBorder Margin="{i:Constant Key=ThickSmallerLeft}" 
                                                        Padding="{i:Constant Key=ThickSmaller}">
                                                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Tab}}"/>
                                                    </i:LeftBorder>
                                                </i:KeyTemplate>
                                                <i:KeyTemplate DataKey="{x:Static Ion1:Side.Top}">
                                                    <i:BottomBorder Margin="{i:Constant Key=ThickSmallerDown}" 
                                                        Padding="{i:Constant Key=ThickSmaller}">
                                                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.Tab}}"/>
                                                    </i:BottomBorder>
                                                </i:KeyTemplate>
                                            </i:KeyTemplateSelector>
                                        </i:Display.TemplateSelector>
                                    </i:Display>
                                </DataTemplate>
                            </i:Display.ConditionalTemplate>
                        </i:Display>
                        <!--Body > Default > Content-->
                        <Grid x:Name="BodyDefaultContent">
                            <!--Body > Default > Content > Float > Left/Top-->
                            <i:Display Content="{i:Bind Data.StyleModel.LeftTopFloat.View, Source={StaticResource Model}}" 
                                i:Display.Condition="{i:Compare32 Data.StyleModel.LeftTopFloat.Source.Count, Source={StaticResource Model}, Type=Greater}">
                                <i:Display.ConditionalTemplate>
                                    <DataTemplate>
                                        <Border Style="{DynamicResource BorderBefore}">
                                            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultFloat}}"/>
                                        </Border>
                                    </DataTemplate>
                                </i:Display.ConditionalTemplate>
                            </i:Display>
                            
                            <!--Body > Default > Content >   Pin > Left/Top-->
                            <i:Display Content="{i:Bind Data.StyleModel.LeftTopPin.View, Source={StaticResource Model}}" 
                                i:Display.Condition="{i:Compare32 Data.StyleModel.LeftTopPin.Source.Count, Source={StaticResource Model}, Type=Greater}">
                                <i:Display.ConditionalTemplate>
                                    <DataTemplate>
                                        <Border Style="{DynamicResource BorderBefore}">
                                            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultPin}}"/>
                                        </Border>
                                    </DataTemplate>
                                </i:Display.ConditionalTemplate>
                            </i:Display>

                            <!--Body > Default > Content > *-->
                            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultContent}}"/>

                            <!--Body > Default > Content >   Pin > Right/Bottom-->
                            <i:Display Content="{i:Bind Data.StyleModel.RightBottomPin.View, Source={StaticResource Model}}" 
                                i:Display.Condition="{i:Compare32 Data.StyleModel.RightBottomPin.Source.Count, Source={StaticResource Model}, Type=Greater}">
                                <i:Display.ConditionalTemplate>
                                    <DataTemplate>
                                        <Border Style="{DynamicResource BorderAfter}">
                                            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultPin}}"/>
                                        </Border>
                                    </DataTemplate>
                                </i:Display.ConditionalTemplate>
                            </i:Display>

                            <!--Body > Default > Content > Float > Right/Bottom-->
                            <i:Display Content="{i:Bind Data.StyleModel.RightBottomFloat.View, Source={StaticResource Model}}" 
                                i:Display.Condition="{i:Compare32 Data.StyleModel.RightBottomFloat.Source.Count, Source={StaticResource Model}, Type=Greater}">
                                <i:Display.ConditionalTemplate>
                                    <DataTemplate>
                                        <Border Style="{DynamicResource BorderAfter}">
                                            <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultFloat}}"/>
                                        </Border>
                                    </DataTemplate>
                                </i:Display.ConditionalTemplate>
                            </i:Display>
                        </Grid>
                    </Grid>

                    <!--Body >   Pin > Right/Bottom-->
                    <i:Display Content="{i:Bind Data.StyleModel.RightBottomPinExternal.View, Source={StaticResource Model}}" 
                        i:Display.Condition="{i:Compare32 Data.StyleModel.RightBottomPinExternal.Source.Count, Source={StaticResource Model}, Type=Greater}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <Border Style="{DynamicResource BorderAfter}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultPin}}"/>
                                </Border>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                    </i:Display>

                    <!--Body > Float > Right/Bottom-->
                    <i:Display Content="{i:Bind Data.StyleModel.RightBottomFloatExternal.View, Source={StaticResource Model}}" 
                        i:Display.Condition="{i:Compare32 Data.StyleModel.RightBottomFloatExternal.Source.Count, Source={StaticResource Model}, Type=Greater}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <Border Style="{DynamicResource BorderAfter}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ObjectDefaultFloat}}"/>
                                </Border>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                    </i:Display>
                </Grid>
            </Grid>
            
            <!--Load-->
            <i:Display x:Name="Load" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.LoadVertical}}"
                HorizontalAlignment="Center" VerticalAlignment="Center"
                Visibility="{i:Bind StyleModel.IsLoading, Convert=Data:ConvertBooleanToVisibility}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}}" Value="{x:Static Orientation.Horizontal}">
                <Setter TargetName="Body" 
                    Property="i:XGrid.AutoColumns" Value="True"/>
                <Setter TargetName="Body" 
                    Property="i:XGrid.AutoRows" Value="False"/>
                <Setter TargetName="Body" 
                    Property="i:XGrid.Columns" Value="Auto,Auto,*,Auto,Auto"/>
                <Setter TargetName="Body" 
                    Property="i:XGrid.Rows" Value="*"/>
                <Setter TargetName="BodyDefault" 
                    Property="i:XGrid.Columns" Value="Auto,*"/>
                <Setter TargetName="BodyDefault" 
                    Property="i:XGrid.Rows" Value="*"/>
                <Setter TargetName="BodyDefaultHeader" 
                    Property="Grid.Column" Value="0"/>
                <Setter TargetName="BodyDefaultHeader" 
                    Property="Grid.Row" Value="0"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="Grid.Column" Value="1"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="Grid.Row" Value="0"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.AutoColumns" Value="True"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.AutoRows" Value="False"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.Columns" Value="Auto,Auto,*,Auto,Auto"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.Rows" Value="*"/>

                <Setter TargetName="Load" Property="ContentTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.LoadHorizontal}}"/>

                <Setter TargetName="Main" Property="i:XGrid.AutoColumns" Value="True"/>
                <Setter TargetName="Main" Property="i:XGrid.AutoRows" Value="False"/>
                <Setter TargetName="Main" Property="i:XGrid.Columns" Value="Auto,*"/>
                <Setter TargetName="Main" Property="i:XGrid.Rows" Value="*"/>
                <Setter TargetName="Main" Property="i:XPanel.Spacing" Value="0,0,1,0"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}}" Value="{x:Static Orientation.Vertical}">
                <Setter TargetName="Body" 
                    Property="i:XGrid.AutoColumns" Value="False"/>
                <Setter TargetName="Body" 
                    Property="i:XGrid.AutoRows" Value="True"/>
                <Setter TargetName="Body" 
                    Property="i:XGrid.Columns" Value="*"/>
                <Setter TargetName="Body" 
                    Property="i:XGrid.Rows" Value="Auto,Auto,*,Auto,Auto"/>
                <Setter TargetName="BodyDefault" 
                    Property="i:XGrid.Columns" Value="*"/>
                <Setter TargetName="BodyDefault" 
                    Property="i:XGrid.Rows" Value="Auto,*"/>
                <Setter TargetName="BodyDefaultHeader" 
                    Property="Grid.Column" Value="0"/>
                <Setter TargetName="BodyDefaultHeader" 
                    Property="Grid.Row" Value="0"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="Grid.Column" Value="0"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="Grid.Row" Value="1"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.AutoColumns" Value="False"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.AutoRows" Value="True"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.Columns" Value="*"/>
                <Setter TargetName="BodyDefaultContent" 
                    Property="i:XGrid.Rows" Value="Auto,Auto,*,Auto,Auto"/>

                <Setter TargetName="Load" Property="ContentTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.LoadVertical}}"/>

                <Setter TargetName="Main" Property="i:XGrid.AutoColumns" Value="False"/>
                <Setter TargetName="Main" Property="i:XGrid.AutoRows" Value="True"/>
                <Setter TargetName="Main" Property="i:XGrid.Columns" Value="*"/>
                <Setter TargetName="Main" Property="i:XGrid.Rows" Value="Auto,*"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ⬤ Path-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Path}">
        <i:PathBox x:Name="PathBox"
            BrowseButtonVisibility="{i:Bind CanBrowse, Convert=Data:ConvertBooleanToVisibility, From=Self}"
            CanBrowse="{i:Bind Style[PathButtonBrowseVisible]}"
            IconVisibility="{i:Bind Style[PathIconVisible], Convert=Data:ConvertBooleanToVisibility}"
            IsReadOnly="{i:Bind Style[CanEdit], Convert=Data:Invert}"
            i:XTextBox.ClearButtonVisibility="{i:Bind Style[PathButtonClearVisible], Convert=Data:ConvertBooleanToVisibility}"
            i:XTextBoxBase.Placeholder="{i:Bind}"
            i:XTextBoxBase.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}"
            i:XTextBoxBase.ValidationIconSuccessVisibility="Visible">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:PathBox.TextProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:PathBox>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Style[Template]}" Value="{x:Static Ion1:Template.PathFile}">
                <Setter TargetName="PathBox" Property="BrowseMode" Value="OpenFile"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[Template]}" Value="{x:Static Ion1:Template.PathFolder}">
                <Setter TargetName="PathBox" Property="BrowseMode" Value="OpenFolder"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[Template]}" Value="{x:Static Ion1:Template.Path}">
                <Setter TargetName="PathBox" Property="BrowseMode" Value="Open"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔PathFile-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.PathFile}">
        <i:Display Content="{i:Bind}" ContentTemplate="{StaticResource {x:Static i:ObjectControlTemplate.Path}}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔PathFolder-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.PathFolder}">
        <i:Display Content="{i:Bind}" ContentTemplate="{StaticResource {x:Static i:ObjectControlTemplate.Path}}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Password-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Password}">
        <PasswordBox IsEnabled="{i:Bind Style[CanEdit]}"
            i:XPasswordBox.Placeholder="{i:Bind}"
            i:XPasswordBox.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:XPasswordBox.PasswordProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </PasswordBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖Pattern-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Pattern}">
        <!--
        <StackPanel Margin="{i:Constant Key=Thick}">
            <Slider Value="{i:Bind Width, ElementName=PatternControl, Trigger=PropertyChanged, Way=2}"
                Margin="0,0,0,5"
                Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                Minimum="64"/>
            <i:PatternControl x:Name="PatternControl"
                BorderThickness="0"
                CanvasLength="180"
                DotLength="32"
                HorizontalAlignment="Left"
                InnerDotLength="24"
                IsEnabled="{i:Bind Style[CanEdit]}">
                <e:Interaction.Behaviors>
                    <Behavior:BindingBehavior Property="{x:Static i:PatternControl.PatternProperty}" 
                        Converter="{i:Bind Style[ValueConvert]}" Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}">
                        <Behavior:BindingBehavior.Path>
                            <Data:MultiBind ConverterName="Path">
                                <i:Bind Source="Value"/>
                                <i:Bind Path="Style[ValuePath]"/>
                            </Data:MultiBind>
                        </Behavior:BindingBehavior.Path>
                    </Behavior:BindingBehavior>
                </e:Interaction.Behaviors>
            </i:PatternControl>
        </StackPanel>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖Point-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Point}">
        <!--
        <StackPanel Margin="{i:Constant Key=Thick}">
            <Slider Value="{i:Bind Zoom, ElementName=PointControl, Trigger=PropertyChanged, Way=2}"
                Margin="0,0,0,5"
                Maximum="{Data:Ancestor ActualWidth, StackPanel}"
                Minimum="64"/>
            <i:PointControl x:Name="PointControl"
                HorizontalAlignment="Left"
                Zoom="128">
                <e:Interaction.Behaviors>
                    <Behavior:BindingBehavior Property="{x:Static i:PointControl.PointsProperty}" 
                        Converter="{i:Bind Style[ValueConvert]}" Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}">
                        <Behavior:BindingBehavior.Path>
                            <Data:MultiBind ConverterName="Path">
                                <i:Bind Source="Value"/>
                                <i:Bind Path="Style[ValuePath]"/>
                            </Data:MultiBind>
                        </Behavior:BindingBehavior.Path>
                    </Behavior:BindingBehavior>
                </e:Interaction.Behaviors>
            </i:PointControl>
        </StackPanel>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔Progress-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Progress}">
        <ProgressBar Maximum="{i:Bind Style[ProgressMaximum]}" Minimum="{i:Bind Style[ProgressMinimum]}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static ProgressBar.ValueProperty}"
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </ProgressBar>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔ProgressRound-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.ProgressRound}">
        <i:ProgressRing Maximum="{i:Bind Style[ProgressMaximum]}" Minimum="{i:Bind Style[ProgressMinimum]}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:ProgressRing.ValueProperty}"
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:ProgressRing>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔SearchOptions-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.SearchOptions}">
        <i:Element>
            <i:ImageToggleButton x:Name="ImageToggleButton" Source="{i:Image Key=Search}"
                ToolTip="{l:Loc Search}">
                <i:ImageToggleButton.Resources>
                    <Data:Reference x:Key="Data" Data="{i:Bind}"/>
                </i:ImageToggleButton.Resources>
                <i:ImageToggleButton.Menu>
                    <ContextMenu DataContext="{i:Bind PlacementTarget.DataContext, From=Self}"
                        i:XContextMenu.Header="{l:Loc Search}" 
                        i:XContextMenu.HeaderIcon="{i:Image Key=Search}">
                        <ContextMenu.Resources>
                            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
                                <Setter Property="IsCheckable" Value="True"/>
                                <Setter Property="StaysOpenOnClick" Value="True"/>
                                <Style.Triggers>
                                    <Trigger Property="Tag" Value="{x:Null}">
                                        <Setter Property="Header" Value="{Data:MultiBindLocalize}"/>
                                        <Setter Property="Icon" Value="{i:Bind}"/>
                                        <Setter Property="i:XMenuItem.Enum" Value="{i:Bind}"/>
                                        <Setter Property="i:XMenuItem.IconTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectImage}}"/>
                                        <Setter Property="ToolTip" Value="{Data:MultiBindDescription}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Data:SearchCondition}">
                                        <Setter Property="i:XMenuItem.EnumSource" Value="{i:Bind Data.Condition, Mode=TwoWay, Source={StaticResource Data}}"/>
                                        <Setter Property="i:XMenuItem.GroupName" Value="0"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Bind Convert=Data:ConvertObjectToType}" Value="{x:Type Data:SearchWord}">
                                        <Setter Property="i:XMenuItem.EnumSource" Value="{i:Bind Data.Word, Mode=TwoWay, Source={StaticResource Data}}"/>
                                        <Setter Property="i:XMenuItem.GroupName" Value="1"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContextMenu.Resources>
                        <ContextMenu.ItemsSource>
                            <CompositeCollection>
                                <MenuItem Tag="0" Header="{l:Loc Case}"
                                    IsCheckable="True"
                                    IsChecked="{i:Bind Case, Mode=TwoWay}"/>
                                <Separator/>
                                <CollectionContainer Collection="{i:Enumerate Data:SearchCondition}"/>
                                <Separator/>
                                <CollectionContainer Collection="{i:Enumerate Data:SearchWord}"/>
                            </CompositeCollection>
                        </ContextMenu.ItemsSource>
                    </ContextMenu>
                </i:ImageToggleButton.Menu>
            </i:ImageToggleButton>
        </i:Element>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Convert=Data:Is, ConverterParameter={x:Type Reflect:MemberBase}}" Value="True">
                <Setter TargetName="ImageToggleButton" Property="DataContext" Value="{i:Bind Value}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Convert=Data:Is, ConverterParameter={x:Type Reflect:MemberBase}}" Value="False">
                <Setter TargetName="ImageToggleButton" Property="DataContext" Value="{i:Bind .}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ⬤ Text-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Text}">
        <TextBox x:Name="TextBox"
            AcceptsReturn="{i:Bind Style[TextLineMultiple]}"
            IsReadOnly="{i:Bind Style[CanEdit], Convert=Data:Invert}"
            i:XTextBox.ClearButtonVisibility="Collapsed"
            i:XTextBox.EnterButtonSource="{i:Bind Style[EnterImage], Convert=Data:ConvertToImageSource}"
            i:XTextBox.EnterButtonVisibility="{i:Bind Style[EnterCommand], Convert=Data:ConvertObjectToVisibility}"
            i:XTextBoxBase.Left="{DynamicResource {x:Static i:ObjectControlKey.ModelTextLeft}}"
            i:XTextBoxBase.Placeholder="{i:Bind}"
            i:XTextBoxBase.PlaceholderTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelPlaceholder}}"
            i:XTextBoxBase.Regex="{i:Bind Style[TextExpression]}"
            i:XTextBoxBase.Right="{DynamicResource {x:Static i:ObjectControlKey.ModelTextRight}}"
            i:XTextBoxBase.SuggestionHandler="{i:Bind Style[SuggestionHandler], Convert=Data:ConvertTypeToObject}"
            MaxLength="{i:Bind Style[TextLength]}"
            MinLines="{i:Bind Style[TextLineMinimum]}">
            <TextBox.Resources>
                <Data:Reference x:Key="Member" Data="{i:Bind}"/>
            </TextBox.Resources>
            <i:XTextBox.EnterCommand>
                <Data:MultiBind ConverterName="PropertyValue">
                    <Binding Path="Parent.Value"/>
                    <Binding Path="Style[EnterCommand]"/>
                </Data:MultiBind>
            </i:XTextBox.EnterCommand>
            <i:XTextBoxBase.SuggestionCommand>
                <Data:MultiBind ConverterName="PropertyValue">
                    <Binding Path="Data.Parent.Value" Source="{StaticResource Member}"/>
                    <Binding Path="Data.Style[SuggestionCommandProperty]" Source="{StaticResource Member}"/>
                </Data:MultiBind>
            </i:XTextBoxBase.SuggestionCommand>
            <i:XTextBoxBase.Suggestions>
                <Data:MultiBind ConverterName="PropertyValue">
                    <Binding Path="Data.Parent.Value" Source="{StaticResource Member}"/>
                    <Binding Path="Data.Style[SuggestionProperty]" Source="{StaticResource Member}"/>
                </Data:MultiBind>
            </i:XTextBoxBase.Suggestions>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static TextBox.TextProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </TextBox>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Style[CanSelect]}" Value="False">
                <Setter TargetName="TextBox" Property="BorderThickness" Value="0"/>
                <Setter TargetName="TextBox" Property="Padding" Value="0"/>
                <Setter TargetName="TextBox" Property="IsHitTestVisible" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[TextLength]}" Value="0">
                <Setter TargetName="TextBox" Property="MaxLength" Value="{x:Static System1:Int32.MaxValue}"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[TextLineMultiple]}" Value="True">
                <Setter TargetName="TextBox" Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
                <Setter TargetName="TextBox" Property="TextBlock.LineHeight" Value="15"/>
                <Setter TargetName="TextBox" Property="VerticalContentAlignment" Value="Top"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[TextTrim]}" Value="None">
                <Setter TargetName="TextBox" Property="i:XTextBoxBase.TextTrimming" Value="None"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[TextTrim]}" Value="Character">
                <Setter TargetName="TextBox" Property="i:XTextBoxBase.TextTrimming" Value="CharacterEllipsis"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[TextTrim]}" Value="Word">
                <Setter TargetName="TextBox" Property="i:XTextBoxBase.TextTrimming" Value="WordEllipsis"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[TextWrap]}" Value="None">
                <Setter TargetName="TextBox" Property="TextWrapping" Value="NoWrap"/>
            </DataTrigger>
            <DataTrigger Binding="{i:Bind Style[TextWrap]}" Value="Wrap">
                <Setter TargetName="TextBox" Property="TextWrapping" Value="Wrap"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Bind Style[CanClear]}" Value="True"/>
                    <Condition Binding="{i:Bind Style[CanSelect]}" Value="True"/>
                    <Condition Binding="{i:Bind Style[CanEdit]}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="TextBox" Property="i:XTextBox.ClearButtonVisibility" Value="Visible"/>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖TextMarkDown (redirect to "TextMarkUp" for now!)-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.TextMarkDown}">
        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.TextMarkUp}}"/>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖TextMarkUp-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.TextMarkUp}">
        <!--
        <RichTextBox x:Name="RichTextBox"
            IsDocumentEnabled="True" 
            IsReadOnly="True" 
            TextBlock.FontSize="16"
            TextBlock.TextAlignment="Left">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:XRichTextBox.MarkUpProperty}" StringFormat="{i:Bind Style[StringFormat]}"
                    Converter="{i:Bind Style[Converter]}" ConverterParameter="{i:Bind TextAttribute.ConverterParameter}" Mode="OneWay" 
                    Path="{i:Bind Style[Path]}" Source="{i:Bind Value}"/>
            </e:Interaction.Behaviors>
        </RichTextBox>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind Style[CanSelect]}" Value="False">
                <Setter TargetName="RichTextBox" Property="BorderThickness" Value="0"/>
                <Setter TargetName="RichTextBox" Property="Padding" Value="0"/>
                <Setter TargetName="RichTextBox" Property="IsHitTestVisible" Value="False"/>
            </DataTrigger>
        </DataTemplate.Triggers>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✔TimeZoneInfo-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.TimeZoneInfo}">
        <i:TimeZoneBox IsEnabled="{i:Bind Style[CanEdit]}"
            i:XComboBox.Placeholder="{i:Bind}"
            i:XComboBox.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:TimeZoneBox.SelectedItemProperty}" 
                    Converter="{i:Bind Style[ValueConvert]}" ConverterParameter="{i:Bind Style[ValueConvertParameter]}" 
                    Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}" StringFormat="{i:Bind Style[ValueFormat]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:TimeZoneBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖Tokens-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Tokens}">
        <!--
        <i:TokenBox
            IsReadOnly="{i:Bind Style[CanEdit], Convert=Data:Invert}"
            i:XTextBoxBase.CanClearSuggestions="{i:Bind Style[CanClearSuggestions]}"
            i:XTextBoxBase.Placeholder="{i:Bind}"
            i:XTextBoxBase.PlaceholderTemplate="{StaticResource {x:Static i:ObjectControlKey.ModelPlaceholder}}"
            i:XTextBoxBase.SuggestionHandler="{i:Bind Style[SuggestionHandler], Convert=Data:ConvertTypeToObject}"
            TokenDelimiter="{i:Bind Style[Delimiter]}">
            <i:TokenBox.Resources>
                <Data:Reference x:Key="Member" Data="{i:Bind}"/>
            </i:TokenBox.Resources>
            <i:XTextBoxBase.SuggestionCommand>
                <Data:MultiBind ConverterName="PropertyValue">
                    <Binding Path="Data.Parent.Value" Source="{StaticResource Member}"/>
                    <Binding Path="Data.Style[SuggestionCommandProperty]" Source="{StaticResource Member}"/>
                </Data:MultiBind>
            </i:XTextBoxBase.SuggestionCommand>
            <i:XTextBoxBase.Suggestions>
                <Data:MultiBind ConverterName="PropertyValue">
                    <Binding Path="Data.Parent.Value" Source="{StaticResource Member}"/>
                    <Binding Path="Data.Style[SuggestionProperty]" Source="{StaticResource Member}"/>
                </Data:MultiBind>
            </i:XTextBoxBase.Suggestions>
            <i:XTextBoxBase.SuggestionTemplate>
                <DataTemplate>
                    <TextBlock Text="{i:Bind}"/>
                </DataTemplate>
            </i:XTextBoxBase.SuggestionTemplate>
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:TokenBox.SourceProperty}" 
                    Mode="TwoWay" Path="Value" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}"
                    ValidatesOnDataErrors="True" ValidatesOnNotifyDataErrors="True" ValidationRules="{i:Bind Style[Validation]}"/>
            </e:Interaction.Behaviors>
        </i:TokenBox>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region ✖Unit-->

    <DataTemplate x:Key="{x:Static i:ObjectControlTemplate.Unit}">
        <!--
        <i:UnitControl IsReadOnly="{i:Bind Style[CanEdit], Convert=Data:Invert}"
            Resolution="{i:Bind Style[UnitResolution]}"
            StringFormat="{i:Bind Style[UnitFormat]}"
            Unit="{i:Bind Style[UnitType]}">
            <e:Interaction.Behaviors>
                <Behavior:BindingBehavior Property="{x:Static i:UnitControl.ValueProperty}"
                    Converter="{i:Bind Style[ValueConvert]}" Mode="{i:Bind Style[ValueMode]}" Source="{i:Bind}" SourceTrigger="{i:Bind Style[ValueTrigger]}">
                    <Behavior:BindingBehavior.Path>
                        <Data:MultiBind ConverterName="Path">
                            <i:Bind Source="Value"/>
                            <i:Bind Path="Style[ValuePath]"/>
                        </Data:MultiBind>
                    </Behavior:BindingBehavior.Path>
                </Behavior:BindingBehavior>
            </e:Interaction.Behaviors>
        </i:UnitControl>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#endregion-->

    <!--#region MemberBar -->

    <Style x:Key="{x:Type i:MemberBar}" TargetType="{x:Type i:MemberBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static i:ObjectControlKey.StyleItemHorizontal}}"/>
        <Setter Property="ItemTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberHorizontalAuto}}"/>
        <Setter Property="i:XItemsControl.GroupStyle" Value="{DynamicResource {x:Static i:ObjectControlKey.GroupStyleHorizontal}}"/>
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Equal DataContext.Members.SelectedTab, From=Self}" Value="False"/>
                    <Condition Binding="{i:Bind DataContext.Members.SelectedTab.Layout, From=Self}" Value="Stretch"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <UniformGrid Columns="{i:Bind DataContext.Members.View.Default.Source.Count, From=Self}"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!--#endregion MemberBar-->

    <!--#region MemberControl -->

    <Style x:Key="{x:Type i:MemberControl}" TargetType="{x:Type i:MemberControl}">
        <!-- To do: Changing 'AlternationCount' and 'ItemsControl.AlternationCount' to 1, or removing only one of these breaks alternation. -->
        <Setter Property="AlternationCount" Value="2"/>
        <Setter Property="ItemsControl.AlternationCount" Value="2"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="{i:Bind Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}}"/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="VirtualizingPanel.IsContainerVirtualizable" Value="True"/>
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static i:ObjectControlKey.StyleItemHorizontal}}"/>
                <Setter Property="i:XItemsControl.GroupStyle" Value="{DynamicResource {x:Static i:ObjectControlKey.GroupStyleHorizontal}}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static i:ObjectControlKey.StyleItemVertical}}"/>
                <Setter Property="i:XItemsControl.GroupStyle" Value="{DynamicResource {x:Static i:ObjectControlKey.GroupStyleVertical}}"/>
            </Trigger>
            <!--
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Equal Orientation, From=Self}" Value="Horizontal"/>
                    <Condition Binding="{i:Equal DataContext.Members.SelectedTab, From=Self}" Value="False"/>
                    <Condition Binding="{i:Bind DataContext.Members.SelectedTab.Layout, From=Self}" Value="Stretch"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <UniformGrid Columns="{i:Bind DataContext.StyleModel.Default.Source.Count, From=Self}"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Equal Orientation, From=Self}" Value="Vertical"/>
                    <Condition Binding="{i:Equal DataContext.Members.SelectedTab, From=Self}" Value="False"/>
                    <Condition Binding="{i:Bind DataContext.Members.SelectedTab.Layout, From=Self}" Value="Stretch"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <UniformGrid Rows="{i:Bind DataContext.StyleModel.Default.Source.Count, From=Self}"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            -->
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region MemberControlItem -->

    <Style x:Key="{x:Type i:MemberControlItem}" TargetType="{x:Type i:MemberControlItem}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
    </Style>

    <!--#endregion MemberControlItem-->

    <!--#region NameElement -->

    <DataTemplate x:Key="{x:Static i:NameElementKey.Template}">
        <i:Display Content="{i:Bind}" 
            i:Display.Condition="{i:Equal Style[NameIcon], Value={x:Null}}">
            <i:Display.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:Display.Resources>
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[NameTemplate], Value={x:Null}}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <TextBlock x:Name="TextBlock"
                                    i:XTextBlock.SplitText="{Data:MultiBindMemberName}"
                                    i:XTextBlock.SplitTextCase="{i:Bind Parent.SearchOptions.Case}"
                                    i:XTextBlock.SplitTextCondition="{i:Bind Parent.SearchOptions.Condition}"
                                    i:XTextBlock.SplitTextWord="{i:Bind Parent.SearchOptions.Word}"
                                    TextTrimming="CharacterEllipsis"
                                    VerticalAlignment="Center">
                                    <i:XTextBlock.SplitTextStyle>
                                        <Style TargetType="Run">
                                            <Setter Property="Background" Value="{i:Theme Accent}"/>
                                            <Setter Property="Foreground" Value="{i:Theme AccentForeground}"/>
                                        </Style>
                                    </i:XTextBlock.SplitTextStyle>
                                </TextBlock>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{i:Bind Parent.SearchName}" Value="Category">
                                        <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextKey" Value="{x:Null}" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Bind Parent.SearchName}" Value="Name">
                                        <Setter TargetName="TextBlock" Property="i:XTextBlock.SplitTextKey" Value="{i:Bind Parent.Search}" />
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                        <i:Display.DefaultTemplate>
                            <DataTemplate>
                                <i:Display Content="{i:Bind}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                            <Behavior:DynamicResourceBehavior.Key>
                                                <Data:MultiBind ConverterName="FieldValueStatic">
                                                    <Binding Path="Data.Style[NameTemplate]" Source="{StaticResource Model}"/>
                                                    <Binding Path="Data.Style[NameTemplateType]" Source="{StaticResource Model}"/>
                                                </Data:MultiBind>
                                            </Behavior:DynamicResourceBehavior.Key>
                                        </Behavior:DynamicResourceBehavior>
                                    </e:Interaction.Behaviors>
                                </i:Display>
                            </DataTemplate>
                        </i:Display.DefaultTemplate>
                    </i:Display>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:ImageElement Source="{i:Bind Style[NameIcon], Convert=Data:ConvertToImageSource}"/>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <Style x:Key="{x:Type i:NameElement}" TargetType="{x:Type i:NameElement}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {x:Static i:NameElementKey.Template}}"/>
        <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTip}}"/>
        <Setter Property="i:XToolTip.Header" Value="{i:Bind}"/>
        <Setter Property="i:XToolTip.HeaderTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberHeader}}"/>
        <Setter Property="i:XToolTip.HeaderIcon" Value="{x:Null}"/>
        <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
        <Setter Property="ToolTip" Value="{i:Bind DataContext, From=Self}"/>
    </Style>

    <!--#endregion NameElement-->

    <!--#region ValueElement -->
    <!--   
    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[NullText], Value={x:Null}}">
            <i:Display.Resources>
                <Data:Reference x:Key="Model" Data="{i:Bind}"/>
            </i:Display.Resources>
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[NullTemplate], Value={x:Null}}">
                        <i:Display.ConditionalTemplate>
                            <DataTemplate>
                                <TextBlock Text="{i:Text NoTemplateFound}"
                                    FontStyle="Italic"
                                    HorizontalAlignment="Left"
                                    Margin="0,5"
                                    Opacity="{i:Constant Key=OpacityDisable}"
                                    TextTrimming="CharacterEllipsis"/>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                        <i:Display.DefaultTemplate>
                            <DataTemplate>
                                <i:Display Content="{i:Bind}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                            <Behavior:DynamicResourceBehavior.Key>
                                                <Data:MultiBind ConverterName="FieldValueStatic">
                                                    <Binding Path="Data.Style[NullTemplate]" Source="{StaticResource Model}"/>
                                                    <Binding Path="Data.Style[NullTemplateType]" Source="{StaticResource Model}"/>
                                                </Data:MultiBind>
                                            </Behavior:DynamicResourceBehavior.Key>
                                        </Behavior:DynamicResourceBehavior>
                                    </e:Interaction.Behaviors>
                                </i:Display>
                            </DataTemplate>
                        </i:Display.DefaultTemplate>
                    </i:Display>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <TextBlock Text="{Data:MultiBindLocalize Style[NullText]}"
                        FontStyle="Italic"
                        HorizontalAlignment="Left"
                        Margin="{i:Constant Key=ThickUpDown}"
                        Opacity="{i:Constant Key=OpacityDisable}"
                        TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    -->

    <DataTemplate x:Key="{x:Static i:ValueElementKey.Template}">
        <i:Display Content="{i:Bind}" 
            i:Display.Condition="{i:Equal Style.Error, Value={x:Null}}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ValueElementKey.TemplateValid}}"
            i:Display.DefaultTemplate="{DynamicResource {x:Static i:ValueElementKey.TemplateInvalid}}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ValueElementKey.TemplateValid}">
        <i:Display Content="{i:Bind}" 
            i:Display.Condition="{i:Compare32 Depth, Type=Equal, Value=0}"
            i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ValueElementKey.TemplateValidRaw}}">
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*">
                        <i:Display Content="{i:Bind}">
                            <i:Display.Condition>
                                <Data:MultiBindTrue For="All">
                                    <i:Equal Path="Orientation" 
                                        From="FindAncestor" FromType="{x:Type i:ObjectControl}" Value="{x:Static Orientation.Vertical}"/>
                                    <i:Equal Path="StyleModel" 
                                        Invert="True" Value="{x:Null}"/>
                                    <i:Compare32 Path="StyleModel.Messages.Count" 
                                        Type="Greater" Value="0"/>
                                </Data:MultiBindTrue>
                            </i:Display.Condition>
                            <i:Display.ConditionalTemplate>
                                <DataTemplate>
                                    <ItemsControl ItemsSource="{i:Bind StyleModel.Messages}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <i:ResultControl Content="{i:Bind}" Margin="{i:Constant Key=ThickDown}"/>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </DataTemplate>
                            </i:Display.ConditionalTemplate>
                        </i:Display>
                        <i:BinaryControl Content="{i:Bind}" Orientation="Vertical"
                            Side="{i:Bind Style[CaptionSide]}"
                            Space="{i:Constant Key=Double}">
                            <i:BinaryControl.ContentTemplate1>
                                <DataTemplate>
                                    <i:Display Content="{i:Bind}" 
                                        i:Display.Condition="{i:Equal Style[Caption], Invert=True}"
                                        i:Display.ConditionalTemplate="{DynamicResource {x:Static i:ObjectControlKey.MemberCaption}}"/>
                                </DataTemplate>
                            </i:BinaryControl.ContentTemplate1>
                            <i:BinaryControl.ContentTemplate2>
                                <DataTemplate>
                                    <Grid i:XGrid.AutoColumns="True" i:XGrid.Columns="*,Auto">
                                        <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ValueElementKey.TemplateValidRaw}}"/>
                                        <i:Display Content="{i:Bind}" i:Display.Condition="{i:Equal Style[Options], Invert=True, Value={x:Static Ion1:Option.None}}" 
                                            VerticalAlignment="Top">
                                            <i:Display.ConditionalTemplate>
                                                <DataTemplate>
                                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlKey.ModelOption}}"
                                                        Margin="{i:Constant Key=ThickLeft}"/>
                                                </DataTemplate>
                                            </i:Display.ConditionalTemplate>
                                        </i:Display>
                                    </Grid>
                                </DataTemplate>
                            </i:BinaryControl.ContentTemplate2>
                        </i:BinaryControl>
                    </Grid>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:ValueElementKey.TemplateValidRaw}">
        <i:Display Content="{i:Bind}" Condition="{Data:Is Style[Template], Type={x:Type Ion1:Template}}">
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}" TemplateKey="{i:Bind Style[Template]}">
                        <i:Display.TemplateSelector>
                            <i:KeyTemplateSelector>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Address}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Address}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Angle}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Angle}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Button}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Button}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ButtonCancel}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ButtonCancel}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ButtonDefault}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ButtonDefault}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ButtonImage}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ButtonImage}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Check}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Check}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.CheckImage}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.CheckImage}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.CheckSwitch}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.CheckSwitch}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Color}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Color}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ColorModel}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ColorModel}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ColorText}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ColorText}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Enum}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Enum}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.EnumFlag}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.EnumFlag}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.EnumFlagButton}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.EnumFlag}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Gradient}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Gradient}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Image}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Image}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ImageColor}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ImageColor}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ImageSlide}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ImageSlide}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ImageThumb}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ImageThumb}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.List}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.List}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ListButton}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ListButton}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ListCombo}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ListCombo}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Matrix}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Matrix}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Number}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Number}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Object}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Object}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Password}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Password}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Path}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Path}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.PathFile}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.PathFile}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.PathFolder}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.PathFolder}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Pattern}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Pattern}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Point}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Point}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Progress}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Progress}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.ProgressRound}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.ProgressRound}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Text}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Text}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.TextMarkDown}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.TextMarkDown}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.TextMarkUp}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.TextMarkUp}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Token}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Tokens}}"/>
                                </i:KeyTemplate>
                                <i:KeyTemplate DataKey="{x:Static Ion1:Template.Unit}">
                                    <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:ObjectControlTemplate.Unit}}"/>
                                </i:KeyTemplate>
                            </i:KeyTemplateSelector>
                        </i:Display.TemplateSelector>
                    </i:Display>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:Display Content="{i:Bind}">
                        <e:Interaction.Behaviors>
                            <Behavior:DynamicResourceBehavior Property="{x:Static i:Display.ContentTemplateProperty}">
                                <Behavior:DynamicResourceBehavior.Key>
                                    <Data:MultiBind ConverterName="FieldValueStatic">
                                        <Binding Path="Style[Template]"/>
                                        <Binding Path="Style[TemplateType]"/>
                                    </Data:MultiBind>
                                </Behavior:DynamicResourceBehavior.Key>
                            </Behavior:DynamicResourceBehavior>
                        </e:Interaction.Behaviors>
                    </i:Display>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static i:ValueElementKey.TemplateInvalid}">
        <i:Display Content="{i:Bind}" 
            i:Display.Condition="{i:Equal Orientation, From=FindAncestor, FromType={x:Type i:ObjectControl}, Value={x:Static Orientation.Horizontal}}">
            <i:Display.ConditionalTemplate>
                <DataTemplate>
                    <i:ImageElement Foreground="{i:Theme Key=Red}" Source="{i:Image Key=Error}" ToolTip="{i:Bind Style.Error.Text}"/>
                </DataTemplate>
            </i:Display.ConditionalTemplate>
            <i:Display.DefaultTemplate>
                <DataTemplate>
                    <i:ResultControl Content="{i:Bind Style.Error}"/>
                </DataTemplate>
            </i:Display.DefaultTemplate>
        </i:Display>
    </DataTemplate>

    <Style x:Key="{x:Type i:ValueElement}" TargetType="{x:Type i:ValueElement}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {x:Static i:ValueElementKey.Template}}"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <!-- {i:Bind Style[AlignX], Convert=Data:ConvertToHorizontalAlignment} -->
        <Setter Property="i:XToolTip.Template" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTip}}"/>
        <Setter Property="i:XToolTip.Header" Value="{i:Bind}"/>
        <Setter Property="i:XToolTip.HeaderTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberHeader}}"/>
        <Setter Property="i:XToolTip.HeaderIcon" Value="{x:Null}"/>
        <Setter Property="i:XToolTip.MinimumWidth" Value="{DynamicResource {x:Static i:ObjectControlKey.MemberToolTipWidthMinimum}}"/>
        <Setter Property="ToolTip" Value="{i:Bind}"/>
        <Setter Property="VerticalAlignment" Value="{i:Bind Style[AlignY], Convert=Data:ConvertToVerticalAlignment}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Bind Style[IsLockable]}" Value="True"/>
                    <Condition Binding="{Data:Is Parent.Value, Type={x:Type Core:ILock}}" Value="True"/>
                    <Condition Binding="{i:Bind Parent.Value.IsLocked}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="IsEnabled" Value="False"/>
            </MultiDataTrigger>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="MaxWidth" Value="{i:Bind Style[MaximumWidth], Convert=Data:ConvertObjectToDouble}"/>
                <Setter Property="MinWidth" Value="{i:Bind Style[MinimumWidth], Convert=Data:ConvertObjectToDouble}"/>
                <Setter Property="Width" Value="{i:Bind Style[Width], Convert=Data:ConvertObjectToDouble}"/>
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="MaxHeight" Value="{i:Bind Style[MaximumHeight], Convert=Data:ConvertObjectToDouble}"/>
                <Setter Property="MinHeight" Value="{i:Bind Style[MinimumHeight], Convert=Data:ConvertObjectToDouble}"/>
                <Setter Property="Height" Value="{i:Bind Style[Height], Convert=Data:ConvertObjectToDouble}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--#endregion-->
</ResourceDictionary>
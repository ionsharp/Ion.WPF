<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:e="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:l="http://wpflocalizeextension.codeplex.com"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
    xmlns:i="clr-namespace:Ion.Controls"
    xmlns:Behavior="clr-namespace:Ion.Behavior"
    xmlns:Core0="clr-namespace:Ion.Core;assembly=Ion"
    xmlns:Core1="clr-namespace:Ion.Core"
    xmlns:Data="clr-namespace:Ion.Data">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="{i:Style Key=Color}"/>
        <ResourceDictionary Source="{i:Style Key=ComboBox}"/>
        <ResourceDictionary Source="{i:Style Key=ContentControl}"/>
        <ResourceDictionary Source="{i:Style Key=ContextMenu}"/>
        <ResourceDictionary Source="{i:Style Key=DataGrid}"/>
        <ResourceDictionary Source="{i:Style Key=Display}"/>
        <ResourceDictionary Source="{i:Style Key=FrameworkElement}"/>
        <ResourceDictionary Source="{i:Style Key=GridSplitter}"/>
        <ResourceDictionary Source="{i:Style Key=Menu}"/>
        <ResourceDictionary Source="{i:Style Key=TabControl}"/>
        <ResourceDictionary Source="{i:Style Key=TextBlock}"/>
        <ResourceDictionary Source="{i:Style Key=ToolBar}"/>
        <ResourceDictionary Source="{i:Style Key=Window}"/>
    </ResourceDictionary.MergedDictionaries>
    <!--#region Find-->

    <DataTemplate x:Key="{x:Static i:DockControl.FindTemplateKey}">
        <i:FindBox CloseCommand="{Data:Ancestor DockControl.CloseFindCommand, i:DockRootControl}"
            FindText="{Data:Ancestor DockControl.FindPanel.FindText, i:DockRootControl}"
            HorizontalAlignment="Right"
            i:XElement.CanResize="True"
            i:XElement.ResizeCoerceAxis="X"
            i:XElement.ResizeCoerceDirection="SW"
            i:XElement.ResizeSnap="1"
            MinWidth="360"
            ResultsCommand="{Data:Ancestor DockControl.FindResultsCommand, i:DockRootControl}"
            VerticalAlignment="Top">
            <i:XElement.ResizeThumbStyle>
                <Style TargetType="{x:Type Thumb}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Thumb}">
                                <Rectangle Cursor="SizeWE" Fill="Transparent" Height="16" Width="16"/>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </i:XElement.ResizeThumbStyle>
            <i:FindBox.Visibility>
                <Data:MultiBind Converter="{x:Static i:DockControl.SearchVisibilityConverter}">
                    <Binding/>
                    <Data:Ancestor FromType="i:DockRootControl" Path="DockControl.ActiveFind"/>
                </Data:MultiBind>
            </i:FindBox.Visibility>
        </i:FindBox>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Content-->

    <DataTemplate x:Key="{x:Static i:DockControl.ContentFooterTemplate}">
        <i:TopBorder Padding="{i:Constant Key=ThickSmaller}">
            <!--
            <i:ObjectControl i:XObjectControl.Source="{Data:BindSection Section=Footer}" Orientation="Horizontal"/>
            -->
        </i:TopBorder>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:DockControl.ContentHeaderTemplate}">
        <i:BottomBorder Padding="{i:Constant Key=ThickSmaller}">
            <!--
            <i:ObjectControl i:XObjectControl.Source="{Data:BindSection Section=Header}" Orientation="Horizontal"/>
            -->
        </i:BottomBorder>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:DockControl.ContentOptionsTemplate}">
        <!--
        <i:ObjectControl i:XObjectControl.Source="{Data:BindSection Section=Option}"
            DescriptionVisibility="{i:Bind IsOptionDescriptionVisible, Convert=Data:ConvertBooleanToVisibility}"/>
        -->
    </DataTemplate>

    <!--#endregion-->

    <!--#region Document-->
    
    <DataTemplate x:Key="{x:Static i:DockControl.DocumentHeaderTemplate}">
        <Grid
            Background="Transparent"
            i:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, {x:Type i:DockRootControl}}"
            i:XElement.MouseEnterCommandParameter="{i:Bind From=Self}"
            i:XDockControl.Drag="True"
            i:XDockControl.DragTarget="{i:Bind}">
            <Grid.Resources>
                <Data:Reference x:Key="DockControl" Data="{Data:Ancestor DockControl, {x:Type i:DockRootControl}}"/>
            </Grid.Resources>
            <Grid i:XGrid.Columns="Auto,Auto,Auto,Auto,Auto,Auto,Auto,Auto" i:XPanel.VerticalContentAlignment="Center"
                ContextMenu="{DynamicResource {x:Static i:DockControl.DocumentMenu}}">
                <ContentPresenter Grid.Column="0"
                    Content="{i:Bind}"
                    ContentTemplate="{Data:Ancestor DockControl.DocumentIconTemplate, i:DockRootControl}"
                    ContentTemplateSelector="{Data:Ancestor DockControl.DocumentIconTemplateSelector, i:DockRootControl}"/>
                <ContentPresenter Grid.Column="1"
                    Content="{i:Bind}"
                    ContentTemplate="{Data:Ancestor DockControl.DocumentTitleTemplate, i:DockRootControl}"
                    ContentTemplateSelector="{Data:Ancestor DockControl.DocumentTitleTemplateSelector, i:DockRootControl}"/>
                <i:ProgressCircle Grid.Column="2"
                    Height="16" Width="16"
                    Margin="1,0,0,0"
                    Visibility="{i:Bind IsActive, Convert=Data:ConvertBooleanToVisibility}"/>
                <ContentPresenter Grid.Column="3" Content="{i:Bind}" 
                    i:Display.Condition="{Data:HasMembers WithSection=HeaderItem}">
                    <i:Display.ConditionalTemplate>
                        <DataTemplate>
                            <!--
                            <i:ObjectControl i:XObjectControl.Source="{Data:BindSection Section=HeaderItem}"
                                i:XItemsControl.EmptyTemplate="{i:Template Key=Default}" 
                                Margin="5,0,0,0"
                                Orientation="Horizontal"/>
                            -->
                        </DataTemplate>
                    </i:Display.ConditionalTemplate>
                </ContentPresenter>
                <i:ImageToggleButton Grid.Column="4"
                    IsChecked="{i:Bind IsOptionVisible, Way=2}"
                    Padding="1"
                    Source="{i:Image Key=Options}"
                    ToolTip="{i:Text Options}"
                    Visibility="{Data:HasMembers Result=Visibility, WithSection=Option}"/>
                <i:ImageToggleButton Grid.Column="5"
                    Padding="1"
                    Source="{i:Image Key=TriangleDown}"
                    ToolTip="{i:Text Actions}"
                    Visibility="{Data:HasMembers Result=Visibility, WithSection=HeaderOption}">
                    <!--
                    <i:ImageToggleButton.Menu>
                        <i:ObjectMenu DataContext="{i:Bind From=Self, Path=PlacementTarget.DataContext}" 
                            i:XObjectControl.Source="{Data:BindSection Section=HeaderOption}"/>
                    </i:ImageToggleButton.Menu>
                    -->
                </i:ImageToggleButton>
                <Grid Grid.Column="6"
                    Margin="1,0,0,0"
                    Visibility="{i:Bind CanMinimize, Convert={x:Type Data:ConvertBooleanToVisibility}}">
                    <i:ImageButton x:Name="MinimizeButton"
                        Command="{Data:Ancestor DockControl.MinimizeCommand, {x:Type i:DockRootControl}}"
                        CommandParameter="{i:Bind}"
                        Source="{i:Image Key=Minus}"
                        SourceSize="12,12"
                        ToolTip="{i:Text Minimize}"
                        Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                    <i:ImageButton x:Name="RestoreButton"
                        Command="{Data:Ancestor DockControl.RestoreCommand, {x:Type i:DockRootControl}}"
                        CommandParameter="{i:Bind}"
                        Source="{i:Image Key=Restore}"
                        SourceSize="12,12"
                        ToolTip="{i:Text Restore}"
                        Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                </Grid>
                <i:ImageButton Grid.Column="7" x:Name="CloseButton"
                    Command="{Data:Ancestor DockControl.CloseDocumentCommand, {x:Type i:DockRootControl}}"
                    CommandParameter="{i:Bind}"
                    Margin="1,0,0,0"
                    Source="{i:Image Key=XSmall}"
                    SourceSize="12,12"
                    ToolTip="{i:Text Close}"
                    Visibility="{i:Bind CanClose, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
            </Grid>
        </Grid>
    </DataTemplate>

    <Style x:Key="{x:Static i:DockControl.DocumentStyle}" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Content" Value="{i:Bind}"/>
        <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, i:DockRootControl}"/>
        <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{i:Bind From=Self}"/>
        <Setter Property="i:XToolTip.Header" Value="{i:Bind ToolTip}"/>
        <Setter Property="i:XToolTip.HeaderIcon" Value="{i:Bind ToolTip}"/>
        <Setter Property="ToolTip" Value="{i:Bind ToolTip}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Data:Is Type=Core1:Document}" Value="True">
                <Setter Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.DocumentTemplateKey}}"/>
                <Setter Property="i:XToolTip.HeaderTemplate" Value="{Data:Ancestor DockControl.DocumentToolTipHeaderTemplate, i:DockRootControl}"/>
                <Setter Property="i:XToolTip.HeaderTemplateSelector" Value="{Data:Ancestor DockControl.DocumentToolTipHeaderTemplateSelector, i:DockRootControl}"/>
                <Setter Property="i:XToolTip.HeaderIconTemplate" Value="{Data:Ancestor DockControl.DocumentToolTipHeaderIconTemplate, i:DockRootControl}"/>
                <Setter Property="i:XToolTip.HeaderIconTemplateSelector" Value="{Data:Ancestor DockControl.DocumentToolTipHeaderIconTemplateSelector, i:DockRootControl}"/>
                <Setter Property="i:XToolTip.Template" Value="{Data:Ancestor DockControl.DocumentToolTipTemplate, i:DockRootControl}"/>
                <Setter Property="i:XToolTip.TemplateSelector" Value="{Data:Ancestor DockControl.DocumentToolTipTemplateSelector, i:DockRootControl}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:Is Type=Core1:Panel}" Value="True">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentPresenter Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelBodyTemplateKey}}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="IsSelected" Value="{i:Bind IsSelected, Mode=TwoWay}"/>
                <Setter Property="i:XToolTip.Template" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, i:DockRootControl}"/>
                <Setter Property="i:XToolTip.TemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, i:DockRootControl}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Bind From=Self, Path=IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, i:DockDocumentControl}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme TabControlBorderActive}"/>
                <Setter Property="BorderBrush" Value="{i:Theme TabControlBorderActive}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Bind From=Self, Path=IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, i:DockDocumentControl}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme TabControlBorder}"/>
                <Setter Property="BorderBrush" Value="{i:Theme TabControlBorder}"/>
                <Setter Property="Foreground" Value="{i:Theme TabItemForeground}"/>
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme TabItemForeground}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <ContextMenu x:Key="{x:Static i:DockControl.DocumentMenu}" x:Shared="False"
        DataContext="{i:Bind From=Self, Path=PlacementTarget.DataContext}"
        i:XElement.RelativeTag="i:DockRootControl"
        i:XElement.RelativeTagSource="{i:Bind From=Self, Path=PlacementTarget}">
        <ContextMenu.Resources>
            <Data:Reference x:Key="DockControl" Data="{Data:Ancestor Tag.DockControl, ContextMenu}"/>
        </ContextMenu.Resources>
        <MenuItem Header="{i:Text Dock}"
            Command="{i:Bind Data.DockDocumentCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Dock}"/>
        <MenuItem Header="{i:Text DockAll}"
            Command="{i:Bind Data.DockAllDocumentsCommand, Source={StaticResource DockControl}}"
            Icon="{i:Image Key=DockAll}"/>
        <Separator/>
        <MenuItem Header="{i:Text Float}"
            Command="{i:Bind Data.FloatCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Float}"/>
        <MenuItem Header="{i:Text FloatAll}"
            Command="{i:Bind Data.FloatAllDocumentsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=FloatAll}"/>
        <Separator/>
        <MenuItem Header="{i:Text Minimize}"
            Command="{i:Bind Data.MinimizeCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Minimize}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <MenuItem Header="{i:Text MinimizeAll}"
            Command="{i:Bind Data.MinimizeAllCommand, Source={StaticResource DockControl}}"
            Icon="{i:Image Key=MinimizeAll}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <Separator/>
        <MenuItem Header="{i:Text MoveToPreviousGroup}"
            Command="{i:Bind Data.MoveDocumentToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveToPreviousGroup}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <MenuItem Header="{i:Text MoveAllToPreviousGroup}"
            Command="{i:Bind Data.MoveAllDocumentsToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveAllToPreviousGroup}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <Separator/>
        <MenuItem Header="{i:Text MoveToNextGroup}"
            Command="{i:Bind Data.MoveDocumentToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveToNextGroup}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <MenuItem Header="{i:Text MoveAllToNextGroup}"
            Command="{i:Bind Data.MoveAllDocumentsToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveAllToNextGroup}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <Separator/>
        <MenuItem Header="{i:Text NewHorizontalGroup}"
            Command="{i:Bind Data.NewDocumentHorizontalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=GroupHorizontal}"/>
        <MenuItem Header="{i:Text NewVerticalGroup}"
            Command="{i:Bind Data.NewDocumentVerticalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=GroupVertical}"/>
        <Separator/>
        <MenuItem Header="{i:Text Restore}"
            Command="{i:Bind Data.RestoreCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Restore}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <MenuItem Header="{i:Text RestoreAll}"
            Command="{i:Bind Data.RestoreAllCommand, Source={StaticResource DockControl}}"
            Icon="{i:Image Key=RestoreAll}"
            Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        <Separator/>
        <MenuItem Header="{i:Text Close}"
            Command="{i:Bind Data.CloseDocumentCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Close}"/>
        <MenuItem Header="{i:Text CloseAll}"
            Command="{i:Bind Data.CloseAllDocumentsCommand, Source={StaticResource DockControl}}"
            Icon="{i:Image Key=CloseAll}"/>
        <MenuItem Header="{i:Text CloseAllButThis}"
            Command="{i:Bind Data.CloseAllDocumentsButThisCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=CloseAllButThis}"/>
    </ContextMenu>

    <DataTemplate x:Key="{x:Static i:DockControl.DocumentTemplateKey}">
        <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*,Auto">
            <ContentPresenter x:Name="Header" Content="{i:Bind}" ContentTemplate="{i:Template Key=Default}"/>
            <Grid>
                <i:Display Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:DockControl.ContentOptionsTemplate}}"
                    Visibility="{i:Bind IsOptionVisible, Convert=Data:ConvertBooleanToVisibility}"/>
                <Grid Visibility="{i:Bind IsOptionVisible, Convert=Data:ConvertBooleanToVisibility, ConverterParameter=1}">
                    <ContentPresenter Content="{i:Bind}"
                        ContentTemplate="{Data:Ancestor DockControl.DocumentTemplate, i:DockRootControl}"
                        ContentTemplateSelector="{Data:Ancestor DockControl.DocumentTemplateSelector, i:DockRootControl}"/>
                    <ContentPresenter Content="{i:Bind}"
                        ContentTemplate="{DynamicResource {x:Static i:DockControl.FindTemplateKey}}"/>
                </Grid>
            </Grid>
            <ContentPresenter x:Name="Footer" Content="{i:Bind}" ContentTemplate="{i:Template Key=Default}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Data:HasMembers WithSection=Footer}" Value="True">
                <Setter TargetName="Footer" Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.ContentFooterTemplate}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:HasMembers WithSection=Header}" Value="True">
                <Setter TargetName="Header" Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.ContentHeaderTemplate}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--#endregion-->

    <!--#region Panel-->

    <Style x:Key="{x:Static i:DockControl.PanelStyle}" TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
        <Setter Property="Content" Value="{i:Bind}"/>
        <Setter Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.PanelTemplateKey}}"/>
        <Setter Property="IsSelected" Value="{i:Bind IsSelected, Mode=TwoWay}"/>
        <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, i:DockRootControl}"/>
        <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{i:Bind From=Self}"/>
        <Setter Property="i:XToolTip.Template" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, i:DockRootControl}"/>
        <Setter Property="i:XToolTip.TemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, i:DockRootControl}"/>
        <Setter Property="i:XToolTip.Header" Value="{i:Bind ToolTip}"/>
        <Setter Property="i:XToolTip.HeaderTemplate" Value="{Data:Ancestor DockControl.PanelToolTipHeaderTemplate, i:DockRootControl}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="ToolTip" Value="{i:Bind ToolTip}"/>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Bind From=Self, Path=IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, {x:Type i:DockPanelControl}}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme TabControlBorderActive}"/>
                <Setter Property="BorderBrush" Value="{i:Theme TabControlBorderActive}"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{i:Bind From=Self, Path=IsSelected}" Value="True"/>
                    <Condition Binding="{Data:Ancestor Active, {x:Type i:DockPanelControl}}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme TabControlBorder}"/>
                <Setter Property="BorderBrush" Value="{i:Theme TabControlBorder}"/>
                <Setter Property="Foreground" Value="{i:Theme TabItemForeground}"/>
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme TabItemForeground}"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <ContextMenu x:Key="{x:Static i:DockControl.PanelMenuKey}" x:Shared="False" 
        DataContext="{i:Bind From=Self, Path=PlacementTarget.DataContext}"
        i:XElement.RelativeTag="i:DockRootControl"
        i:XElement.RelativeTagSource="{i:Bind From=Self, Path=PlacementTarget}">
        <ContextMenu.Resources>
            <Data:Reference x:Key="DockControl" Data="{Data:Ancestor Tag.DockControl, ContextMenu}"/>
        </ContextMenu.Resources>
        <MenuItem Header="{i:Text Collapse}"
            Command="{i:Bind Data.CollapsePanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Collapse}"/>
        <MenuItem Header="{i:Text Expand}"
            Command="{i:Bind Data.ExpandPanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Expand}"/>
        <Separator/>
        <MenuItem Header="{i:Text Dock}"
            Command="{i:Bind Data.DockPanelCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Dock}"/>
        <MenuItem Header="{i:Text DockAll}"
            Command="{i:Bind Data.DockAllPanelsCommand, Source={StaticResource DockControl}}"
            Icon="{i:Image Key=DockAll}"/>
        <Separator/>
        <MenuItem Header="{i:Text Float}"
            Command="{i:Bind Data.FloatCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Float}"/>
        <MenuItem Header="{i:Text FloatAll}"
            Command="{i:Bind Data.FloatAllPanelsCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=FloatAll}"/>
        <Separator/>
        <MenuItem Header="{i:Text Hide}"
            Command="{i:Bind Data.HideCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Hide}"/>
        <MenuItem Header="{i:Text HideAll}"
            Command="{i:Bind Data.HideAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=HideAll}"/>
        <Separator/>
        <MenuItem Header="{i:Text MoveToNextGroup}"
            Command="{i:Bind Data.MovePanelToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveToNextGroup}"/>
        <MenuItem Header="{i:Text MoveAllToNextGroup}"
            Command="{i:Bind Data.MoveAllPanelsToNextGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveAllToNextGroup}"/>
        <Separator/>
        <MenuItem Header="{i:Text MoveToPreviousGroup}"
            Command="{i:Bind Data.MovePanelToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveToPreviousGroup}"/>
        <MenuItem Header="{i:Text MoveAllToPreviousGroup}"
            Command="{i:Bind Data.MoveAllPanelsToPreviousGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=MoveAllToPreviousGroup}"/>
        <Separator/>
        <MenuItem Header="{i:Text NewHorizontalGroup}"
            Command="{i:Bind Data.NewPanelHorizontalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=GroupHorizontal}"/>
        <MenuItem Header="{i:Text NewVerticalGroup}"
            Command="{i:Bind Data.NewPanelVerticalGroupCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=GroupVertical}"/>
        <Separator/>
        <MenuItem Header="{i:Text Pin}"
            Command="{i:Bind Data.PinCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Pin}"
            Visibility="{i:Bind IsEnabled, Convert=Data:ConvertBooleanToVisibility, From=Self}"/>
        <MenuItem Header="{i:Text PinAll}"
            Command="{i:Bind Data.PinAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=PinAll}"/>
        <Separator/>
        <MenuItem Header="{i:Text ShowAll}"
            Command="{i:Bind Data.ShowAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=ShowAll}"/>
        <Separator/>
        <MenuItem Header="{i:Text Unpin}"
            Command="{i:Bind Data.UnpinCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=Unpin}"
            Visibility="{i:Bind IsEnabled, Convert=Data:ConvertBooleanToVisibility, From=Self}"/>
        <MenuItem Header="{i:Text UnpinAll}"
            Command="{i:Bind Data.UnpinAllCommand, Source={StaticResource DockControl}}"
            CommandParameter="{i:Bind}"
            Icon="{i:Image Key=UnpinAll}"
            Visibility="{i:Bind IsEnabled, Convert=Data:ConvertBooleanToVisibility, From=Self}"/>
    </ContextMenu>

    <DataTemplate x:Key="{x:Static i:DockControl.PanelHeaderPatternKey}">
        <i:DotControl Foreground="{Data:Ancestor FrameworkElement, Path=(i:ImageElement.Foreground)}" Type="Dot2"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:DockControl.PanelHeaderTemplateKey}">
        <Grid i:XGrid.Columns="Auto,Auto,Auto,*,Auto,Auto,Auto,Auto,Auto">
            <ContentPresenter Grid.Column="0"
                Content="{i:Bind}"
                ContentTemplate="{Data:Ancestor DockControl.PanelIconTemplate, i:DockRootControl}"
                ContentTemplateSelector="{Data:Ancestor DockControl.PanelIconTemplateSelector, i:DockRootControl}"/>
            <ContentPresenter Grid.Column="1"
                Content="{i:Bind}"
                ContentTemplate="{Data:Ancestor DockControl.PanelTitleTemplate, i:DockRootControl}"
                Margin="5,0"/>
            <i:ProgressCircle Grid.Column="2"
                Height="16"
                Margin="0,0,5,0"
                Width="16"
                Visibility="{i:Bind IsActive, Convert=Data:ConvertBooleanToVisibility}"/>
            <ContentPresenter Grid.Column="3" Content="{i:Bind}"
                ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelHeaderPatternKey}}"/>
            <ContentPresenter Grid.Column="4" Content="{i:Bind}" 
                i:Display.Condition="{Data:HasMembers WithSection=HeaderItem}">
                <i:Display.ConditionalTemplate>
                    <DataTemplate>
                        <!--
                        <i:ObjectControl i:XObjectControl.Source="{Data:BindSection Section=HeaderItem}"
                            Margin="5,0,0,0"
                            Orientation="Horizontal"/>
                        -->
                    </DataTemplate>
                </i:Display.ConditionalTemplate>
            </ContentPresenter>
            <i:ImageToggleButton Grid.Column="5"
                IsChecked="{i:Bind IsOptionVisible, Way=2}"
                Padding="5,2"
                Source="{i:Image Key=Options}"
                ToolTip="{i:Text Options}"
                Visibility="{Data:HasMembers Result=Visibility, WithSection=Option}"/>
            <i:ImageToggleButton Grid.Column="6"
                Padding="5,2"
                Source="{i:Image Key=TriangleDown}"
                Visibility="{Data:HasMembers Result=Visibility, WithSection=HeaderOption}">
                <!--
                <i:ImageToggleButton.Menu>
                    <i:ObjectMenu DataContext="{i:Bind From=Self, Path=PlacementTarget.DataContext}" 
                        i:XObjectControl.Source="{Data:BindSection Section=HeaderOption}"/>
                </i:ImageToggleButton.Menu>
                -->
            </i:ImageToggleButton>
            <i:ImageButton Grid.Column="7"
                Command="{Data:Ancestor DockControl.PinCommand, i:DockRootControl}"
                CommandParameter="{i:Bind}"
                Margin="0,0,5,0"
                Source="{i:Image Key=Pin}"
                ToolTip="{i:Text Pin}"
                Visibility="{i:Bind IsEnabled, Convert=Data:ConvertBooleanToVisibility, From=Self}"/>
            <i:ImageButton Grid.Column="7"
                Command="{Data:Ancestor DockControl.UnpinCommand, i:DockRootControl}"
                CommandParameter="{i:Bind}"
                Margin="0,0,5,0"
                Source="{i:Image Key=Unpin}"
                ToolTip="{i:Text Unpin}"
                Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
            <i:ImageButton Grid.Column="8"
                Command="{Data:Ancestor DockControl.HideCommand, i:DockRootControl}"
                CommandParameter="{i:Bind}"
                Source="{i:Image Key=XSmall}"
                ToolTip="{i:Text Hide}"
                Visibility="{i:Bind From=Self, Path=IsEnabled, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:DockControl.PanelBodyContentTemplate}">
        <Grid>
            <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*,Auto">
                <ContentPresenter x:Name="Header" Content="{i:Bind}" ContentTemplate="{i:Template Key=Default}"
                    Visibility="{i:Bind ShowHeader, Convert=Data:ConvertBooleanToVisibility}"/>
                <Grid>
                    <ContentPresenter x:Name="Content" Content="{i:Bind}"
                        ContentTemplate="{Data:Ancestor DockControl.PanelTemplate, i:DockRootControl}"
                        ContentTemplateSelector="{Data:Ancestor DockControl.PanelTemplateSelector, i:DockRootControl}">
                        <ContentPresenter.Visibility>
                            <Data:MultiBindTrue For="All" Invert="True" Result="Visibility">
                                <Binding Path="HideIfNoActiveDocument"/>
                                <i:Equal From="FindAncestor" FromType="i:DockRootControl" Path="DockControl.ActiveDocument" Value="{x:Null}"/>
                            </Data:MultiBindTrue>
                        </ContentPresenter.Visibility>
                    </ContentPresenter>
                    <ContentPresenter Content="{i:Bind}"
                        i:Display.ConditionalTemplate="{Data:Ancestor DockControl.NoActiveDocumentTemplate, i:DockRootControl}">
                        <i:Display.Condition>
                            <Data:MultiBindTrue For="All">
                                <Binding Path="HideIfNoActiveDocument"/>
                                <i:Equal From="FindAncestor" FromType="i:DockRootControl" Path="DockControl.ActiveDocument" Value="{x:Null}"/>
                            </Data:MultiBindTrue>
                        </i:Display.Condition>
                    </ContentPresenter>
                </Grid>
                <ContentPresenter x:Name="Footer" Content="{i:Bind}" ContentTemplate="{i:Template Key=Default}"
                    Visibility="{i:Bind ShowFooter, Convert=Data:ConvertBooleanToVisibility}"/>
            </Grid>
            <ContentPresenter Content="{i:Bind}"
                ContentTemplate="{DynamicResource {x:Static i:DockControl.FindTemplateKey}}"/>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{i:Bind From=FindAncestor, FromType=i:DockRootControl}" Value="{x:Null}">
                <Setter TargetName="Content" Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentPresenter Content="{i:Bind}">
                                <e:Interaction.Behaviors>
                                    <Behavior:DynamicResourceBehavior Key="{i:Bind ActualTemplateKey}" Property="{x:Static ContentPresenter.ContentTemplateProperty}"/>
                                </e:Interaction.Behaviors>
                            </ContentPresenter>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Data:HasMembers WithSection=Footer}" Value="True">
                <Setter TargetName="Footer" Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.ContentFooterTemplate}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Data:HasMembers WithSection=Header}" Value="True">
                <Setter TargetName="Header" Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.ContentHeaderTemplate}}"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    
    <DataTemplate x:Key="{x:Static i:DockControl.PanelBodyTemplateKey}">
        <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*">
            <ProgressBar 
                Background="#22000000"
                Height="4"
                i:XProgressBar.ContentTemplate="{i:Template Key=Default}"
                Maximum="1" Minimum="0" 
                Value="{i:Bind Progress}"
                Visibility="{i:Bind IsProgressVisible, Convert=Data:ConvertBooleanToVisibility}"/>
            <i:SplitGrid IsCollapsed="True" ShowPanel2="{i:Bind IsOptionVisible}">
                <i:SplitGrid.Panel1>
                    <ContentPresenter Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelBodyContentTemplate}}"
                        Visibility="{i:Bind IsOptionVisible, Convert=Data:ConvertBooleanToVisibility, ConverterParameter=1}"/>
                </i:SplitGrid.Panel1>
                <i:SplitGrid.Panel2>
                    <ContentPresenter Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:DockControl.ContentOptionsTemplate}}"
                        Visibility="{i:Bind IsOptionVisible, Convert=Data:ConvertBooleanToVisibility}"/>
                </i:SplitGrid.Panel2>
            </i:SplitGrid>
        </Grid>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:DockControl.PanelTemplateKey}">
        <HeaderedContentControl 
            Header="{i:Bind}"
            i:XHeaderedContentControl.HeaderPlacement="{Data:Ancestor DockControl.PanelHeaderPlacement, i:DockRootControl}">
            <HeaderedContentControl.Resources>
                <Data:Reference x:Key="DockControl" Data="{Data:Ancestor DockControl, i:DockRootControl}"/>
            </HeaderedContentControl.Resources>
            <HeaderedContentControl.HeaderTemplate>
                <DataTemplate>
                    <i:DockPanelHeaderControl
                        ContextMenu="{DynamicResource {x:Static i:DockControl.PanelMenuKey}}"
                        i:XDockControl.Drag="True"
                        i:XDockControl.DragTarget="{x:Null}"
                        Visibility="{i:Bind TitleVisibility, Convert=Data:ConvertBooleanToVisibility}">
                        <ContentPresenter x:Name="ContentPresenter" Content="{i:Bind}" 
                            ContentTemplate="{i:Bind Data.PanelHeaderTemplate, Source={StaticResource DockControl}}"
                            ContentTemplateSelector="{i:Bind Data.PanelHeaderTemplateSelector, Source={StaticResource DockControl}}"/>
                    </i:DockPanelHeaderControl>
                    <DataTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{i:Bind Data.PanelHeaderTemplate, Source={StaticResource DockControl}}" Value="{x:Null}"/>
                                <Condition Binding="{i:Bind Data.PanelHeaderTemplateSelector, Source={StaticResource DockControl}}" Value="{x:Null}"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.PanelHeaderTemplateKey}}"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </HeaderedContentControl.HeaderTemplate>
            <ContentPresenter Content="{i:Bind}" ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelBodyTemplateKey}}"/>
        </HeaderedContentControl>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:DockControl.PanelTitleHeaderTemplateKey}">
        <ContentControl
            Background="Transparent"
            Content="{i:Bind}"
            ContentTemplate="{Data:Ancestor DockControl.PanelTitleHeaderTemplate, i:DockRootControl}"
            i:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, i:DockRootControl}"
            i:XElement.MouseEnterCommandParameter="{i:Bind From=Self}"
            i:XElement.MouseLeaveCommand="{Data:Ancestor UnselectCommand, i:DockRootControl}"
            i:XDockControl.Drag="True"
            i:XDockControl.DragTarget="{i:Bind}"
            Padding="{i:Constant Key=ThickSmall}"/>
    </DataTemplate>

    <DataTemplate x:Key="{x:Static i:DockControl.CollapsedPanelTitleHeaderTemplateKey}">
        <Border
            Background="Transparent"
            ContextMenu="{DynamicResource {x:Static i:DockControl.PanelMenuKey}}"
            i:XElement.MouseEnterCommand="{Data:Ancestor SelectCommand, i:DockRootControl}"
            i:XElement.MouseEnterCommandParameter="{i:Bind From=Self}"
            i:XElement.MouseLeaveCommand="{Data:Ancestor UnselectCommand, i:DockRootControl}"
            i:XDockControl.Drag="True"
            i:XDockControl.DragTarget="{i:Bind}"
            Padding="{i:Constant Key=ThickSmall}"
            VerticalAlignment="Center">
            <i:ImageElement Source="{i:Bind Convert=Data:ConvertAttributeImageSource}"/>
        </Border>
    </DataTemplate>

    <!--#endregion-->

    <!--#region DisplayPanel-->

    <Style x:Key="{x:Type i:DisplayPanel}" TargetType="i:DisplayPanel" BasedOn="{StaticResource {x:Type i:Display}}">
        <Setter Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.PanelBodyTemplateKey}}"/>
    </Style>

    <!--#endregion-->

    <!--#region DockControl-->

    <!--#region DockControl : Markers-->

    <Style x:Key="{x:Static i:DockControl.EmptyMarkerStyleKey}" TargetType="{x:Type i:ImageElement}" BasedOn="{StaticResource {x:Type i:ImageElement}}">
        <Setter Property="Foreground" Value="{i:Theme DockControlEmptyMarkerSourceColor}"/>
    </Style>

    <Style x:Key="{x:Static i:DockControl.PrimaryMarkerStyleKey}" TargetType="{x:Type i:ImageElement}" BasedOn="{StaticResource {x:Type i:ImageElement}}">
        <Setter Property="Foreground" Value="{i:Theme DockControlPrimaryMarkerSourceColor}"/>
        <Setter Property="Margin" Value="2.5"/>
        <Setter Property="SourceSize" Value="32,32"/>
    </Style>

    <Style x:Key="{x:Static i:DockControl.SecondaryMarkerStyleKey}" TargetType="{x:Type i:ImageElement}" BasedOn="{StaticResource {x:Type i:ImageElement}}">
        <Setter Property="Foreground" Value="{i:Theme DockControlSecondaryMarkerSourceColor}"/>
        <Setter Property="SourceSize" Value="32,32"/>
    </Style>

    <!--#endregion-->

    <!--#region DockControl : Selection-->

    <Style x:Key="{x:Static i:DockControl.SelectionStyleKey}" TargetType="{x:Type Polygon}">
        <Setter Property="Fill" Value="{i:Theme DockControlSelectionBackground}"/>
        <Setter Property="Stroke" Value="{i:Theme DockControlSelectionBorder}"/>
        <Setter Property="StrokeThickness" Value="5"/>
    </Style>

    <!--#endregion-->

    <!--#region DockControl : Styles-->

    <Style x:Key="{x:Static i:DockControl.GridSplitterStyleKey}" TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource {x:Type GridSplitter}}">
        <Setter Property="DragIncrement" Value="16"/>
    </Style>

    <!--#endregion-->

    <Style x:Key="{x:Type i:DockControl}" TargetType="{x:Type i:DockControl}">
        <Setter Property="DefaultPanelTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type Core1:Panel}">
                    <ContentPresenter Content="{i:Bind}"
                        i:Display.Condition="{i:HasField Name=Template}">
                        <ContentPresenter.Resources>
                            <Data:Reference x:Key="Panel" Data="{i:Bind}"/>
                        </ContentPresenter.Resources>
                        <i:Display.ConditionalTemplate>
                            <DataTemplate DataType="{x:Type Core1:Panel}">
                                <ContentPresenter Content="{i:Bind}">
                                    <e:Interaction.Behaviors>
                                        <Behavior:DynamicResourceBehavior Property="{x:Static ContentPresenter.ContentTemplateProperty}">
                                            <Behavior:DynamicResourceBehavior.Key>
                                                <Data:MultiBind ConverterName="FieldValueStatic">
                                                    <i:Bind Source="Template"/>
                                                    <i:Bind Convert="Data:ConvertObjectToType" Path="Data" Source="{StaticResource Panel}"/>
                                                </Data:MultiBind>
                                            </Behavior:DynamicResourceBehavior.Key>
                                        </Behavior:DynamicResourceBehavior>
                                    </e:Interaction.Behaviors>
                                </ContentPresenter>
                            </DataTemplate>
                        </i:Display.ConditionalTemplate>
                        <i:Display.DefaultTemplate>
                            <DataTemplate DataType="{x:Type Core1:Panel}">
                                <!--
                                <i:ObjectControl i:XObjectControl.Source="{i:Bind}"
                                    DescriptionVisibility="Visible"/>
                                -->
                            </DataTemplate>
                        </i:Display.DefaultTemplate>
                    </ContentPresenter>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentIconTemplate">
            <Setter.Value>
                <DataTemplate DataType="Core1:Document">
                    <i:ImageElement
                        HorizontalAlignment="Center"
                        Source="{i:Bind Icon}"
                        VerticalAlignment="Center"
                        Visibility="{i:Bind Icon, Convert=Data:ConvertObjectToVisibility}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentToolTipHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Data:MultiBindName}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="DocumentToolTipTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"/>
        <Setter Property="DocumentTitleTemplate">
            <Setter.Value>
                <DataTemplate DataType="Core1:Document">
                    <TextBlock Text="{i:Bind Title}" TextTrimming="CharacterEllipsis"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusManager.IsFocusScope" Value="True"/>
        <Setter Property="InvalidLayoutTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Center" 
                        VerticalAlignment="Center">
                        <i:ImageElement Source="{i:Image Key=X}"
                            Margin="0,0,5,0"/>
                        <TextBlock Text="No layout loaded" 
                            Opacity="0.5" />
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="MinimizedDocumentPlacement" Value="Bottom"/>
        <Setter Property="NoActiveDocumentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal" 
                        HorizontalAlignment="Center" VerticalAlignment="Center">
                        <i:ImageElement Source="{i:Image Key=File}" 
                            Margin="0,0,5,0"/>
                        <TextBlock Text="Select a document"/>
                    </StackPanel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="PanelHeaderPlacement" Value="Top"/>
        <Setter Property="PanelIconTemplate">
            <Setter.Value>
                <DataTemplate DataType="Core1:Panel">
                    <i:ImageElement
                        HorizontalAlignment="Center"  
                        Source="{i:Bind Convert=Data:ConvertAttributeImageSource}"
                        VerticalAlignment="Center"
                        Visibility="{i:Bind Source, Convert=Data:ConvertObjectToVisibility, From=Self}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelTitleTemplate">
            <Setter.Value>
                <DataTemplate DataType="Core1:Panel">
                    <TextBlock TextTrimming="CharacterEllipsis">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Style.Triggers>
                                    <DataTrigger Binding="{i:Bind TitleLocalized}" Value="True">
                                        <Setter Property="Text" Value="{Data:MultiBindLocalize Title}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{i:Bind TitleLocalized}" Value="False">
                                        <Setter Property="Text" Value="{i:Bind Title}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelTitleHeaderTemplate">
            <Setter.Value>
                <DataTemplate DataType="Core1:Panel">
                    <Grid>
                        <Grid i:XGrid.Columns="Auto,Auto,*,Auto"
                            Background="Transparent"
                            ContextMenu="{DynamicResource {x:Static i:DockControl.PanelMenuKey}}">
                            <i:ImageElement x:Name="Icon"
                                Margin="0,0,5,0"
                                Source="{i:Bind Convert=Data:ConvertAttributeImageSource}"
                                VerticalAlignment="Center"
                                Visibility="{i:Equal Source, Invert=True, Result=Visibility}"/>
                            <ContentPresenter Grid.Column="1"
                                Content="{i:Bind}"
                                ContentTemplate="{Data:Ancestor DockControl.PanelTitleTemplate, i:DockRootControl}"
                                ContentTemplateSelector="{Data:Ancestor DockControl.PanelTitleTemplateSelector, i:DockRootControl}"
                                VerticalAlignment="Center"/>
                            <i:ImageButton Grid.Column="3" x:Name="HideButton"
                                Command="{Data:Ancestor DockControl.HideCommand, i:DockRootControl}"
                                CommandParameter="{i:Bind}"
                                Margin="5,0,0,0"
                                Source="{i:Image Key=X}"
                                SourceSize="12,12"
                                ToolTip="{i:Text Hide}"
                                VerticalAlignment="Center"
                                Visibility="{i:Bind CanHide, Convert={x:Type Data:ConvertBooleanToVisibility}}"/>
                        </Grid>
                    </Grid>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelToolTipHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Data:MultiBindName}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="PanelToolTipTemplate" Value="{DynamicResource {x:Static i:ObjectControlKey.ObjectToolTip}}"/>
        <Setter Property="ProgressTemplate">
            <Setter.Value>
                <DataTemplate>
                    <i:ProgressCircle
                        Height="64"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Width="64"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type i:DockControl}">
                    <Grid>
                        <Border i:XElement.Name="{x:Static i:DockControl.BorderKey}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            i:XElement.FadeTrigger="True"
                            i:XElement.FadeTriggerSource="{i:Bind From=TemplatedParent, Path=Refreshing, Convert=Data:Invert}"
                            Padding="{TemplateBinding Padding}"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding InvalidLayoutTemplate}"
                            Visibility="{i:Bind IsLayoutInvalid, Convert=Data:ConvertBooleanToVisibility, From=TemplatedParent}"/>
                        <ContentPresenter ContentTemplate="{TemplateBinding ProgressTemplate}"
                            i:XElement.FadeTrigger="True"
                            i:XElement.FadeTriggerSource="{TemplateBinding Refreshing}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region DockRootControl-->

    <Style x:Key="{x:Static i:DockRootControl.GridSplitterStyleKey}" TargetType="GridSplitter" BasedOn="{StaticResource {x:Type GridSplitter}}">
        <Setter Property="Background" Value="#11000000"/>
        <Setter Property="ResizeBehavior" Value="PreviousAndNext"/>
        <Setter Property="ShowsPreview" Value="True"/>
        <Style.Triggers>
            <Trigger Property="ResizeDirection" Value="Columns">
                <Setter Property="Height" Value="Auto"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Width" Value="4"/>
            </Trigger>
            <Trigger Property="ResizeDirection" Value="Rows">
                <Setter Property="Height" Value="4"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Width" Value="Auto"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type i:DockRootControl}" TargetType="{x:Type i:DockRootControl}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="PopupTransition" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="i:DockRootControl">
                    <Grid i:XGrid.Columns="Auto,*,Auto" i:XGrid.Rows="Auto,*,Auto">
                        <Grid.Resources>
                            <DataTemplate x:Key="DockPanelBar.ItemTemplate" x:Shared="False" DataType="{x:Type Core1:Panel}">
                                <i:DockPanelButton Content="{i:Bind}" Margin="0,0,5,0"/>
                            </DataTemplate>
                        </Grid.Resources>

                        <!-- ... Pin (Top) -->
                        <i:DockPanelBar Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="1"
                            ItemsSource="{TemplateBinding TopPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,0,0,5"
                            Visibility="{i:Compare32 TopPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <i:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </i:DockPanelBar.ItemsPanel>
                        </i:DockPanelBar>

                        <!-- ... Pin (Left) -->
                        <i:DockPanelBar Grid.Column="0" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="3"
                            ItemsSource="{TemplateBinding LeftPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,0,5,0"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{i:Compare32 LeftPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <i:DockPanelBar.LayoutTransform>
                                <RotateTransform Angle="-90"/>
                            </i:DockPanelBar.LayoutTransform>
                            <i:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </i:DockPanelBar.ItemsPanel>
                        </i:DockPanelBar>

                        <!-- /// -->
                        <Grid Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="1" Grid.RowSpan="1">
                            <HeaderedContentControl i:XHeaderedContentControl.HeaderPlacement="{i:Bind From=TemplatedParent, Path=DockControl.MinimizedDocumentPlacement}">
                                <HeaderedContentControl.Header>
                                    <ToolBar
                                        ItemsSource="{i:Bind From=TemplatedParent, Path=Minimized}"
                                        Margin="0,5,0,0"
                                        Visibility="{i:Compare32 Minimized.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                                        <ToolBar.ItemTemplate>
                                            <DataTemplate>
                                                <i:DockDocumentButton
                                                    Content="{i:Bind}"
                                                    ContentTemplate="{DynamicResource {x:Static i:DockControl.DocumentHeaderTemplate}}"
                                                    i:XDockControl.Drag="True"
                                                    i:XDockControl.DragTarget="{i:Bind}"
                                                    Margin="0,0,5,0"/>
                                            </DataTemplate>
                                        </ToolBar.ItemTemplate>
                                    </ToolBar>
                                </HeaderedContentControl.Header>
                                <ContentPresenter ContentSource="Content"/>
                            </HeaderedContentControl>
                            <!-- Markers -->
                            <Grid>
                                <Grid.Visibility>
                                    <Data:MultiBind Converter="{x:Static i:DockRootControl.MarkerVisibilityConverter}">
                                        <i:Bind From="TemplatedParent" Path="DockControl.Drag.MouseOver"/>
                                        <i:Bind From="TemplatedParent" Path="."/>
                                    </Data:MultiBind>
                                </Grid.Visibility>
                                <!-- ... Secondary/Tertiary -->
                                <Canvas>
                                    <Polygon IsHitTestVisible="False"
                                        Points="{TemplateBinding SelectionPoints}"
                                        Style="{DynamicResource {x:Static i:DockControl.SelectionStyleKey}}"/>
                                    <Grid Canvas.Left="{i:Bind From=TemplatedParent, Path=SecondaryMarkerPosition.X}" Canvas.Top="{i:Bind From=TemplatedParent, Path=SecondaryMarkerPosition.Y}"
                                        Visibility="{i:Bind From=TemplatedParent, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.SecondaryMarkerVisibilityConverter}}">
                                        <i:ImageElement x:Name="EmptyMarker"
                                            Style="{DynamicResource {x:Static i:DockControl.EmptyMarkerStyleKey}}"/>
                                        <Grid i:XGrid.Columns="Auto,Auto,Auto,Auto,Auto" i:XGrid.Rows="Auto,Auto,Auto,Auto,Auto"
                                            HorizontalAlignment="Center" VerticalAlignment="Center"
                                            MinHeight="100" MinWidth="100"
                                            Margin="3">
                                            <!-- ... Secondary -->
                                            <i:ImageElement Grid.Column="0" Grid.Row="2" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockLeft}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:SecondaryDocks.Left}"/>
                                            <i:ImageElement Grid.Column="2" Grid.Row="0" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockTop}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:SecondaryDocks.Top}"/>
                                            <i:ImageElement Grid.Column="4" Grid.Row="2" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockRight}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:SecondaryDocks.Right}"/>
                                            <i:ImageElement Grid.Column="2" Grid.Row="4" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockBottom}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:SecondaryDocks.Bottom}"/>
                                            <i:ImageElement Grid.Column="2" Grid.Row="2" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockCenter}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:SecondaryDocks.Center}"
                                                Visibility="{i:Bind From=TemplatedParent, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.CenterMarkerVisibilityConverter}}"/>
                                            <!-- ... Tertiary -->
                                            <i:ImageElement Grid.Column="1" Grid.Row="2" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockHorizontal}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:TertiaryDocks.Left}"
                                                Visibility="{i:Bind From=TemplatedParent, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <i:ImageElement Grid.Column="3" Grid.Row="2" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockHorizontal}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:TertiaryDocks.Right}"
                                                Visibility="{i:Bind From=TemplatedParent, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <i:ImageElement Grid.Column="2" Grid.Row="1" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockVertical}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:TertiaryDocks.Top}"
                                                Visibility="{i:Bind From=TemplatedParent, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                            <i:ImageElement Grid.Column="2" Grid.Row="3" i:XElement.Name="{x:Static i:DockRootControl.SecondaryMarkerKey}"
                                                Source="{i:Image Key=DockVertical}"
                                                Style="{DynamicResource {x:Static i:DockControl.SecondaryMarkerStyleKey}}"
                                                Tag="{x:Static i:TertiaryDocks.Bottom}"
                                                Visibility="{i:Bind From=TemplatedParent, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.TertiaryMarkerVisibilityConverter}}"/>
                                        </Grid>
                                    </Grid>
                                </Canvas>
                                <!-- ... Primary -->
                                <Border Background="{i:Theme DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center">
                                    <i:ImageElement i:XElement.Name="{x:Static i:DockRootControl.PrimaryMarkerKey}"
                                        Source="{i:Image Key=DockLeft}"
                                        Style="{DynamicResource {x:Static i:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static i:SecondaryDocks.Left}"
                                        ToolTip="{i:Text Left}"/>
                                </Border>
                                <Border Background="{i:Theme DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Top">
                                    <i:ImageElement i:XElement.Name="{x:Static i:DockRootControl.PrimaryMarkerKey}"
                                        Source="{i:Image Key=DockTop}"
                                        Style="{DynamicResource {x:Static i:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static i:SecondaryDocks.Top}"
                                        ToolTip="{i:Text Top}"/>
                                </Border>
                                <Border Background="{i:Theme DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Right"
                                    VerticalAlignment="Center">
                                    <i:ImageElement i:XElement.Name="{x:Static i:DockRootControl.PrimaryMarkerKey}"
                                        Source="{i:Image Key=DockRight}"
                                        Style="{DynamicResource {x:Static i:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static i:SecondaryDocks.Right}"
                                        ToolTip="{i:Text Right}"/>
                                </Border>
                                <Border Background="{i:Theme DockControlPrimaryMarkerBackground}"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Bottom">
                                    <i:ImageElement i:XElement.Name="{x:Static i:DockRootControl.PrimaryMarkerKey}"
                                        Source="{i:Image Key=DockBottom}"
                                        Style="{DynamicResource {x:Static i:DockControl.PrimaryMarkerStyleKey}}"
                                        Tag="{x:Static i:SecondaryDocks.Bottom}"
                                        ToolTip="{i:Text Bottom}"/>
                                </Border>
                            </Grid>
                        </Grid>

                        <!-- ... Pin (Right) -->
                        <i:DockPanelBar Grid.Column="2" Grid.ColumnSpan="1" Grid.Row="0" Grid.RowSpan="3"
                            ItemsSource="{TemplateBinding RightPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="5,0,0,0"
                            RenderTransformOrigin="0.5,0.5"
                            Visibility="{i:Compare32 RightPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <i:DockPanelBar.LayoutTransform>
                                <RotateTransform Angle="90"/>
                            </i:DockPanelBar.LayoutTransform>
                            <i:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </i:DockPanelBar.ItemsPanel>
                        </i:DockPanelBar>

                        <!-- ... Pin (Bottom) -->
                        <i:DockPanelBar Grid.Column="1" Grid.ColumnSpan="1" Grid.Row="2" Grid.RowSpan="1"
                            ItemsSource="{TemplateBinding BottomPanels}"
                            ItemTemplate="{StaticResource DockPanelBar.ItemTemplate}"
                            Margin="0,5,0,0"
                            Visibility="{i:Compare32 BottomPanels.Count, From=TemplatedParent, Result=Visibility, Type=Greater}">
                            <i:DockPanelBar.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </i:DockPanelBar.ItemsPanel>
                        </i:DockPanelBar>

                        <!-- ... Popup (Top) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{i:Bind IsTopOpen, Convert=Data:ConvertBooleanToVisibility, From=TemplatedParent}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="{i:Bind Convert=Data:ConvertControlLengthToGridLength, From=TemplatedParent, Path=TopPanel.PinHeight, Mode=TwoWay}"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <i:DockPopup Grid.Row="0">
                                <i:TransitionControl
                                    Content="{TemplateBinding TopPanel}"
                                    ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </i:DockPopup>
                            <GridSplitter Grid.Row="1"
                                ResizeDirection="Rows"
                                Style="{DynamicResource {x:Static i:DockRootControl.GridSplitterStyleKey}}"/>
                            <Grid Grid.Row="2"/>
                        </Grid>

                        <!-- ... Popup (Left) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{i:Bind IsLeftOpen, Convert=Data:ConvertBooleanToVisibility, From=TemplatedParent}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{i:Bind Convert=Data:ConvertControlLengthToGridLength, From=TemplatedParent, Path=LeftPanel.PinWidth, Mode=TwoWay}"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <i:DockPopup Grid.Column="0">
                                <i:TransitionControl
                                    Content="{TemplateBinding LeftPanel}"
                                    ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </i:DockPopup>
                            <GridSplitter Grid.Column="1"
                                ResizeDirection="Columns"
                                Style="{DynamicResource {x:Static i:DockRootControl.GridSplitterStyleKey}}"/>
                            <Grid Grid.Column="2"/>
                        </Grid>

                        <!-- ... Popup (Right) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{i:Bind IsRightOpen, Convert=Data:ConvertBooleanToVisibility, From=TemplatedParent}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="{i:Bind Convert=Data:ConvertControlLengthToGridLength, From=TemplatedParent, Path=RightPanel.PinWidth, Mode=TwoWay}"/>
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0"/>
                            <GridSplitter Grid.Column="1"
                                ResizeDirection="Columns"
                                Style="{DynamicResource {x:Static i:DockRootControl.GridSplitterStyleKey}}"/>
                            <i:DockPopup Grid.Column="2">
                                <i:TransitionControl
                                    Content="{TemplateBinding RightPanel}"
                                    ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </i:DockPopup>
                        </Grid>

                        <!-- ... Popup (Bottom) -->
                        <Grid Grid.Column="1" Grid.Row="1"
                            Visibility="{i:Bind IsBottomOpen, Convert=Data:ConvertBooleanToVisibility, From=TemplatedParent}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="{i:Bind Convert=Data:ConvertControlLengthToGridLength, From=TemplatedParent, Path=BottomPanel.PinHeight, Mode=TwoWay}"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0"/>
                            <GridSplitter Grid.Row="1"
                                ResizeDirection="Rows"
                                Style="{DynamicResource {x:Static i:DockRootControl.GridSplitterStyleKey}}"/>
                            <i:DockPopup Grid.Row="2">
                                <i:TransitionControl
                                    Content="{TemplateBinding BottomPanel}"
                                    ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelTemplateKey}}"
                                    Transition="{TemplateBinding PopupTransition}"/>
                            </i:DockPopup>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{i:Bind From=Self, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.TertiaryMarkerVisibilityConverter}}" Value="Visible">
                            <Setter TargetName="EmptyMarker" Property="Source" Value="{i:Image Key=DockEmptyLarge}"/>
                            <Setter TargetName="EmptyMarker" Property="SourceSize" Value="160,160"/>
                        </DataTrigger>
                        <DataTrigger Binding="{i:Bind From=Self, Path=DockControl.Drag.MouseOver, Converter={x:Static i:DockRootControl.TertiaryMarkerVisibilityConverter}}" Value="Collapsed">
                            <Setter TargetName="EmptyMarker" Property="Source" Value="{i:Image Key=DockEmpty}"/>
                            <Setter TargetName="EmptyMarker" Property="SourceSize" Value="100,100"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region DockContentControl-->

    <Style x:Key="{x:Type i:DockContentControl}" TargetType="{x:Type i:DockContentControl}" BasedOn="{StaticResource {x:Type i:TabControlCache}}">
        <Style.Triggers>
            <Trigger Property="Active" Value="True">
                <Setter Property="BorderBrush" Value="{i:Theme TabControlBorderActive}"/>
            </Trigger>
            <Trigger Property="Active" Value="False">
                <Setter Property="BorderBrush" Value="{i:Theme TabControlBorder}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region DockDocumentControl-->

    <Style x:Key="{x:Type i:DockDocumentControl}" TargetType="{x:Type i:DockDocumentControl}" BasedOn="{StaticResource {x:Type i:DockContentControl}}">
        <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static i:DockControl.DocumentStyle}}"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{i:Bind}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Is Type=Core1:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.DocumentHeaderTemplate}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Is Type=Core1:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.PanelTitleHeaderTemplateKey}}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XTabControl.OverflowIconTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{i:Bind}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Is Type=Core1:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentIconTemplate, i:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.DocumentIconTemplateSelector, i:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Is Type=Core1:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelIconTemplate, i:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.PanelIconTemplateSelector, i:DockRootControl}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="i:XTabControl.OverflowCommand" Value="{Data:Ancestor DockControl.SelectCommand, i:DockRootControl}"/>
        <Setter Property="i:XTabControl.OverflowHeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ContentPresenter x:Name="ContentPresenter" Content="{i:Bind}"/>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Data:Is Type=Core1:Document}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.DocumentTitleTemplate, i:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.DocumentTitleTemplateSelector, i:DockRootControl}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Data:Is Type=Core1:Panel}" Value="True">
                            <Setter TargetName="ContentPresenter" Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelTitleTemplate, i:DockRootControl}"/>
                            <Setter TargetName="ContentPresenter" Property="ContentTemplateSelector" Value="{Data:Ancestor DockControl.PanelTitleTemplateSelector, i:DockRootControl}"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DockControl.EmptyDocumentGroupVisibility, i:DockRootControl}" Value="Collapsed"/>
                    <Condition Binding="{i:Bind From=Self, Path=Source.Count}" Value="0"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type i:DockDocumentButton}" TargetType="{x:Type i:DockDocumentButton}">
        <Setter Property="Background" Value="{i:Theme DockDocumentButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{i:Theme DockDocumentButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{i:Theme DockDocumentButtonForeground}"/>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme DockDocumentButtonForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="16,5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type i:DockDocumentButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region DockPanelControl-->

    <Style x:Key="{x:Type i:DockPanelControl}" TargetType="{x:Type i:DockPanelControl}" BasedOn="{StaticResource {x:Type i:DockContentControl}}">
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, i:DockGroupControl}" Value="Horizontal"/>
                    <Condition Binding="{i:Bind From=Self, Path=Collapse}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Vertical"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor Orientation, i:DockGroupControl}" Value="Vertical"/>
                    <Condition Binding="{i:Bind From=Self, Path=Collapse}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Data:Ancestor DockControl.EmptyPanelGroupVisibility, i:DockRootControl}" Value="Collapsed"/>
                    <Condition Binding="{i:Bind From=Self, Path=Source.Count}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="i:XTabControl.HeaderVisibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <Trigger Property="Collapse" Value="True">
                <Setter Property="Background" Value="{i:Theme PopupBackground}"/>
                <Setter Property="BorderBrush" Value="{i:Theme TabControlBorder}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="ItemContainerStyle">
                    <Setter.Value>
                        <Style TargetType="TabItem" BasedOn="{StaticResource {x:Type TabItem}}">
                            <Setter Property="Content" Value="{i:Bind}"/>
                            <Setter Property="ContentTemplate" Value="{DynamicResource {x:Static i:DockControl.PanelTemplateKey}}"/>
                            <Setter Property="IsSelected" Value="{i:Bind IsSelected, Mode=TwoWay}"/>
                            <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockTabCommand, i:DockRootControl}"/>
                            <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{i:Bind From=Self}"/>
                            <Setter Property="i:XToolTip.Template" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, i:DockRootControl}"/>
                            <Setter Property="i:XToolTip.TemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, i:DockRootControl}"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="ToolTip" Value="{i:Bind ToolTip}"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{i:Bind From=Self, Path=IsSelected}" Value="True"/>
                                        <Condition Binding="{Data:Ancestor Active, {x:Type i:DockPanelControl}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" Value="{i:Theme TabControlBorderActive}"/>
                                    <Setter Property="BorderBrush" Value="{i:Theme TabControlBorderActive}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{i:Bind From=Self, Path=IsSelected}" Value="True"/>
                                        <Condition Binding="{Data:Ancestor Active, {x:Type i:DockPanelControl}}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" Value="{i:Theme TabControlBorder}"/>
                                    <Setter Property="BorderBrush" Value="{i:Theme TabControlBorder}"/>
                                    <Setter Property="Foreground" Value="{i:Theme TabItemForeground}"/>
                                    <Setter Property="i:ImageElement.Foreground" Value="{i:Theme TabItemForeground}"/>
                                </MultiDataTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="False"/>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" Value="{i:Theme TabItemMouseOverBackground}" />
                                    <Setter Property="BorderBrush" Value="{i:Theme TabItemMouseOverBorder}" />
                                    <Setter Property="Foreground" Value="{i:Theme TabItemMouseOverForeground}" />
                                    <Setter Property="i:ImageElement.Foreground" Value="{i:Theme TabItemMouseOverForeground}" />
                                </MultiTrigger>
                            </Style.Triggers>
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemTemplate" Value="{DynamicResource {x:Static i:DockControl.CollapsedPanelTitleHeaderTemplateKey}}"/>
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="i:DockPanelControl">
                            <Grid ClipToBounds="True"
                                KeyboardNavigation.TabNavigation="Local"
                                SnapsToDevicePixels="True">
                                <Grid.Resources>
                                    <Data:Reference x:Key="DockPanelControl" Data="{i:Bind From=TemplatedParent}"/>
                                </Grid.Resources>
                                <Border x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid i:XGrid.AutoRows="True" i:XGrid.Rows="Auto,*">
                                        <!-- ... Header -->
                                        <i:DockPanelHeaderControl
                                            ContextMenu="{DynamicResource {x:Static i:DockControl.PanelMenuKey}}"
                                            i:XDockControl.Drag="True"
                                            i:XDockControl.DragTarget="{x:Null}"
                                            Padding="{i:Constant Key=ThickSmall}">
                                            <ContentPresenter Content="{i:Bind}"
                                                HorizontalAlignment="Center"
                                                VerticalAlignment="Center"
                                                ContentTemplate="{DynamicResource {x:Static i:DockControl.PanelHeaderPatternKey}}"/>
                                        </i:DockPanelHeaderControl>
                                        <!-- ... Content -->
                                        <ItemsPresenter/>
                                    </Grid>
                                </Border>
                                <!--
                                i:XElement.CanResize="True"
                                i:XElement.ResizeCoerceAxis="X"
                                i:XElement.ResizeCoerceDirection="W"
                                i:XElement.ResizeSnap="1"
                                <i:XElement.ResizeThumbStyle>
                                    <Style TargetType="{x:Type Thumb}">
                                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type Thumb}">
                                                    <Rectangle Cursor="SizeWE" Fill="Transparent" Height="16" Width="16"/>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </i:XElement.ResizeThumbStyle>
                                -->
                                <Popup x:Name="Popup"
                                    IsOpen="{TemplateBinding IsMenuVisible}"
                                    PopupAnimation="Slide"
                                    PlacementTarget="{i:Bind ElementName=Border}">
                                    <i:PopupBorder x:Name="PopupBorder">
                                        <Grid x:Name="Grid0" i:XElement.Name="{x:Static i:TabControlCache.ContentKey}"
                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            KeyboardNavigation.DirectionalNavigation="Contained"
                                            KeyboardNavigation.TabIndex="2"
                                            KeyboardNavigation.TabNavigation="Local"
                                            Margin="{TemplateBinding Padding}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </i:PopupBorder>
                                </Popup>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Data:Ancestor Orientation, i:DockGroupControl}" Value="Horizontal">
                                    <Setter TargetName="Popup" Property="Placement" Value="Left"/>
                                    <Setter TargetName="PopupBorder" Property="Height" Value="{i:Bind ActualHeight, ElementName=Border}"/>
                                    <Setter TargetName="PopupBorder" Property="MaxWidth" Value="720"/>
                                    <Setter TargetName="PopupBorder" Property="MinWidth" Value="128"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Data:Ancestor Orientation, i:DockGroupControl}" Value="Vertical">
                                    <Setter TargetName="Popup" Property="Placement" Value="Bottom"/>
                                    <Setter TargetName="PopupBorder" Property="MaxHeight" Value="720"/>
                                    <Setter TargetName="PopupBorder" Property="MinHeight" Value="128"/>
                                    <Setter TargetName="PopupBorder" Property="Width" Value="{i:Bind ActualWidth, ElementName=Border}"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
            </Trigger>
            <Trigger Property="Collapse" Value="False">
                <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Static i:DockControl.PanelStyle}}"/>
                <Setter Property="ItemTemplate" Value="{DynamicResource {x:Static i:DockControl.PanelTitleHeaderTemplateKey}}"/>
                <Setter Property="i:XTabControl.OverflowIconTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl
                                Content="{i:Bind}"
                                ContentTemplate="{i:Bind From=Self, Path=Tag.DockControl.PanelIconTemplate}"
                                ContentTemplateSelector="{i:Bind From=Self, Path=Tag.DockControl.PanelIconTemplateSelector}"
                                i:XElement.RelativeTag="{x:Type i:DockRootControl}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="i:XTabControl.OverflowCommand" Value="{Data:Ancestor DockControl.SelectCommand, i:DockRootControl}"/>
                <Setter Property="i:XTabControl.OverflowHeaderTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <ContentControl
                                Content="{i:Bind}"
                                ContentTemplate="{i:Bind From=Self, Path=Tag.DockControl.PanelTitleTemplate}"
                                ContentTemplateSelector="{i:Bind From=Self, Path=Tag.DockControl.PanelTitleTemplateSelector}"
                                i:XElement.RelativeTag="{x:Type i:DockRootControl}"/>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="TabStripPlacement" Value="Bottom"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type i:DockPanelBar}" TargetType="{x:Type i:DockPanelBar}" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style x:Key="{x:Type i:DockPanelButton}" TargetType="{x:Type i:DockPanelButton}">
        <Setter Property="Background" Value="{i:Theme DockPanelButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{i:Theme DockPanelButtonBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,3"/>
        <Setter Property="ClickMode" Value="Release"/>
        <Setter Property="Command" Value="{Data:Ancestor PreviewCommand, i:DockRootControl}"/>
        <Setter Property="CommandParameter" Value="{i:Bind From=Self}"/>
        <Setter Property="Content" Value="{i:Bind}"/>
        <Setter Property="ContentTemplate" Value="{Data:Ancestor DockControl.PanelIconTemplate, i:DockRootControl}"/>
        <Setter Property="ContextMenu" Value="{DynamicResource {x:Static i:DockControl.PanelMenuKey}}"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Foreground" Value="{i:Theme DockPanelButtonForeground}"/>
        <Setter Property="i:XElement.MouseEnterCommand" Value="{Data:Ancestor SelectCommand, i:DockRootControl}"/>
        <Setter Property="i:XElement.MouseEnterCommandParameter" Value="{i:Bind From=Self}"/>
        <Setter Property="i:XElement.MouseLeaveCommand" Value="{Data:Ancestor UnselectCommand, i:DockRootControl}"/>
        <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommand" Value="{Data:Ancestor DockControl.DockPinCommand, i:DockRootControl}"/>
        <Setter Property="i:XElement.PreviewMouseLeftButtonUpCommandParameter" Value="{i:Bind From=Self}"/>
        <Setter Property="i:XToolTip.Template" Value="{Data:Ancestor DockControl.PanelToolTipTemplate, i:DockRootControl}"/>
        <Setter Property="i:XToolTip.TemplateSelector" Value="{Data:Ancestor DockControl.PanelToolTipTemplateSelector, i:DockRootControl}"/>
        <Setter Property="i:XToolTip.Header" Value="{i:Bind ToolTip}"/>
        <Setter Property="i:XToolTip.HeaderTemplate" Value="{Data:Ancestor DockControl.PanelToolTipHeaderTemplate, i:DockRootControl}"/>
        <Setter Property="i:XDockControl.PreviewDrag" Value="True"/>
        <Setter Property="i:XDockControl.DragTarget" Value="{i:Bind}"/>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme DockPanelButtonForeground}"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type i:DockPanelButton}">
                    <Border
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Padding="{TemplateBinding Padding}">
                        <ContentPresenter
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ToolTip" Value="{i:Bind ToolTip}"/>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="False"/>
                    <Condition Property="IsMouseOver" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{i:Theme DockPanelButtonMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{i:Theme DockPanelButtonMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{i:Theme DockPanelButtonMouseOverForeground}"/>
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme DockPanelButtonMouseOverForeground}"/>
            </MultiTrigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{i:Theme DockPanelButtonCheckedBackground}"/>
                <Setter Property="BorderBrush" Value="{i:Theme DockPanelButtonCheckedBorder}"/>
                <Setter Property="Foreground" Value="{i:Theme DockPanelButtonCheckedForeground}"/>
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme DockPanelButtonCheckedForeground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type i:DockPanelHeaderControl}" TargetType="{x:Type i:DockPanelHeaderControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Background" Value="{i:Theme DockPanelHeaderBackground}"/>
        <Setter Property="BorderBrush" Value="{i:Theme DockPanelHeaderBorder}"/>
        <Setter Property="BorderThickness" Value="0,0,0,1"/>
        <Setter Property="Foreground" Value="{i:Theme DockPanelHeaderForeground}"/>
        <Setter Property="i:ImageElement.Foreground" Value="{i:Theme DockPanelHeaderForeground}"/>
        <Setter Property="Padding" Value="4,1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{i:Theme DockPanelHeaderMouseOverBackground}"/>
                <Setter Property="BorderBrush" Value="{i:Theme DockPanelHeaderMouseOverBorder}"/>
                <Setter Property="Foreground" Value="{i:Theme DockPanelHeaderMouseOverForeground}"/>
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme DockPanelHeaderMouseOverForeground}"/>
            </Trigger>
            <DataTrigger Binding="{Data:Ancestor Active, i:DockPanelControl}" Value="True">
                <Setter Property="Background" Value="{i:Theme DockPanelHeaderMouseDownBackground}"/>
                <Setter Property="BorderBrush" Value="{i:Theme DockPanelHeaderMouseDownBorder}"/>
                <Setter Property="Foreground" Value="{i:Theme DockPanelHeaderMouseDownForeground}"/>
                <Setter Property="i:ImageElement.Foreground" Value="{i:Theme DockPanelHeaderMouseDownForeground}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region DockPopup-->

    <Style x:Key="{x:Type i:DockPopup}" TargetType="{x:Type i:DockPopup}">
        <Setter Property="Background" Value="{i:Theme PopupBackground}"/>
        <Setter Property="BorderBrush" Value="{i:Theme PopupBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!--#endregion-->

    <!--#region DockWindow-->

    <Style x:Key="{x:Type i:DockWindow}" TargetType="{x:Type i:DockWindow}" BasedOn="{StaticResource {x:Type Window}}">
        <Setter Property="Height" Value="360"/>
        <Setter Property="i:XWindow.IsChild" Value="True"/>
        <Setter Property="i:XWindow.Icon" Value="{i:Bind AppSource=Model, Path=View.(i:XWindow.Icon)}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <!--<Setter Property="Title" Value="{i:AssemblyProduct}"/>-->
        <Setter Property="Width" Value="540"/>
    </Style>

    <!--#endregion-->
</ResourceDictionary>